// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:42+11:00

// Package route53double provides a TestDouble implementation of route53iface.Route53API
package route53double

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/route53"
	"github.com/aws/aws-sdk-go/service/route53/route53iface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// Route53Double is TestDouble for route53iface.Route53API
type Route53Double struct {
	route53iface.Route53API
	*awsdouble.AWSTestDouble
}

// Constructor for Route53Double
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *Route53Double {
	result := &Route53Double{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*route53iface.Route53API)(nil), configurators...)
	return result
}

func (d *Route53Double) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *Route53Double) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateVPCWithHostedZoneWithContext":
		return m.Fake(d.fakeAssociateVPCWithHostedZoneWithContext)

	case "ChangeResourceRecordSetsWithContext":
		return m.Fake(d.fakeChangeResourceRecordSetsWithContext)

	case "ChangeTagsForResourceWithContext":
		return m.Fake(d.fakeChangeTagsForResourceWithContext)

	case "CreateHealthCheckWithContext":
		return m.Fake(d.fakeCreateHealthCheckWithContext)

	case "CreateHostedZoneWithContext":
		return m.Fake(d.fakeCreateHostedZoneWithContext)

	case "CreateQueryLoggingConfigWithContext":
		return m.Fake(d.fakeCreateQueryLoggingConfigWithContext)

	case "CreateReusableDelegationSetWithContext":
		return m.Fake(d.fakeCreateReusableDelegationSetWithContext)

	case "CreateTrafficPolicyInstanceWithContext":
		return m.Fake(d.fakeCreateTrafficPolicyInstanceWithContext)

	case "CreateTrafficPolicyVersionWithContext":
		return m.Fake(d.fakeCreateTrafficPolicyVersionWithContext)

	case "CreateTrafficPolicyWithContext":
		return m.Fake(d.fakeCreateTrafficPolicyWithContext)

	case "CreateVPCAssociationAuthorizationWithContext":
		return m.Fake(d.fakeCreateVPCAssociationAuthorizationWithContext)

	case "DeleteHealthCheckWithContext":
		return m.Fake(d.fakeDeleteHealthCheckWithContext)

	case "DeleteHostedZoneWithContext":
		return m.Fake(d.fakeDeleteHostedZoneWithContext)

	case "DeleteQueryLoggingConfigWithContext":
		return m.Fake(d.fakeDeleteQueryLoggingConfigWithContext)

	case "DeleteReusableDelegationSetWithContext":
		return m.Fake(d.fakeDeleteReusableDelegationSetWithContext)

	case "DeleteTrafficPolicyInstanceWithContext":
		return m.Fake(d.fakeDeleteTrafficPolicyInstanceWithContext)

	case "DeleteTrafficPolicyWithContext":
		return m.Fake(d.fakeDeleteTrafficPolicyWithContext)

	case "DeleteVPCAssociationAuthorizationWithContext":
		return m.Fake(d.fakeDeleteVPCAssociationAuthorizationWithContext)

	case "DisassociateVPCFromHostedZoneWithContext":
		return m.Fake(d.fakeDisassociateVPCFromHostedZoneWithContext)

	case "GetAccountLimitWithContext":
		return m.Fake(d.fakeGetAccountLimitWithContext)

	case "GetChangeWithContext":
		return m.Fake(d.fakeGetChangeWithContext)

	case "GetCheckerIpRangesWithContext":
		return m.Fake(d.fakeGetCheckerIpRangesWithContext)

	case "GetGeoLocationWithContext":
		return m.Fake(d.fakeGetGeoLocationWithContext)

	case "GetHealthCheckCountWithContext":
		return m.Fake(d.fakeGetHealthCheckCountWithContext)

	case "GetHealthCheckLastFailureReasonWithContext":
		return m.Fake(d.fakeGetHealthCheckLastFailureReasonWithContext)

	case "GetHealthCheckStatusWithContext":
		return m.Fake(d.fakeGetHealthCheckStatusWithContext)

	case "GetHealthCheckWithContext":
		return m.Fake(d.fakeGetHealthCheckWithContext)

	case "GetHostedZoneCountWithContext":
		return m.Fake(d.fakeGetHostedZoneCountWithContext)

	case "GetHostedZoneLimitWithContext":
		return m.Fake(d.fakeGetHostedZoneLimitWithContext)

	case "GetHostedZoneWithContext":
		return m.Fake(d.fakeGetHostedZoneWithContext)

	case "GetQueryLoggingConfigWithContext":
		return m.Fake(d.fakeGetQueryLoggingConfigWithContext)

	case "GetReusableDelegationSetLimitWithContext":
		return m.Fake(d.fakeGetReusableDelegationSetLimitWithContext)

	case "GetReusableDelegationSetWithContext":
		return m.Fake(d.fakeGetReusableDelegationSetWithContext)

	case "GetTrafficPolicyInstanceCountWithContext":
		return m.Fake(d.fakeGetTrafficPolicyInstanceCountWithContext)

	case "GetTrafficPolicyInstanceWithContext":
		return m.Fake(d.fakeGetTrafficPolicyInstanceWithContext)

	case "GetTrafficPolicyWithContext":
		return m.Fake(d.fakeGetTrafficPolicyWithContext)

	case "ListGeoLocationsWithContext":
		return m.Fake(d.fakeListGeoLocationsWithContext)

	case "ListHealthChecksPages":
		return m.Fake(d.fakeListHealthChecksPages)

	case "ListHealthChecksPagesWithContext":
		return m.Fake(d.fakeListHealthChecksPagesWithContext)

	case "ListHealthChecksWithContext":
		return m.Fake(d.fakeListHealthChecksWithContext)

	case "ListHostedZonesByNameWithContext":
		return m.Fake(d.fakeListHostedZonesByNameWithContext)

	case "ListHostedZonesPages":
		return m.Fake(d.fakeListHostedZonesPages)

	case "ListHostedZonesPagesWithContext":
		return m.Fake(d.fakeListHostedZonesPagesWithContext)

	case "ListHostedZonesWithContext":
		return m.Fake(d.fakeListHostedZonesWithContext)

	case "ListQueryLoggingConfigsWithContext":
		return m.Fake(d.fakeListQueryLoggingConfigsWithContext)

	case "ListResourceRecordSetsPages":
		return m.Fake(d.fakeListResourceRecordSetsPages)

	case "ListResourceRecordSetsPagesWithContext":
		return m.Fake(d.fakeListResourceRecordSetsPagesWithContext)

	case "ListResourceRecordSetsWithContext":
		return m.Fake(d.fakeListResourceRecordSetsWithContext)

	case "ListReusableDelegationSetsWithContext":
		return m.Fake(d.fakeListReusableDelegationSetsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListTagsForResourcesWithContext":
		return m.Fake(d.fakeListTagsForResourcesWithContext)

	case "ListTrafficPoliciesWithContext":
		return m.Fake(d.fakeListTrafficPoliciesWithContext)

	case "ListTrafficPolicyInstancesByHostedZoneWithContext":
		return m.Fake(d.fakeListTrafficPolicyInstancesByHostedZoneWithContext)

	case "ListTrafficPolicyInstancesByPolicyWithContext":
		return m.Fake(d.fakeListTrafficPolicyInstancesByPolicyWithContext)

	case "ListTrafficPolicyInstancesWithContext":
		return m.Fake(d.fakeListTrafficPolicyInstancesWithContext)

	case "ListTrafficPolicyVersionsWithContext":
		return m.Fake(d.fakeListTrafficPolicyVersionsWithContext)

	case "ListVPCAssociationAuthorizationsWithContext":
		return m.Fake(d.fakeListVPCAssociationAuthorizationsWithContext)

	case "TestDNSAnswerWithContext":
		return m.Fake(d.fakeTestDNSAnswerWithContext)

	case "UpdateHealthCheckWithContext":
		return m.Fake(d.fakeUpdateHealthCheckWithContext)

	case "UpdateHostedZoneCommentWithContext":
		return m.Fake(d.fakeUpdateHostedZoneCommentWithContext)

	case "UpdateTrafficPolicyCommentWithContext":
		return m.Fake(d.fakeUpdateTrafficPolicyCommentWithContext)

	case "UpdateTrafficPolicyInstanceWithContext":
		return m.Fake(d.fakeUpdateTrafficPolicyInstanceWithContext)

	case "WaitUntilResourceRecordSetsChanged":
		return m.Fake(d.fakeWaitUntilResourceRecordSetsChanged)

	case "WaitUntilResourceRecordSetsChangedWithContext":
		return m.Fake(d.fakeWaitUntilResourceRecordSetsChangedWithContext)

	default:
		return nil
	}
}

func (d *Route53Double) AssociateVPCWithHostedZone(i0 *route53.AssociateVPCWithHostedZoneInput) (r0 *route53.AssociateVPCWithHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVPCWithHostedZone", i0)
	r0, _ = returns[0].(*route53.AssociateVPCWithHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) AssociateVPCWithHostedZoneRequest(i0 *route53.AssociateVPCWithHostedZoneInput) (r0 *request.Request, r1 *route53.AssociateVPCWithHostedZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVPCWithHostedZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.AssociateVPCWithHostedZoneOutput)
	return
}

func (d *Route53Double) AssociateVPCWithHostedZoneWithContext(i0 context.Context, i1 *route53.AssociateVPCWithHostedZoneInput, i2 ...request.Option) (r0 *route53.AssociateVPCWithHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateVPCWithHostedZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.AssociateVPCWithHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeAssociateVPCWithHostedZoneWithContext(ctx context.Context, in *route53.AssociateVPCWithHostedZoneInput, _ ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateVPCWithHostedZone cancelled", ctx.Err())
	default:
		return d.AssociateVPCWithHostedZone(in)
	}
}

func (d *Route53Double) ChangeResourceRecordSets(i0 *route53.ChangeResourceRecordSetsInput) (r0 *route53.ChangeResourceRecordSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeResourceRecordSets", i0)
	r0, _ = returns[0].(*route53.ChangeResourceRecordSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ChangeResourceRecordSetsRequest(i0 *route53.ChangeResourceRecordSetsInput) (r0 *request.Request, r1 *route53.ChangeResourceRecordSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeResourceRecordSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ChangeResourceRecordSetsOutput)
	return
}

func (d *Route53Double) ChangeResourceRecordSetsWithContext(i0 context.Context, i1 *route53.ChangeResourceRecordSetsInput, i2 ...request.Option) (r0 *route53.ChangeResourceRecordSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeResourceRecordSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ChangeResourceRecordSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeChangeResourceRecordSetsWithContext(ctx context.Context, in *route53.ChangeResourceRecordSetsInput, _ ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ChangeResourceRecordSets cancelled", ctx.Err())
	default:
		return d.ChangeResourceRecordSets(in)
	}
}

func (d *Route53Double) ChangeTagsForResource(i0 *route53.ChangeTagsForResourceInput) (r0 *route53.ChangeTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeTagsForResource", i0)
	r0, _ = returns[0].(*route53.ChangeTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ChangeTagsForResourceRequest(i0 *route53.ChangeTagsForResourceInput) (r0 *request.Request, r1 *route53.ChangeTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ChangeTagsForResourceOutput)
	return
}

func (d *Route53Double) ChangeTagsForResourceWithContext(i0 context.Context, i1 *route53.ChangeTagsForResourceInput, i2 ...request.Option) (r0 *route53.ChangeTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ChangeTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ChangeTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeChangeTagsForResourceWithContext(ctx context.Context, in *route53.ChangeTagsForResourceInput, _ ...request.Option) (*route53.ChangeTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ChangeTagsForResource cancelled", ctx.Err())
	default:
		return d.ChangeTagsForResource(in)
	}
}

func (d *Route53Double) CreateHealthCheck(i0 *route53.CreateHealthCheckInput) (r0 *route53.CreateHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHealthCheck", i0)
	r0, _ = returns[0].(*route53.CreateHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateHealthCheckRequest(i0 *route53.CreateHealthCheckInput) (r0 *request.Request, r1 *route53.CreateHealthCheckOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHealthCheckRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateHealthCheckOutput)
	return
}

func (d *Route53Double) CreateHealthCheckWithContext(i0 context.Context, i1 *route53.CreateHealthCheckInput, i2 ...request.Option) (r0 *route53.CreateHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHealthCheckWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateHealthCheckWithContext(ctx context.Context, in *route53.CreateHealthCheckInput, _ ...request.Option) (*route53.CreateHealthCheckOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHealthCheck cancelled", ctx.Err())
	default:
		return d.CreateHealthCheck(in)
	}
}

func (d *Route53Double) CreateHostedZone(i0 *route53.CreateHostedZoneInput) (r0 *route53.CreateHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHostedZone", i0)
	r0, _ = returns[0].(*route53.CreateHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateHostedZoneRequest(i0 *route53.CreateHostedZoneInput) (r0 *request.Request, r1 *route53.CreateHostedZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHostedZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateHostedZoneOutput)
	return
}

func (d *Route53Double) CreateHostedZoneWithContext(i0 context.Context, i1 *route53.CreateHostedZoneInput, i2 ...request.Option) (r0 *route53.CreateHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateHostedZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateHostedZoneWithContext(ctx context.Context, in *route53.CreateHostedZoneInput, _ ...request.Option) (*route53.CreateHostedZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateHostedZone cancelled", ctx.Err())
	default:
		return d.CreateHostedZone(in)
	}
}

func (d *Route53Double) CreateQueryLoggingConfig(i0 *route53.CreateQueryLoggingConfigInput) (r0 *route53.CreateQueryLoggingConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueryLoggingConfig", i0)
	r0, _ = returns[0].(*route53.CreateQueryLoggingConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateQueryLoggingConfigRequest(i0 *route53.CreateQueryLoggingConfigInput) (r0 *request.Request, r1 *route53.CreateQueryLoggingConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueryLoggingConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateQueryLoggingConfigOutput)
	return
}

func (d *Route53Double) CreateQueryLoggingConfigWithContext(i0 context.Context, i1 *route53.CreateQueryLoggingConfigInput, i2 ...request.Option) (r0 *route53.CreateQueryLoggingConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateQueryLoggingConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateQueryLoggingConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateQueryLoggingConfigWithContext(ctx context.Context, in *route53.CreateQueryLoggingConfigInput, _ ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateQueryLoggingConfig cancelled", ctx.Err())
	default:
		return d.CreateQueryLoggingConfig(in)
	}
}

func (d *Route53Double) CreateReusableDelegationSet(i0 *route53.CreateReusableDelegationSetInput) (r0 *route53.CreateReusableDelegationSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReusableDelegationSet", i0)
	r0, _ = returns[0].(*route53.CreateReusableDelegationSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateReusableDelegationSetRequest(i0 *route53.CreateReusableDelegationSetInput) (r0 *request.Request, r1 *route53.CreateReusableDelegationSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReusableDelegationSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateReusableDelegationSetOutput)
	return
}

func (d *Route53Double) CreateReusableDelegationSetWithContext(i0 context.Context, i1 *route53.CreateReusableDelegationSetInput, i2 ...request.Option) (r0 *route53.CreateReusableDelegationSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReusableDelegationSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateReusableDelegationSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateReusableDelegationSetWithContext(ctx context.Context, in *route53.CreateReusableDelegationSetInput, _ ...request.Option) (*route53.CreateReusableDelegationSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReusableDelegationSet cancelled", ctx.Err())
	default:
		return d.CreateReusableDelegationSet(in)
	}
}

func (d *Route53Double) CreateTrafficPolicy(i0 *route53.CreateTrafficPolicyInput) (r0 *route53.CreateTrafficPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicy", i0)
	r0, _ = returns[0].(*route53.CreateTrafficPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateTrafficPolicyInstance(i0 *route53.CreateTrafficPolicyInstanceInput) (r0 *route53.CreateTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyInstance", i0)
	r0, _ = returns[0].(*route53.CreateTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateTrafficPolicyInstanceRequest(i0 *route53.CreateTrafficPolicyInstanceInput) (r0 *request.Request, r1 *route53.CreateTrafficPolicyInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateTrafficPolicyInstanceOutput)
	return
}

func (d *Route53Double) CreateTrafficPolicyInstanceWithContext(i0 context.Context, i1 *route53.CreateTrafficPolicyInstanceInput, i2 ...request.Option) (r0 *route53.CreateTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateTrafficPolicyInstanceWithContext(ctx context.Context, in *route53.CreateTrafficPolicyInstanceInput, _ ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrafficPolicyInstance cancelled", ctx.Err())
	default:
		return d.CreateTrafficPolicyInstance(in)
	}
}

func (d *Route53Double) CreateTrafficPolicyRequest(i0 *route53.CreateTrafficPolicyInput) (r0 *request.Request, r1 *route53.CreateTrafficPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateTrafficPolicyOutput)
	return
}

func (d *Route53Double) CreateTrafficPolicyVersion(i0 *route53.CreateTrafficPolicyVersionInput) (r0 *route53.CreateTrafficPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyVersion", i0)
	r0, _ = returns[0].(*route53.CreateTrafficPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateTrafficPolicyVersionRequest(i0 *route53.CreateTrafficPolicyVersionInput) (r0 *request.Request, r1 *route53.CreateTrafficPolicyVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateTrafficPolicyVersionOutput)
	return
}

func (d *Route53Double) CreateTrafficPolicyVersionWithContext(i0 context.Context, i1 *route53.CreateTrafficPolicyVersionInput, i2 ...request.Option) (r0 *route53.CreateTrafficPolicyVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateTrafficPolicyVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateTrafficPolicyVersionWithContext(ctx context.Context, in *route53.CreateTrafficPolicyVersionInput, _ ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrafficPolicyVersion cancelled", ctx.Err())
	default:
		return d.CreateTrafficPolicyVersion(in)
	}
}

func (d *Route53Double) CreateTrafficPolicyWithContext(i0 context.Context, i1 *route53.CreateTrafficPolicyInput, i2 ...request.Option) (r0 *route53.CreateTrafficPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTrafficPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateTrafficPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateTrafficPolicyWithContext(ctx context.Context, in *route53.CreateTrafficPolicyInput, _ ...request.Option) (*route53.CreateTrafficPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTrafficPolicy cancelled", ctx.Err())
	default:
		return d.CreateTrafficPolicy(in)
	}
}

func (d *Route53Double) CreateVPCAssociationAuthorization(i0 *route53.CreateVPCAssociationAuthorizationInput) (r0 *route53.CreateVPCAssociationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVPCAssociationAuthorization", i0)
	r0, _ = returns[0].(*route53.CreateVPCAssociationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) CreateVPCAssociationAuthorizationRequest(i0 *route53.CreateVPCAssociationAuthorizationInput) (r0 *request.Request, r1 *route53.CreateVPCAssociationAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVPCAssociationAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.CreateVPCAssociationAuthorizationOutput)
	return
}

func (d *Route53Double) CreateVPCAssociationAuthorizationWithContext(i0 context.Context, i1 *route53.CreateVPCAssociationAuthorizationInput, i2 ...request.Option) (r0 *route53.CreateVPCAssociationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateVPCAssociationAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.CreateVPCAssociationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeCreateVPCAssociationAuthorizationWithContext(ctx context.Context, in *route53.CreateVPCAssociationAuthorizationInput, _ ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateVPCAssociationAuthorization cancelled", ctx.Err())
	default:
		return d.CreateVPCAssociationAuthorization(in)
	}
}

func (d *Route53Double) DeleteHealthCheck(i0 *route53.DeleteHealthCheckInput) (r0 *route53.DeleteHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHealthCheck", i0)
	r0, _ = returns[0].(*route53.DeleteHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DeleteHealthCheckRequest(i0 *route53.DeleteHealthCheckInput) (r0 *request.Request, r1 *route53.DeleteHealthCheckOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHealthCheckRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DeleteHealthCheckOutput)
	return
}

func (d *Route53Double) DeleteHealthCheckWithContext(i0 context.Context, i1 *route53.DeleteHealthCheckInput, i2 ...request.Option) (r0 *route53.DeleteHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHealthCheckWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DeleteHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDeleteHealthCheckWithContext(ctx context.Context, in *route53.DeleteHealthCheckInput, _ ...request.Option) (*route53.DeleteHealthCheckOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHealthCheck cancelled", ctx.Err())
	default:
		return d.DeleteHealthCheck(in)
	}
}

func (d *Route53Double) DeleteHostedZone(i0 *route53.DeleteHostedZoneInput) (r0 *route53.DeleteHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHostedZone", i0)
	r0, _ = returns[0].(*route53.DeleteHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DeleteHostedZoneRequest(i0 *route53.DeleteHostedZoneInput) (r0 *request.Request, r1 *route53.DeleteHostedZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHostedZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DeleteHostedZoneOutput)
	return
}

func (d *Route53Double) DeleteHostedZoneWithContext(i0 context.Context, i1 *route53.DeleteHostedZoneInput, i2 ...request.Option) (r0 *route53.DeleteHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteHostedZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DeleteHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDeleteHostedZoneWithContext(ctx context.Context, in *route53.DeleteHostedZoneInput, _ ...request.Option) (*route53.DeleteHostedZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteHostedZone cancelled", ctx.Err())
	default:
		return d.DeleteHostedZone(in)
	}
}

func (d *Route53Double) DeleteQueryLoggingConfig(i0 *route53.DeleteQueryLoggingConfigInput) (r0 *route53.DeleteQueryLoggingConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueryLoggingConfig", i0)
	r0, _ = returns[0].(*route53.DeleteQueryLoggingConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DeleteQueryLoggingConfigRequest(i0 *route53.DeleteQueryLoggingConfigInput) (r0 *request.Request, r1 *route53.DeleteQueryLoggingConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueryLoggingConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DeleteQueryLoggingConfigOutput)
	return
}

func (d *Route53Double) DeleteQueryLoggingConfigWithContext(i0 context.Context, i1 *route53.DeleteQueryLoggingConfigInput, i2 ...request.Option) (r0 *route53.DeleteQueryLoggingConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteQueryLoggingConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DeleteQueryLoggingConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDeleteQueryLoggingConfigWithContext(ctx context.Context, in *route53.DeleteQueryLoggingConfigInput, _ ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteQueryLoggingConfig cancelled", ctx.Err())
	default:
		return d.DeleteQueryLoggingConfig(in)
	}
}

func (d *Route53Double) DeleteReusableDelegationSet(i0 *route53.DeleteReusableDelegationSetInput) (r0 *route53.DeleteReusableDelegationSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReusableDelegationSet", i0)
	r0, _ = returns[0].(*route53.DeleteReusableDelegationSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DeleteReusableDelegationSetRequest(i0 *route53.DeleteReusableDelegationSetInput) (r0 *request.Request, r1 *route53.DeleteReusableDelegationSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReusableDelegationSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DeleteReusableDelegationSetOutput)
	return
}

func (d *Route53Double) DeleteReusableDelegationSetWithContext(i0 context.Context, i1 *route53.DeleteReusableDelegationSetInput, i2 ...request.Option) (r0 *route53.DeleteReusableDelegationSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReusableDelegationSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DeleteReusableDelegationSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDeleteReusableDelegationSetWithContext(ctx context.Context, in *route53.DeleteReusableDelegationSetInput, _ ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReusableDelegationSet cancelled", ctx.Err())
	default:
		return d.DeleteReusableDelegationSet(in)
	}
}

func (d *Route53Double) DeleteTrafficPolicy(i0 *route53.DeleteTrafficPolicyInput) (r0 *route53.DeleteTrafficPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficPolicy", i0)
	r0, _ = returns[0].(*route53.DeleteTrafficPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DeleteTrafficPolicyInstance(i0 *route53.DeleteTrafficPolicyInstanceInput) (r0 *route53.DeleteTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficPolicyInstance", i0)
	r0, _ = returns[0].(*route53.DeleteTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DeleteTrafficPolicyInstanceRequest(i0 *route53.DeleteTrafficPolicyInstanceInput) (r0 *request.Request, r1 *route53.DeleteTrafficPolicyInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficPolicyInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DeleteTrafficPolicyInstanceOutput)
	return
}

func (d *Route53Double) DeleteTrafficPolicyInstanceWithContext(i0 context.Context, i1 *route53.DeleteTrafficPolicyInstanceInput, i2 ...request.Option) (r0 *route53.DeleteTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficPolicyInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DeleteTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDeleteTrafficPolicyInstanceWithContext(ctx context.Context, in *route53.DeleteTrafficPolicyInstanceInput, _ ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrafficPolicyInstance cancelled", ctx.Err())
	default:
		return d.DeleteTrafficPolicyInstance(in)
	}
}

func (d *Route53Double) DeleteTrafficPolicyRequest(i0 *route53.DeleteTrafficPolicyInput) (r0 *request.Request, r1 *route53.DeleteTrafficPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DeleteTrafficPolicyOutput)
	return
}

func (d *Route53Double) DeleteTrafficPolicyWithContext(i0 context.Context, i1 *route53.DeleteTrafficPolicyInput, i2 ...request.Option) (r0 *route53.DeleteTrafficPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTrafficPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DeleteTrafficPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDeleteTrafficPolicyWithContext(ctx context.Context, in *route53.DeleteTrafficPolicyInput, _ ...request.Option) (*route53.DeleteTrafficPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTrafficPolicy cancelled", ctx.Err())
	default:
		return d.DeleteTrafficPolicy(in)
	}
}

func (d *Route53Double) DeleteVPCAssociationAuthorization(i0 *route53.DeleteVPCAssociationAuthorizationInput) (r0 *route53.DeleteVPCAssociationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVPCAssociationAuthorization", i0)
	r0, _ = returns[0].(*route53.DeleteVPCAssociationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DeleteVPCAssociationAuthorizationRequest(i0 *route53.DeleteVPCAssociationAuthorizationInput) (r0 *request.Request, r1 *route53.DeleteVPCAssociationAuthorizationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVPCAssociationAuthorizationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DeleteVPCAssociationAuthorizationOutput)
	return
}

func (d *Route53Double) DeleteVPCAssociationAuthorizationWithContext(i0 context.Context, i1 *route53.DeleteVPCAssociationAuthorizationInput, i2 ...request.Option) (r0 *route53.DeleteVPCAssociationAuthorizationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteVPCAssociationAuthorizationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DeleteVPCAssociationAuthorizationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDeleteVPCAssociationAuthorizationWithContext(ctx context.Context, in *route53.DeleteVPCAssociationAuthorizationInput, _ ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteVPCAssociationAuthorization cancelled", ctx.Err())
	default:
		return d.DeleteVPCAssociationAuthorization(in)
	}
}

func (d *Route53Double) DisassociateVPCFromHostedZone(i0 *route53.DisassociateVPCFromHostedZoneInput) (r0 *route53.DisassociateVPCFromHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateVPCFromHostedZone", i0)
	r0, _ = returns[0].(*route53.DisassociateVPCFromHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) DisassociateVPCFromHostedZoneRequest(i0 *route53.DisassociateVPCFromHostedZoneInput) (r0 *request.Request, r1 *route53.DisassociateVPCFromHostedZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateVPCFromHostedZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.DisassociateVPCFromHostedZoneOutput)
	return
}

func (d *Route53Double) DisassociateVPCFromHostedZoneWithContext(i0 context.Context, i1 *route53.DisassociateVPCFromHostedZoneInput, i2 ...request.Option) (r0 *route53.DisassociateVPCFromHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateVPCFromHostedZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.DisassociateVPCFromHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeDisassociateVPCFromHostedZoneWithContext(ctx context.Context, in *route53.DisassociateVPCFromHostedZoneInput, _ ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateVPCFromHostedZone cancelled", ctx.Err())
	default:
		return d.DisassociateVPCFromHostedZone(in)
	}
}

func (d *Route53Double) GetAccountLimit(i0 *route53.GetAccountLimitInput) (r0 *route53.GetAccountLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountLimit", i0)
	r0, _ = returns[0].(*route53.GetAccountLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetAccountLimitRequest(i0 *route53.GetAccountLimitInput) (r0 *request.Request, r1 *route53.GetAccountLimitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountLimitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetAccountLimitOutput)
	return
}

func (d *Route53Double) GetAccountLimitWithContext(i0 context.Context, i1 *route53.GetAccountLimitInput, i2 ...request.Option) (r0 *route53.GetAccountLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAccountLimitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetAccountLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetAccountLimitWithContext(ctx context.Context, in *route53.GetAccountLimitInput, _ ...request.Option) (*route53.GetAccountLimitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAccountLimit cancelled", ctx.Err())
	default:
		return d.GetAccountLimit(in)
	}
}

func (d *Route53Double) GetChange(i0 *route53.GetChangeInput) (r0 *route53.GetChangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChange", i0)
	r0, _ = returns[0].(*route53.GetChangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetChangeRequest(i0 *route53.GetChangeInput) (r0 *request.Request, r1 *route53.GetChangeOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetChangeOutput)
	return
}

func (d *Route53Double) GetChangeWithContext(i0 context.Context, i1 *route53.GetChangeInput, i2 ...request.Option) (r0 *route53.GetChangeOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetChangeOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetChangeWithContext(ctx context.Context, in *route53.GetChangeInput, _ ...request.Option) (*route53.GetChangeOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetChange cancelled", ctx.Err())
	default:
		return d.GetChange(in)
	}
}

func (d *Route53Double) GetCheckerIpRanges(i0 *route53.GetCheckerIpRangesInput) (r0 *route53.GetCheckerIpRangesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCheckerIpRanges", i0)
	r0, _ = returns[0].(*route53.GetCheckerIpRangesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetCheckerIpRangesRequest(i0 *route53.GetCheckerIpRangesInput) (r0 *request.Request, r1 *route53.GetCheckerIpRangesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCheckerIpRangesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetCheckerIpRangesOutput)
	return
}

func (d *Route53Double) GetCheckerIpRangesWithContext(i0 context.Context, i1 *route53.GetCheckerIpRangesInput, i2 ...request.Option) (r0 *route53.GetCheckerIpRangesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCheckerIpRangesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetCheckerIpRangesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetCheckerIpRangesWithContext(ctx context.Context, in *route53.GetCheckerIpRangesInput, _ ...request.Option) (*route53.GetCheckerIpRangesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCheckerIpRanges cancelled", ctx.Err())
	default:
		return d.GetCheckerIpRanges(in)
	}
}

func (d *Route53Double) GetGeoLocation(i0 *route53.GetGeoLocationInput) (r0 *route53.GetGeoLocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGeoLocation", i0)
	r0, _ = returns[0].(*route53.GetGeoLocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetGeoLocationRequest(i0 *route53.GetGeoLocationInput) (r0 *request.Request, r1 *route53.GetGeoLocationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGeoLocationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetGeoLocationOutput)
	return
}

func (d *Route53Double) GetGeoLocationWithContext(i0 context.Context, i1 *route53.GetGeoLocationInput, i2 ...request.Option) (r0 *route53.GetGeoLocationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGeoLocationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetGeoLocationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetGeoLocationWithContext(ctx context.Context, in *route53.GetGeoLocationInput, _ ...request.Option) (*route53.GetGeoLocationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGeoLocation cancelled", ctx.Err())
	default:
		return d.GetGeoLocation(in)
	}
}

func (d *Route53Double) GetHealthCheck(i0 *route53.GetHealthCheckInput) (r0 *route53.GetHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheck", i0)
	r0, _ = returns[0].(*route53.GetHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetHealthCheckCount(i0 *route53.GetHealthCheckCountInput) (r0 *route53.GetHealthCheckCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckCount", i0)
	r0, _ = returns[0].(*route53.GetHealthCheckCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetHealthCheckCountRequest(i0 *route53.GetHealthCheckCountInput) (r0 *request.Request, r1 *route53.GetHealthCheckCountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckCountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetHealthCheckCountOutput)
	return
}

func (d *Route53Double) GetHealthCheckCountWithContext(i0 context.Context, i1 *route53.GetHealthCheckCountInput, i2 ...request.Option) (r0 *route53.GetHealthCheckCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckCountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetHealthCheckCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetHealthCheckCountWithContext(ctx context.Context, in *route53.GetHealthCheckCountInput, _ ...request.Option) (*route53.GetHealthCheckCountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHealthCheckCount cancelled", ctx.Err())
	default:
		return d.GetHealthCheckCount(in)
	}
}

func (d *Route53Double) GetHealthCheckLastFailureReason(i0 *route53.GetHealthCheckLastFailureReasonInput) (r0 *route53.GetHealthCheckLastFailureReasonOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckLastFailureReason", i0)
	r0, _ = returns[0].(*route53.GetHealthCheckLastFailureReasonOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetHealthCheckLastFailureReasonRequest(i0 *route53.GetHealthCheckLastFailureReasonInput) (r0 *request.Request, r1 *route53.GetHealthCheckLastFailureReasonOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckLastFailureReasonRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetHealthCheckLastFailureReasonOutput)
	return
}

func (d *Route53Double) GetHealthCheckLastFailureReasonWithContext(i0 context.Context, i1 *route53.GetHealthCheckLastFailureReasonInput, i2 ...request.Option) (r0 *route53.GetHealthCheckLastFailureReasonOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckLastFailureReasonWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetHealthCheckLastFailureReasonOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetHealthCheckLastFailureReasonWithContext(ctx context.Context, in *route53.GetHealthCheckLastFailureReasonInput, _ ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHealthCheckLastFailureReason cancelled", ctx.Err())
	default:
		return d.GetHealthCheckLastFailureReason(in)
	}
}

func (d *Route53Double) GetHealthCheckRequest(i0 *route53.GetHealthCheckInput) (r0 *request.Request, r1 *route53.GetHealthCheckOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetHealthCheckOutput)
	return
}

func (d *Route53Double) GetHealthCheckStatus(i0 *route53.GetHealthCheckStatusInput) (r0 *route53.GetHealthCheckStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckStatus", i0)
	r0, _ = returns[0].(*route53.GetHealthCheckStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetHealthCheckStatusRequest(i0 *route53.GetHealthCheckStatusInput) (r0 *request.Request, r1 *route53.GetHealthCheckStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetHealthCheckStatusOutput)
	return
}

func (d *Route53Double) GetHealthCheckStatusWithContext(i0 context.Context, i1 *route53.GetHealthCheckStatusInput, i2 ...request.Option) (r0 *route53.GetHealthCheckStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetHealthCheckStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetHealthCheckStatusWithContext(ctx context.Context, in *route53.GetHealthCheckStatusInput, _ ...request.Option) (*route53.GetHealthCheckStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHealthCheckStatus cancelled", ctx.Err())
	default:
		return d.GetHealthCheckStatus(in)
	}
}

func (d *Route53Double) GetHealthCheckWithContext(i0 context.Context, i1 *route53.GetHealthCheckInput, i2 ...request.Option) (r0 *route53.GetHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHealthCheckWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetHealthCheckWithContext(ctx context.Context, in *route53.GetHealthCheckInput, _ ...request.Option) (*route53.GetHealthCheckOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHealthCheck cancelled", ctx.Err())
	default:
		return d.GetHealthCheck(in)
	}
}

func (d *Route53Double) GetHostedZone(i0 *route53.GetHostedZoneInput) (r0 *route53.GetHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZone", i0)
	r0, _ = returns[0].(*route53.GetHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetHostedZoneCount(i0 *route53.GetHostedZoneCountInput) (r0 *route53.GetHostedZoneCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneCount", i0)
	r0, _ = returns[0].(*route53.GetHostedZoneCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetHostedZoneCountRequest(i0 *route53.GetHostedZoneCountInput) (r0 *request.Request, r1 *route53.GetHostedZoneCountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneCountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetHostedZoneCountOutput)
	return
}

func (d *Route53Double) GetHostedZoneCountWithContext(i0 context.Context, i1 *route53.GetHostedZoneCountInput, i2 ...request.Option) (r0 *route53.GetHostedZoneCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneCountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetHostedZoneCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetHostedZoneCountWithContext(ctx context.Context, in *route53.GetHostedZoneCountInput, _ ...request.Option) (*route53.GetHostedZoneCountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHostedZoneCount cancelled", ctx.Err())
	default:
		return d.GetHostedZoneCount(in)
	}
}

func (d *Route53Double) GetHostedZoneLimit(i0 *route53.GetHostedZoneLimitInput) (r0 *route53.GetHostedZoneLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneLimit", i0)
	r0, _ = returns[0].(*route53.GetHostedZoneLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetHostedZoneLimitRequest(i0 *route53.GetHostedZoneLimitInput) (r0 *request.Request, r1 *route53.GetHostedZoneLimitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneLimitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetHostedZoneLimitOutput)
	return
}

func (d *Route53Double) GetHostedZoneLimitWithContext(i0 context.Context, i1 *route53.GetHostedZoneLimitInput, i2 ...request.Option) (r0 *route53.GetHostedZoneLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneLimitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetHostedZoneLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetHostedZoneLimitWithContext(ctx context.Context, in *route53.GetHostedZoneLimitInput, _ ...request.Option) (*route53.GetHostedZoneLimitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHostedZoneLimit cancelled", ctx.Err())
	default:
		return d.GetHostedZoneLimit(in)
	}
}

func (d *Route53Double) GetHostedZoneRequest(i0 *route53.GetHostedZoneInput) (r0 *request.Request, r1 *route53.GetHostedZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetHostedZoneOutput)
	return
}

func (d *Route53Double) GetHostedZoneWithContext(i0 context.Context, i1 *route53.GetHostedZoneInput, i2 ...request.Option) (r0 *route53.GetHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetHostedZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetHostedZoneWithContext(ctx context.Context, in *route53.GetHostedZoneInput, _ ...request.Option) (*route53.GetHostedZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetHostedZone cancelled", ctx.Err())
	default:
		return d.GetHostedZone(in)
	}
}

func (d *Route53Double) GetQueryLoggingConfig(i0 *route53.GetQueryLoggingConfigInput) (r0 *route53.GetQueryLoggingConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueryLoggingConfig", i0)
	r0, _ = returns[0].(*route53.GetQueryLoggingConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetQueryLoggingConfigRequest(i0 *route53.GetQueryLoggingConfigInput) (r0 *request.Request, r1 *route53.GetQueryLoggingConfigOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueryLoggingConfigRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetQueryLoggingConfigOutput)
	return
}

func (d *Route53Double) GetQueryLoggingConfigWithContext(i0 context.Context, i1 *route53.GetQueryLoggingConfigInput, i2 ...request.Option) (r0 *route53.GetQueryLoggingConfigOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetQueryLoggingConfigWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetQueryLoggingConfigOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetQueryLoggingConfigWithContext(ctx context.Context, in *route53.GetQueryLoggingConfigInput, _ ...request.Option) (*route53.GetQueryLoggingConfigOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetQueryLoggingConfig cancelled", ctx.Err())
	default:
		return d.GetQueryLoggingConfig(in)
	}
}

func (d *Route53Double) GetReusableDelegationSet(i0 *route53.GetReusableDelegationSetInput) (r0 *route53.GetReusableDelegationSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReusableDelegationSet", i0)
	r0, _ = returns[0].(*route53.GetReusableDelegationSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetReusableDelegationSetLimit(i0 *route53.GetReusableDelegationSetLimitInput) (r0 *route53.GetReusableDelegationSetLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReusableDelegationSetLimit", i0)
	r0, _ = returns[0].(*route53.GetReusableDelegationSetLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetReusableDelegationSetLimitRequest(i0 *route53.GetReusableDelegationSetLimitInput) (r0 *request.Request, r1 *route53.GetReusableDelegationSetLimitOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReusableDelegationSetLimitRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetReusableDelegationSetLimitOutput)
	return
}

func (d *Route53Double) GetReusableDelegationSetLimitWithContext(i0 context.Context, i1 *route53.GetReusableDelegationSetLimitInput, i2 ...request.Option) (r0 *route53.GetReusableDelegationSetLimitOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReusableDelegationSetLimitWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetReusableDelegationSetLimitOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetReusableDelegationSetLimitWithContext(ctx context.Context, in *route53.GetReusableDelegationSetLimitInput, _ ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetReusableDelegationSetLimit cancelled", ctx.Err())
	default:
		return d.GetReusableDelegationSetLimit(in)
	}
}

func (d *Route53Double) GetReusableDelegationSetRequest(i0 *route53.GetReusableDelegationSetInput) (r0 *request.Request, r1 *route53.GetReusableDelegationSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReusableDelegationSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetReusableDelegationSetOutput)
	return
}

func (d *Route53Double) GetReusableDelegationSetWithContext(i0 context.Context, i1 *route53.GetReusableDelegationSetInput, i2 ...request.Option) (r0 *route53.GetReusableDelegationSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReusableDelegationSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetReusableDelegationSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetReusableDelegationSetWithContext(ctx context.Context, in *route53.GetReusableDelegationSetInput, _ ...request.Option) (*route53.GetReusableDelegationSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetReusableDelegationSet cancelled", ctx.Err())
	default:
		return d.GetReusableDelegationSet(in)
	}
}

func (d *Route53Double) GetTrafficPolicy(i0 *route53.GetTrafficPolicyInput) (r0 *route53.GetTrafficPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicy", i0)
	r0, _ = returns[0].(*route53.GetTrafficPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetTrafficPolicyInstance(i0 *route53.GetTrafficPolicyInstanceInput) (r0 *route53.GetTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyInstance", i0)
	r0, _ = returns[0].(*route53.GetTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetTrafficPolicyInstanceCount(i0 *route53.GetTrafficPolicyInstanceCountInput) (r0 *route53.GetTrafficPolicyInstanceCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyInstanceCount", i0)
	r0, _ = returns[0].(*route53.GetTrafficPolicyInstanceCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) GetTrafficPolicyInstanceCountRequest(i0 *route53.GetTrafficPolicyInstanceCountInput) (r0 *request.Request, r1 *route53.GetTrafficPolicyInstanceCountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyInstanceCountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetTrafficPolicyInstanceCountOutput)
	return
}

func (d *Route53Double) GetTrafficPolicyInstanceCountWithContext(i0 context.Context, i1 *route53.GetTrafficPolicyInstanceCountInput, i2 ...request.Option) (r0 *route53.GetTrafficPolicyInstanceCountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyInstanceCountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetTrafficPolicyInstanceCountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetTrafficPolicyInstanceCountWithContext(ctx context.Context, in *route53.GetTrafficPolicyInstanceCountInput, _ ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTrafficPolicyInstanceCount cancelled", ctx.Err())
	default:
		return d.GetTrafficPolicyInstanceCount(in)
	}
}

func (d *Route53Double) GetTrafficPolicyInstanceRequest(i0 *route53.GetTrafficPolicyInstanceInput) (r0 *request.Request, r1 *route53.GetTrafficPolicyInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetTrafficPolicyInstanceOutput)
	return
}

func (d *Route53Double) GetTrafficPolicyInstanceWithContext(i0 context.Context, i1 *route53.GetTrafficPolicyInstanceInput, i2 ...request.Option) (r0 *route53.GetTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetTrafficPolicyInstanceWithContext(ctx context.Context, in *route53.GetTrafficPolicyInstanceInput, _ ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTrafficPolicyInstance cancelled", ctx.Err())
	default:
		return d.GetTrafficPolicyInstance(in)
	}
}

func (d *Route53Double) GetTrafficPolicyRequest(i0 *route53.GetTrafficPolicyInput) (r0 *request.Request, r1 *route53.GetTrafficPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.GetTrafficPolicyOutput)
	return
}

func (d *Route53Double) GetTrafficPolicyWithContext(i0 context.Context, i1 *route53.GetTrafficPolicyInput, i2 ...request.Option) (r0 *route53.GetTrafficPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetTrafficPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.GetTrafficPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeGetTrafficPolicyWithContext(ctx context.Context, in *route53.GetTrafficPolicyInput, _ ...request.Option) (*route53.GetTrafficPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetTrafficPolicy cancelled", ctx.Err())
	default:
		return d.GetTrafficPolicy(in)
	}
}

func (d *Route53Double) ListGeoLocations(i0 *route53.ListGeoLocationsInput) (r0 *route53.ListGeoLocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGeoLocations", i0)
	r0, _ = returns[0].(*route53.ListGeoLocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListGeoLocationsRequest(i0 *route53.ListGeoLocationsInput) (r0 *request.Request, r1 *route53.ListGeoLocationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGeoLocationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListGeoLocationsOutput)
	return
}

func (d *Route53Double) ListGeoLocationsWithContext(i0 context.Context, i1 *route53.ListGeoLocationsInput, i2 ...request.Option) (r0 *route53.ListGeoLocationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGeoLocationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListGeoLocationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListGeoLocationsWithContext(ctx context.Context, in *route53.ListGeoLocationsInput, _ ...request.Option) (*route53.ListGeoLocationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGeoLocations cancelled", ctx.Err())
	default:
		return d.ListGeoLocations(in)
	}
}

func (d *Route53Double) ListHealthChecks(i0 *route53.ListHealthChecksInput) (r0 *route53.ListHealthChecksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHealthChecks", i0)
	r0, _ = returns[0].(*route53.ListHealthChecksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListHealthChecksPages(i0 *route53.ListHealthChecksInput, i1 func(*route53.ListHealthChecksOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHealthChecksPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeListHealthChecksPages(in *route53.ListHealthChecksInput, pager func(*route53.ListHealthChecksOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHealthChecks", paginators, in, pager)
}

func (d *Route53Double) ListHealthChecksPagesWithContext(i0 context.Context, i1 *route53.ListHealthChecksInput, i2 func(*route53.ListHealthChecksOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHealthChecksPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeListHealthChecksPagesWithContext(ctx context.Context, in *route53.ListHealthChecksInput, pager func(*route53.ListHealthChecksOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHealthChecks", paginators, ctx, in, pager, options...)
}

func (d *Route53Double) ListHealthChecksRequest(i0 *route53.ListHealthChecksInput) (r0 *request.Request, r1 *route53.ListHealthChecksOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHealthChecksRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListHealthChecksOutput)
	return
}

func (d *Route53Double) ListHealthChecksWithContext(i0 context.Context, i1 *route53.ListHealthChecksInput, i2 ...request.Option) (r0 *route53.ListHealthChecksOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHealthChecksWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListHealthChecksOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListHealthChecksWithContext(ctx context.Context, in *route53.ListHealthChecksInput, _ ...request.Option) (*route53.ListHealthChecksOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHealthChecks cancelled", ctx.Err())
	default:
		return d.ListHealthChecks(in)
	}
}

func (d *Route53Double) ListHostedZones(i0 *route53.ListHostedZonesInput) (r0 *route53.ListHostedZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZones", i0)
	r0, _ = returns[0].(*route53.ListHostedZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListHostedZonesByName(i0 *route53.ListHostedZonesByNameInput) (r0 *route53.ListHostedZonesByNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZonesByName", i0)
	r0, _ = returns[0].(*route53.ListHostedZonesByNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListHostedZonesByNameRequest(i0 *route53.ListHostedZonesByNameInput) (r0 *request.Request, r1 *route53.ListHostedZonesByNameOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZonesByNameRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListHostedZonesByNameOutput)
	return
}

func (d *Route53Double) ListHostedZonesByNameWithContext(i0 context.Context, i1 *route53.ListHostedZonesByNameInput, i2 ...request.Option) (r0 *route53.ListHostedZonesByNameOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZonesByNameWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListHostedZonesByNameOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListHostedZonesByNameWithContext(ctx context.Context, in *route53.ListHostedZonesByNameInput, _ ...request.Option) (*route53.ListHostedZonesByNameOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHostedZonesByName cancelled", ctx.Err())
	default:
		return d.ListHostedZonesByName(in)
	}
}

func (d *Route53Double) ListHostedZonesPages(i0 *route53.ListHostedZonesInput, i1 func(*route53.ListHostedZonesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZonesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeListHostedZonesPages(in *route53.ListHostedZonesInput, pager func(*route53.ListHostedZonesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListHostedZones", paginators, in, pager)
}

func (d *Route53Double) ListHostedZonesPagesWithContext(i0 context.Context, i1 *route53.ListHostedZonesInput, i2 func(*route53.ListHostedZonesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZonesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeListHostedZonesPagesWithContext(ctx context.Context, in *route53.ListHostedZonesInput, pager func(*route53.ListHostedZonesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListHostedZones", paginators, ctx, in, pager, options...)
}

func (d *Route53Double) ListHostedZonesRequest(i0 *route53.ListHostedZonesInput) (r0 *request.Request, r1 *route53.ListHostedZonesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZonesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListHostedZonesOutput)
	return
}

func (d *Route53Double) ListHostedZonesWithContext(i0 context.Context, i1 *route53.ListHostedZonesInput, i2 ...request.Option) (r0 *route53.ListHostedZonesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListHostedZonesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListHostedZonesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListHostedZonesWithContext(ctx context.Context, in *route53.ListHostedZonesInput, _ ...request.Option) (*route53.ListHostedZonesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListHostedZones cancelled", ctx.Err())
	default:
		return d.ListHostedZones(in)
	}
}

func (d *Route53Double) ListQueryLoggingConfigs(i0 *route53.ListQueryLoggingConfigsInput) (r0 *route53.ListQueryLoggingConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueryLoggingConfigs", i0)
	r0, _ = returns[0].(*route53.ListQueryLoggingConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListQueryLoggingConfigsRequest(i0 *route53.ListQueryLoggingConfigsInput) (r0 *request.Request, r1 *route53.ListQueryLoggingConfigsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueryLoggingConfigsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListQueryLoggingConfigsOutput)
	return
}

func (d *Route53Double) ListQueryLoggingConfigsWithContext(i0 context.Context, i1 *route53.ListQueryLoggingConfigsInput, i2 ...request.Option) (r0 *route53.ListQueryLoggingConfigsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListQueryLoggingConfigsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListQueryLoggingConfigsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListQueryLoggingConfigsWithContext(ctx context.Context, in *route53.ListQueryLoggingConfigsInput, _ ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListQueryLoggingConfigs cancelled", ctx.Err())
	default:
		return d.ListQueryLoggingConfigs(in)
	}
}

func (d *Route53Double) ListResourceRecordSets(i0 *route53.ListResourceRecordSetsInput) (r0 *route53.ListResourceRecordSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceRecordSets", i0)
	r0, _ = returns[0].(*route53.ListResourceRecordSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListResourceRecordSetsPages(i0 *route53.ListResourceRecordSetsInput, i1 func(*route53.ListResourceRecordSetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceRecordSetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeListResourceRecordSetsPages(in *route53.ListResourceRecordSetsInput, pager func(*route53.ListResourceRecordSetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListResourceRecordSets", paginators, in, pager)
}

func (d *Route53Double) ListResourceRecordSetsPagesWithContext(i0 context.Context, i1 *route53.ListResourceRecordSetsInput, i2 func(*route53.ListResourceRecordSetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceRecordSetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeListResourceRecordSetsPagesWithContext(ctx context.Context, in *route53.ListResourceRecordSetsInput, pager func(*route53.ListResourceRecordSetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListResourceRecordSets", paginators, ctx, in, pager, options...)
}

func (d *Route53Double) ListResourceRecordSetsRequest(i0 *route53.ListResourceRecordSetsInput) (r0 *request.Request, r1 *route53.ListResourceRecordSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceRecordSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListResourceRecordSetsOutput)
	return
}

func (d *Route53Double) ListResourceRecordSetsWithContext(i0 context.Context, i1 *route53.ListResourceRecordSetsInput, i2 ...request.Option) (r0 *route53.ListResourceRecordSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListResourceRecordSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListResourceRecordSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListResourceRecordSetsWithContext(ctx context.Context, in *route53.ListResourceRecordSetsInput, _ ...request.Option) (*route53.ListResourceRecordSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListResourceRecordSets cancelled", ctx.Err())
	default:
		return d.ListResourceRecordSets(in)
	}
}

func (d *Route53Double) ListReusableDelegationSets(i0 *route53.ListReusableDelegationSetsInput) (r0 *route53.ListReusableDelegationSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReusableDelegationSets", i0)
	r0, _ = returns[0].(*route53.ListReusableDelegationSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListReusableDelegationSetsRequest(i0 *route53.ListReusableDelegationSetsInput) (r0 *request.Request, r1 *route53.ListReusableDelegationSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReusableDelegationSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListReusableDelegationSetsOutput)
	return
}

func (d *Route53Double) ListReusableDelegationSetsWithContext(i0 context.Context, i1 *route53.ListReusableDelegationSetsInput, i2 ...request.Option) (r0 *route53.ListReusableDelegationSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListReusableDelegationSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListReusableDelegationSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListReusableDelegationSetsWithContext(ctx context.Context, in *route53.ListReusableDelegationSetsInput, _ ...request.Option) (*route53.ListReusableDelegationSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListReusableDelegationSets cancelled", ctx.Err())
	default:
		return d.ListReusableDelegationSets(in)
	}
}

func (d *Route53Double) ListTagsForResource(i0 *route53.ListTagsForResourceInput) (r0 *route53.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*route53.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListTagsForResourceRequest(i0 *route53.ListTagsForResourceInput) (r0 *request.Request, r1 *route53.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListTagsForResourceOutput)
	return
}

func (d *Route53Double) ListTagsForResourceWithContext(i0 context.Context, i1 *route53.ListTagsForResourceInput, i2 ...request.Option) (r0 *route53.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListTagsForResourceWithContext(ctx context.Context, in *route53.ListTagsForResourceInput, _ ...request.Option) (*route53.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *Route53Double) ListTagsForResources(i0 *route53.ListTagsForResourcesInput) (r0 *route53.ListTagsForResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResources", i0)
	r0, _ = returns[0].(*route53.ListTagsForResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListTagsForResourcesRequest(i0 *route53.ListTagsForResourcesInput) (r0 *request.Request, r1 *route53.ListTagsForResourcesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListTagsForResourcesOutput)
	return
}

func (d *Route53Double) ListTagsForResourcesWithContext(i0 context.Context, i1 *route53.ListTagsForResourcesInput, i2 ...request.Option) (r0 *route53.ListTagsForResourcesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourcesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListTagsForResourcesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListTagsForResourcesWithContext(ctx context.Context, in *route53.ListTagsForResourcesInput, _ ...request.Option) (*route53.ListTagsForResourcesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResources cancelled", ctx.Err())
	default:
		return d.ListTagsForResources(in)
	}
}

func (d *Route53Double) ListTrafficPolicies(i0 *route53.ListTrafficPoliciesInput) (r0 *route53.ListTrafficPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicies", i0)
	r0, _ = returns[0].(*route53.ListTrafficPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListTrafficPoliciesRequest(i0 *route53.ListTrafficPoliciesInput) (r0 *request.Request, r1 *route53.ListTrafficPoliciesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPoliciesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListTrafficPoliciesOutput)
	return
}

func (d *Route53Double) ListTrafficPoliciesWithContext(i0 context.Context, i1 *route53.ListTrafficPoliciesInput, i2 ...request.Option) (r0 *route53.ListTrafficPoliciesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPoliciesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListTrafficPoliciesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListTrafficPoliciesWithContext(ctx context.Context, in *route53.ListTrafficPoliciesInput, _ ...request.Option) (*route53.ListTrafficPoliciesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrafficPolicies cancelled", ctx.Err())
	default:
		return d.ListTrafficPolicies(in)
	}
}

func (d *Route53Double) ListTrafficPolicyInstances(i0 *route53.ListTrafficPolicyInstancesInput) (r0 *route53.ListTrafficPolicyInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstances", i0)
	r0, _ = returns[0].(*route53.ListTrafficPolicyInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListTrafficPolicyInstancesByHostedZone(i0 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (r0 *route53.ListTrafficPolicyInstancesByHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesByHostedZone", i0)
	r0, _ = returns[0].(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListTrafficPolicyInstancesByHostedZoneRequest(i0 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (r0 *request.Request, r1 *route53.ListTrafficPolicyInstancesByHostedZoneOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesByHostedZoneRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
	return
}

func (d *Route53Double) ListTrafficPolicyInstancesByHostedZoneWithContext(i0 context.Context, i1 *route53.ListTrafficPolicyInstancesByHostedZoneInput, i2 ...request.Option) (r0 *route53.ListTrafficPolicyInstancesByHostedZoneOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesByHostedZoneWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListTrafficPolicyInstancesByHostedZoneWithContext(ctx context.Context, in *route53.ListTrafficPolicyInstancesByHostedZoneInput, _ ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrafficPolicyInstancesByHostedZone cancelled", ctx.Err())
	default:
		return d.ListTrafficPolicyInstancesByHostedZone(in)
	}
}

func (d *Route53Double) ListTrafficPolicyInstancesByPolicy(i0 *route53.ListTrafficPolicyInstancesByPolicyInput) (r0 *route53.ListTrafficPolicyInstancesByPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesByPolicy", i0)
	r0, _ = returns[0].(*route53.ListTrafficPolicyInstancesByPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListTrafficPolicyInstancesByPolicyRequest(i0 *route53.ListTrafficPolicyInstancesByPolicyInput) (r0 *request.Request, r1 *route53.ListTrafficPolicyInstancesByPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesByPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListTrafficPolicyInstancesByPolicyOutput)
	return
}

func (d *Route53Double) ListTrafficPolicyInstancesByPolicyWithContext(i0 context.Context, i1 *route53.ListTrafficPolicyInstancesByPolicyInput, i2 ...request.Option) (r0 *route53.ListTrafficPolicyInstancesByPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesByPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListTrafficPolicyInstancesByPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListTrafficPolicyInstancesByPolicyWithContext(ctx context.Context, in *route53.ListTrafficPolicyInstancesByPolicyInput, _ ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrafficPolicyInstancesByPolicy cancelled", ctx.Err())
	default:
		return d.ListTrafficPolicyInstancesByPolicy(in)
	}
}

func (d *Route53Double) ListTrafficPolicyInstancesRequest(i0 *route53.ListTrafficPolicyInstancesInput) (r0 *request.Request, r1 *route53.ListTrafficPolicyInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListTrafficPolicyInstancesOutput)
	return
}

func (d *Route53Double) ListTrafficPolicyInstancesWithContext(i0 context.Context, i1 *route53.ListTrafficPolicyInstancesInput, i2 ...request.Option) (r0 *route53.ListTrafficPolicyInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListTrafficPolicyInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListTrafficPolicyInstancesWithContext(ctx context.Context, in *route53.ListTrafficPolicyInstancesInput, _ ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrafficPolicyInstances cancelled", ctx.Err())
	default:
		return d.ListTrafficPolicyInstances(in)
	}
}

func (d *Route53Double) ListTrafficPolicyVersions(i0 *route53.ListTrafficPolicyVersionsInput) (r0 *route53.ListTrafficPolicyVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyVersions", i0)
	r0, _ = returns[0].(*route53.ListTrafficPolicyVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListTrafficPolicyVersionsRequest(i0 *route53.ListTrafficPolicyVersionsInput) (r0 *request.Request, r1 *route53.ListTrafficPolicyVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListTrafficPolicyVersionsOutput)
	return
}

func (d *Route53Double) ListTrafficPolicyVersionsWithContext(i0 context.Context, i1 *route53.ListTrafficPolicyVersionsInput, i2 ...request.Option) (r0 *route53.ListTrafficPolicyVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTrafficPolicyVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListTrafficPolicyVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListTrafficPolicyVersionsWithContext(ctx context.Context, in *route53.ListTrafficPolicyVersionsInput, _ ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTrafficPolicyVersions cancelled", ctx.Err())
	default:
		return d.ListTrafficPolicyVersions(in)
	}
}

func (d *Route53Double) ListVPCAssociationAuthorizations(i0 *route53.ListVPCAssociationAuthorizationsInput) (r0 *route53.ListVPCAssociationAuthorizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVPCAssociationAuthorizations", i0)
	r0, _ = returns[0].(*route53.ListVPCAssociationAuthorizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) ListVPCAssociationAuthorizationsRequest(i0 *route53.ListVPCAssociationAuthorizationsInput) (r0 *request.Request, r1 *route53.ListVPCAssociationAuthorizationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVPCAssociationAuthorizationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.ListVPCAssociationAuthorizationsOutput)
	return
}

func (d *Route53Double) ListVPCAssociationAuthorizationsWithContext(i0 context.Context, i1 *route53.ListVPCAssociationAuthorizationsInput, i2 ...request.Option) (r0 *route53.ListVPCAssociationAuthorizationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListVPCAssociationAuthorizationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.ListVPCAssociationAuthorizationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeListVPCAssociationAuthorizationsWithContext(ctx context.Context, in *route53.ListVPCAssociationAuthorizationsInput, _ ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListVPCAssociationAuthorizations cancelled", ctx.Err())
	default:
		return d.ListVPCAssociationAuthorizations(in)
	}
}

func (d *Route53Double) TestDNSAnswer(i0 *route53.TestDNSAnswerInput) (r0 *route53.TestDNSAnswerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestDNSAnswer", i0)
	r0, _ = returns[0].(*route53.TestDNSAnswerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) TestDNSAnswerRequest(i0 *route53.TestDNSAnswerInput) (r0 *request.Request, r1 *route53.TestDNSAnswerOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestDNSAnswerRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.TestDNSAnswerOutput)
	return
}

func (d *Route53Double) TestDNSAnswerWithContext(i0 context.Context, i1 *route53.TestDNSAnswerInput, i2 ...request.Option) (r0 *route53.TestDNSAnswerOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TestDNSAnswerWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.TestDNSAnswerOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeTestDNSAnswerWithContext(ctx context.Context, in *route53.TestDNSAnswerInput, _ ...request.Option) (*route53.TestDNSAnswerOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TestDNSAnswer cancelled", ctx.Err())
	default:
		return d.TestDNSAnswer(in)
	}
}

func (d *Route53Double) UpdateHealthCheck(i0 *route53.UpdateHealthCheckInput) (r0 *route53.UpdateHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHealthCheck", i0)
	r0, _ = returns[0].(*route53.UpdateHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) UpdateHealthCheckRequest(i0 *route53.UpdateHealthCheckInput) (r0 *request.Request, r1 *route53.UpdateHealthCheckOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHealthCheckRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.UpdateHealthCheckOutput)
	return
}

func (d *Route53Double) UpdateHealthCheckWithContext(i0 context.Context, i1 *route53.UpdateHealthCheckInput, i2 ...request.Option) (r0 *route53.UpdateHealthCheckOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHealthCheckWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.UpdateHealthCheckOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeUpdateHealthCheckWithContext(ctx context.Context, in *route53.UpdateHealthCheckInput, _ ...request.Option) (*route53.UpdateHealthCheckOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateHealthCheck cancelled", ctx.Err())
	default:
		return d.UpdateHealthCheck(in)
	}
}

func (d *Route53Double) UpdateHostedZoneComment(i0 *route53.UpdateHostedZoneCommentInput) (r0 *route53.UpdateHostedZoneCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHostedZoneComment", i0)
	r0, _ = returns[0].(*route53.UpdateHostedZoneCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) UpdateHostedZoneCommentRequest(i0 *route53.UpdateHostedZoneCommentInput) (r0 *request.Request, r1 *route53.UpdateHostedZoneCommentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHostedZoneCommentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.UpdateHostedZoneCommentOutput)
	return
}

func (d *Route53Double) UpdateHostedZoneCommentWithContext(i0 context.Context, i1 *route53.UpdateHostedZoneCommentInput, i2 ...request.Option) (r0 *route53.UpdateHostedZoneCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateHostedZoneCommentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.UpdateHostedZoneCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeUpdateHostedZoneCommentWithContext(ctx context.Context, in *route53.UpdateHostedZoneCommentInput, _ ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateHostedZoneComment cancelled", ctx.Err())
	default:
		return d.UpdateHostedZoneComment(in)
	}
}

func (d *Route53Double) UpdateTrafficPolicyComment(i0 *route53.UpdateTrafficPolicyCommentInput) (r0 *route53.UpdateTrafficPolicyCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrafficPolicyComment", i0)
	r0, _ = returns[0].(*route53.UpdateTrafficPolicyCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) UpdateTrafficPolicyCommentRequest(i0 *route53.UpdateTrafficPolicyCommentInput) (r0 *request.Request, r1 *route53.UpdateTrafficPolicyCommentOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrafficPolicyCommentRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.UpdateTrafficPolicyCommentOutput)
	return
}

func (d *Route53Double) UpdateTrafficPolicyCommentWithContext(i0 context.Context, i1 *route53.UpdateTrafficPolicyCommentInput, i2 ...request.Option) (r0 *route53.UpdateTrafficPolicyCommentOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrafficPolicyCommentWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.UpdateTrafficPolicyCommentOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeUpdateTrafficPolicyCommentWithContext(ctx context.Context, in *route53.UpdateTrafficPolicyCommentInput, _ ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTrafficPolicyComment cancelled", ctx.Err())
	default:
		return d.UpdateTrafficPolicyComment(in)
	}
}

func (d *Route53Double) UpdateTrafficPolicyInstance(i0 *route53.UpdateTrafficPolicyInstanceInput) (r0 *route53.UpdateTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrafficPolicyInstance", i0)
	r0, _ = returns[0].(*route53.UpdateTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) UpdateTrafficPolicyInstanceRequest(i0 *route53.UpdateTrafficPolicyInstanceInput) (r0 *request.Request, r1 *route53.UpdateTrafficPolicyInstanceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrafficPolicyInstanceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*route53.UpdateTrafficPolicyInstanceOutput)
	return
}

func (d *Route53Double) UpdateTrafficPolicyInstanceWithContext(i0 context.Context, i1 *route53.UpdateTrafficPolicyInstanceInput, i2 ...request.Option) (r0 *route53.UpdateTrafficPolicyInstanceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateTrafficPolicyInstanceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*route53.UpdateTrafficPolicyInstanceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *Route53Double) fakeUpdateTrafficPolicyInstanceWithContext(ctx context.Context, in *route53.UpdateTrafficPolicyInstanceInput, _ ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateTrafficPolicyInstance cancelled", ctx.Err())
	default:
		return d.UpdateTrafficPolicyInstance(in)
	}
}

func (d *Route53Double) WaitUntilResourceRecordSetsChanged(i0 *route53.GetChangeInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilResourceRecordSetsChanged", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeWaitUntilResourceRecordSetsChanged(in *route53.GetChangeInput) error {
	return d.WaitUntil("ResourceRecordSetsChanged", waiters, in)
}

func (d *Route53Double) WaitUntilResourceRecordSetsChangedWithContext(i0 context.Context, i1 *route53.GetChangeInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilResourceRecordSetsChangedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *Route53Double) fakeWaitUntilResourceRecordSetsChangedWithContext(ctx context.Context, in *route53.GetChangeInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ResourceRecordSetsChanged", waiters, ctx, in, waitOption...)
}
