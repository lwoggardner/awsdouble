// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:37+11:00

// Package rekognitiondouble provides a TestDouble implementation of rekognitioniface.RekognitionAPI
package rekognitiondouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rekognition"
	"github.com/aws/aws-sdk-go/service/rekognition/rekognitioniface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// RekognitionDouble is TestDouble for rekognitioniface.RekognitionAPI
type RekognitionDouble struct {
	rekognitioniface.RekognitionAPI
	*awsdouble.AWSTestDouble
}

// Constructor for RekognitionDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *RekognitionDouble {
	result := &RekognitionDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*rekognitioniface.RekognitionAPI)(nil), configurators...)
	return result
}

func (d *RekognitionDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *RekognitionDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CompareFacesWithContext":
		return m.Fake(d.fakeCompareFacesWithContext)

	case "CreateCollectionWithContext":
		return m.Fake(d.fakeCreateCollectionWithContext)

	case "CreateProjectVersionWithContext":
		return m.Fake(d.fakeCreateProjectVersionWithContext)

	case "CreateProjectWithContext":
		return m.Fake(d.fakeCreateProjectWithContext)

	case "CreateStreamProcessorWithContext":
		return m.Fake(d.fakeCreateStreamProcessorWithContext)

	case "DeleteCollectionWithContext":
		return m.Fake(d.fakeDeleteCollectionWithContext)

	case "DeleteFacesWithContext":
		return m.Fake(d.fakeDeleteFacesWithContext)

	case "DeleteStreamProcessorWithContext":
		return m.Fake(d.fakeDeleteStreamProcessorWithContext)

	case "DescribeCollectionWithContext":
		return m.Fake(d.fakeDescribeCollectionWithContext)

	case "DescribeProjectVersionsPages":
		return m.Fake(d.fakeDescribeProjectVersionsPages)

	case "DescribeProjectVersionsPagesWithContext":
		return m.Fake(d.fakeDescribeProjectVersionsPagesWithContext)

	case "DescribeProjectVersionsWithContext":
		return m.Fake(d.fakeDescribeProjectVersionsWithContext)

	case "DescribeProjectsPages":
		return m.Fake(d.fakeDescribeProjectsPages)

	case "DescribeProjectsPagesWithContext":
		return m.Fake(d.fakeDescribeProjectsPagesWithContext)

	case "DescribeProjectsWithContext":
		return m.Fake(d.fakeDescribeProjectsWithContext)

	case "DescribeStreamProcessorWithContext":
		return m.Fake(d.fakeDescribeStreamProcessorWithContext)

	case "DetectCustomLabelsWithContext":
		return m.Fake(d.fakeDetectCustomLabelsWithContext)

	case "DetectFacesWithContext":
		return m.Fake(d.fakeDetectFacesWithContext)

	case "DetectLabelsWithContext":
		return m.Fake(d.fakeDetectLabelsWithContext)

	case "DetectModerationLabelsWithContext":
		return m.Fake(d.fakeDetectModerationLabelsWithContext)

	case "DetectTextWithContext":
		return m.Fake(d.fakeDetectTextWithContext)

	case "GetCelebrityInfoWithContext":
		return m.Fake(d.fakeGetCelebrityInfoWithContext)

	case "GetCelebrityRecognitionPages":
		return m.Fake(d.fakeGetCelebrityRecognitionPages)

	case "GetCelebrityRecognitionPagesWithContext":
		return m.Fake(d.fakeGetCelebrityRecognitionPagesWithContext)

	case "GetCelebrityRecognitionWithContext":
		return m.Fake(d.fakeGetCelebrityRecognitionWithContext)

	case "GetContentModerationPages":
		return m.Fake(d.fakeGetContentModerationPages)

	case "GetContentModerationPagesWithContext":
		return m.Fake(d.fakeGetContentModerationPagesWithContext)

	case "GetContentModerationWithContext":
		return m.Fake(d.fakeGetContentModerationWithContext)

	case "GetFaceDetectionPages":
		return m.Fake(d.fakeGetFaceDetectionPages)

	case "GetFaceDetectionPagesWithContext":
		return m.Fake(d.fakeGetFaceDetectionPagesWithContext)

	case "GetFaceDetectionWithContext":
		return m.Fake(d.fakeGetFaceDetectionWithContext)

	case "GetFaceSearchPages":
		return m.Fake(d.fakeGetFaceSearchPages)

	case "GetFaceSearchPagesWithContext":
		return m.Fake(d.fakeGetFaceSearchPagesWithContext)

	case "GetFaceSearchWithContext":
		return m.Fake(d.fakeGetFaceSearchWithContext)

	case "GetLabelDetectionPages":
		return m.Fake(d.fakeGetLabelDetectionPages)

	case "GetLabelDetectionPagesWithContext":
		return m.Fake(d.fakeGetLabelDetectionPagesWithContext)

	case "GetLabelDetectionWithContext":
		return m.Fake(d.fakeGetLabelDetectionWithContext)

	case "GetPersonTrackingPages":
		return m.Fake(d.fakeGetPersonTrackingPages)

	case "GetPersonTrackingPagesWithContext":
		return m.Fake(d.fakeGetPersonTrackingPagesWithContext)

	case "GetPersonTrackingWithContext":
		return m.Fake(d.fakeGetPersonTrackingWithContext)

	case "IndexFacesWithContext":
		return m.Fake(d.fakeIndexFacesWithContext)

	case "ListCollectionsPages":
		return m.Fake(d.fakeListCollectionsPages)

	case "ListCollectionsPagesWithContext":
		return m.Fake(d.fakeListCollectionsPagesWithContext)

	case "ListCollectionsWithContext":
		return m.Fake(d.fakeListCollectionsWithContext)

	case "ListFacesPages":
		return m.Fake(d.fakeListFacesPages)

	case "ListFacesPagesWithContext":
		return m.Fake(d.fakeListFacesPagesWithContext)

	case "ListFacesWithContext":
		return m.Fake(d.fakeListFacesWithContext)

	case "ListStreamProcessorsPages":
		return m.Fake(d.fakeListStreamProcessorsPages)

	case "ListStreamProcessorsPagesWithContext":
		return m.Fake(d.fakeListStreamProcessorsPagesWithContext)

	case "ListStreamProcessorsWithContext":
		return m.Fake(d.fakeListStreamProcessorsWithContext)

	case "RecognizeCelebritiesWithContext":
		return m.Fake(d.fakeRecognizeCelebritiesWithContext)

	case "SearchFacesByImageWithContext":
		return m.Fake(d.fakeSearchFacesByImageWithContext)

	case "SearchFacesWithContext":
		return m.Fake(d.fakeSearchFacesWithContext)

	case "StartCelebrityRecognitionWithContext":
		return m.Fake(d.fakeStartCelebrityRecognitionWithContext)

	case "StartContentModerationWithContext":
		return m.Fake(d.fakeStartContentModerationWithContext)

	case "StartFaceDetectionWithContext":
		return m.Fake(d.fakeStartFaceDetectionWithContext)

	case "StartFaceSearchWithContext":
		return m.Fake(d.fakeStartFaceSearchWithContext)

	case "StartLabelDetectionWithContext":
		return m.Fake(d.fakeStartLabelDetectionWithContext)

	case "StartPersonTrackingWithContext":
		return m.Fake(d.fakeStartPersonTrackingWithContext)

	case "StartProjectVersionWithContext":
		return m.Fake(d.fakeStartProjectVersionWithContext)

	case "StartStreamProcessorWithContext":
		return m.Fake(d.fakeStartStreamProcessorWithContext)

	case "StopProjectVersionWithContext":
		return m.Fake(d.fakeStopProjectVersionWithContext)

	case "StopStreamProcessorWithContext":
		return m.Fake(d.fakeStopStreamProcessorWithContext)

	case "WaitUntilProjectVersionRunning":
		return m.Fake(d.fakeWaitUntilProjectVersionRunning)

	case "WaitUntilProjectVersionRunningWithContext":
		return m.Fake(d.fakeWaitUntilProjectVersionRunningWithContext)

	case "WaitUntilProjectVersionTrainingCompleted":
		return m.Fake(d.fakeWaitUntilProjectVersionTrainingCompleted)

	case "WaitUntilProjectVersionTrainingCompletedWithContext":
		return m.Fake(d.fakeWaitUntilProjectVersionTrainingCompletedWithContext)

	default:
		return nil
	}
}

func (d *RekognitionDouble) CompareFaces(i0 *rekognition.CompareFacesInput) (r0 *rekognition.CompareFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompareFaces", i0)
	r0, _ = returns[0].(*rekognition.CompareFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) CompareFacesRequest(i0 *rekognition.CompareFacesInput) (r0 *request.Request, r1 *rekognition.CompareFacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompareFacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.CompareFacesOutput)
	return
}

func (d *RekognitionDouble) CompareFacesWithContext(i0 context.Context, i1 *rekognition.CompareFacesInput, i2 ...request.Option) (r0 *rekognition.CompareFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CompareFacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.CompareFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeCompareFacesWithContext(ctx context.Context, in *rekognition.CompareFacesInput, _ ...request.Option) (*rekognition.CompareFacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CompareFaces cancelled", ctx.Err())
	default:
		return d.CompareFaces(in)
	}
}

func (d *RekognitionDouble) CreateCollection(i0 *rekognition.CreateCollectionInput) (r0 *rekognition.CreateCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCollection", i0)
	r0, _ = returns[0].(*rekognition.CreateCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) CreateCollectionRequest(i0 *rekognition.CreateCollectionInput) (r0 *request.Request, r1 *rekognition.CreateCollectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCollectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.CreateCollectionOutput)
	return
}

func (d *RekognitionDouble) CreateCollectionWithContext(i0 context.Context, i1 *rekognition.CreateCollectionInput, i2 ...request.Option) (r0 *rekognition.CreateCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateCollectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.CreateCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeCreateCollectionWithContext(ctx context.Context, in *rekognition.CreateCollectionInput, _ ...request.Option) (*rekognition.CreateCollectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateCollection cancelled", ctx.Err())
	default:
		return d.CreateCollection(in)
	}
}

func (d *RekognitionDouble) CreateProject(i0 *rekognition.CreateProjectInput) (r0 *rekognition.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProject", i0)
	r0, _ = returns[0].(*rekognition.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) CreateProjectRequest(i0 *rekognition.CreateProjectInput) (r0 *request.Request, r1 *rekognition.CreateProjectOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.CreateProjectOutput)
	return
}

func (d *RekognitionDouble) CreateProjectVersion(i0 *rekognition.CreateProjectVersionInput) (r0 *rekognition.CreateProjectVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectVersion", i0)
	r0, _ = returns[0].(*rekognition.CreateProjectVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) CreateProjectVersionRequest(i0 *rekognition.CreateProjectVersionInput) (r0 *request.Request, r1 *rekognition.CreateProjectVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.CreateProjectVersionOutput)
	return
}

func (d *RekognitionDouble) CreateProjectVersionWithContext(i0 context.Context, i1 *rekognition.CreateProjectVersionInput, i2 ...request.Option) (r0 *rekognition.CreateProjectVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.CreateProjectVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeCreateProjectVersionWithContext(ctx context.Context, in *rekognition.CreateProjectVersionInput, _ ...request.Option) (*rekognition.CreateProjectVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProjectVersion cancelled", ctx.Err())
	default:
		return d.CreateProjectVersion(in)
	}
}

func (d *RekognitionDouble) CreateProjectWithContext(i0 context.Context, i1 *rekognition.CreateProjectInput, i2 ...request.Option) (r0 *rekognition.CreateProjectOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateProjectWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.CreateProjectOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeCreateProjectWithContext(ctx context.Context, in *rekognition.CreateProjectInput, _ ...request.Option) (*rekognition.CreateProjectOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateProject cancelled", ctx.Err())
	default:
		return d.CreateProject(in)
	}
}

func (d *RekognitionDouble) CreateStreamProcessor(i0 *rekognition.CreateStreamProcessorInput) (r0 *rekognition.CreateStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamProcessor", i0)
	r0, _ = returns[0].(*rekognition.CreateStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) CreateStreamProcessorRequest(i0 *rekognition.CreateStreamProcessorInput) (r0 *request.Request, r1 *rekognition.CreateStreamProcessorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamProcessorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.CreateStreamProcessorOutput)
	return
}

func (d *RekognitionDouble) CreateStreamProcessorWithContext(i0 context.Context, i1 *rekognition.CreateStreamProcessorInput, i2 ...request.Option) (r0 *rekognition.CreateStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateStreamProcessorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.CreateStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeCreateStreamProcessorWithContext(ctx context.Context, in *rekognition.CreateStreamProcessorInput, _ ...request.Option) (*rekognition.CreateStreamProcessorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateStreamProcessor cancelled", ctx.Err())
	default:
		return d.CreateStreamProcessor(in)
	}
}

func (d *RekognitionDouble) DeleteCollection(i0 *rekognition.DeleteCollectionInput) (r0 *rekognition.DeleteCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCollection", i0)
	r0, _ = returns[0].(*rekognition.DeleteCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DeleteCollectionRequest(i0 *rekognition.DeleteCollectionInput) (r0 *request.Request, r1 *rekognition.DeleteCollectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCollectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DeleteCollectionOutput)
	return
}

func (d *RekognitionDouble) DeleteCollectionWithContext(i0 context.Context, i1 *rekognition.DeleteCollectionInput, i2 ...request.Option) (r0 *rekognition.DeleteCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteCollectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DeleteCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDeleteCollectionWithContext(ctx context.Context, in *rekognition.DeleteCollectionInput, _ ...request.Option) (*rekognition.DeleteCollectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteCollection cancelled", ctx.Err())
	default:
		return d.DeleteCollection(in)
	}
}

func (d *RekognitionDouble) DeleteFaces(i0 *rekognition.DeleteFacesInput) (r0 *rekognition.DeleteFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFaces", i0)
	r0, _ = returns[0].(*rekognition.DeleteFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DeleteFacesRequest(i0 *rekognition.DeleteFacesInput) (r0 *request.Request, r1 *rekognition.DeleteFacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DeleteFacesOutput)
	return
}

func (d *RekognitionDouble) DeleteFacesWithContext(i0 context.Context, i1 *rekognition.DeleteFacesInput, i2 ...request.Option) (r0 *rekognition.DeleteFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteFacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DeleteFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDeleteFacesWithContext(ctx context.Context, in *rekognition.DeleteFacesInput, _ ...request.Option) (*rekognition.DeleteFacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteFaces cancelled", ctx.Err())
	default:
		return d.DeleteFaces(in)
	}
}

func (d *RekognitionDouble) DeleteStreamProcessor(i0 *rekognition.DeleteStreamProcessorInput) (r0 *rekognition.DeleteStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamProcessor", i0)
	r0, _ = returns[0].(*rekognition.DeleteStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DeleteStreamProcessorRequest(i0 *rekognition.DeleteStreamProcessorInput) (r0 *request.Request, r1 *rekognition.DeleteStreamProcessorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamProcessorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DeleteStreamProcessorOutput)
	return
}

func (d *RekognitionDouble) DeleteStreamProcessorWithContext(i0 context.Context, i1 *rekognition.DeleteStreamProcessorInput, i2 ...request.Option) (r0 *rekognition.DeleteStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteStreamProcessorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DeleteStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDeleteStreamProcessorWithContext(ctx context.Context, in *rekognition.DeleteStreamProcessorInput, _ ...request.Option) (*rekognition.DeleteStreamProcessorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteStreamProcessor cancelled", ctx.Err())
	default:
		return d.DeleteStreamProcessor(in)
	}
}

func (d *RekognitionDouble) DescribeCollection(i0 *rekognition.DescribeCollectionInput) (r0 *rekognition.DescribeCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCollection", i0)
	r0, _ = returns[0].(*rekognition.DescribeCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DescribeCollectionRequest(i0 *rekognition.DescribeCollectionInput) (r0 *request.Request, r1 *rekognition.DescribeCollectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCollectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DescribeCollectionOutput)
	return
}

func (d *RekognitionDouble) DescribeCollectionWithContext(i0 context.Context, i1 *rekognition.DescribeCollectionInput, i2 ...request.Option) (r0 *rekognition.DescribeCollectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCollectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DescribeCollectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeCollectionWithContext(ctx context.Context, in *rekognition.DescribeCollectionInput, _ ...request.Option) (*rekognition.DescribeCollectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCollection cancelled", ctx.Err())
	default:
		return d.DescribeCollection(in)
	}
}

func (d *RekognitionDouble) DescribeProjectVersions(i0 *rekognition.DescribeProjectVersionsInput) (r0 *rekognition.DescribeProjectVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectVersions", i0)
	r0, _ = returns[0].(*rekognition.DescribeProjectVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DescribeProjectVersionsPages(i0 *rekognition.DescribeProjectVersionsInput, i1 func(*rekognition.DescribeProjectVersionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectVersionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeProjectVersionsPages(in *rekognition.DescribeProjectVersionsInput, pager func(*rekognition.DescribeProjectVersionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeProjectVersions", paginators, in, pager)
}

func (d *RekognitionDouble) DescribeProjectVersionsPagesWithContext(i0 context.Context, i1 *rekognition.DescribeProjectVersionsInput, i2 func(*rekognition.DescribeProjectVersionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectVersionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeProjectVersionsPagesWithContext(ctx context.Context, in *rekognition.DescribeProjectVersionsInput, pager func(*rekognition.DescribeProjectVersionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeProjectVersions", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) DescribeProjectVersionsRequest(i0 *rekognition.DescribeProjectVersionsInput) (r0 *request.Request, r1 *rekognition.DescribeProjectVersionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectVersionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DescribeProjectVersionsOutput)
	return
}

func (d *RekognitionDouble) DescribeProjectVersionsWithContext(i0 context.Context, i1 *rekognition.DescribeProjectVersionsInput, i2 ...request.Option) (r0 *rekognition.DescribeProjectVersionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectVersionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DescribeProjectVersionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeProjectVersionsWithContext(ctx context.Context, in *rekognition.DescribeProjectVersionsInput, _ ...request.Option) (*rekognition.DescribeProjectVersionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProjectVersions cancelled", ctx.Err())
	default:
		return d.DescribeProjectVersions(in)
	}
}

func (d *RekognitionDouble) DescribeProjects(i0 *rekognition.DescribeProjectsInput) (r0 *rekognition.DescribeProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjects", i0)
	r0, _ = returns[0].(*rekognition.DescribeProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DescribeProjectsPages(i0 *rekognition.DescribeProjectsInput, i1 func(*rekognition.DescribeProjectsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeProjectsPages(in *rekognition.DescribeProjectsInput, pager func(*rekognition.DescribeProjectsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeProjects", paginators, in, pager)
}

func (d *RekognitionDouble) DescribeProjectsPagesWithContext(i0 context.Context, i1 *rekognition.DescribeProjectsInput, i2 func(*rekognition.DescribeProjectsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeProjectsPagesWithContext(ctx context.Context, in *rekognition.DescribeProjectsInput, pager func(*rekognition.DescribeProjectsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeProjects", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) DescribeProjectsRequest(i0 *rekognition.DescribeProjectsInput) (r0 *request.Request, r1 *rekognition.DescribeProjectsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DescribeProjectsOutput)
	return
}

func (d *RekognitionDouble) DescribeProjectsWithContext(i0 context.Context, i1 *rekognition.DescribeProjectsInput, i2 ...request.Option) (r0 *rekognition.DescribeProjectsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeProjectsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DescribeProjectsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeProjectsWithContext(ctx context.Context, in *rekognition.DescribeProjectsInput, _ ...request.Option) (*rekognition.DescribeProjectsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeProjects cancelled", ctx.Err())
	default:
		return d.DescribeProjects(in)
	}
}

func (d *RekognitionDouble) DescribeStreamProcessor(i0 *rekognition.DescribeStreamProcessorInput) (r0 *rekognition.DescribeStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamProcessor", i0)
	r0, _ = returns[0].(*rekognition.DescribeStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DescribeStreamProcessorRequest(i0 *rekognition.DescribeStreamProcessorInput) (r0 *request.Request, r1 *rekognition.DescribeStreamProcessorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamProcessorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DescribeStreamProcessorOutput)
	return
}

func (d *RekognitionDouble) DescribeStreamProcessorWithContext(i0 context.Context, i1 *rekognition.DescribeStreamProcessorInput, i2 ...request.Option) (r0 *rekognition.DescribeStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStreamProcessorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DescribeStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDescribeStreamProcessorWithContext(ctx context.Context, in *rekognition.DescribeStreamProcessorInput, _ ...request.Option) (*rekognition.DescribeStreamProcessorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStreamProcessor cancelled", ctx.Err())
	default:
		return d.DescribeStreamProcessor(in)
	}
}

func (d *RekognitionDouble) DetectCustomLabels(i0 *rekognition.DetectCustomLabelsInput) (r0 *rekognition.DetectCustomLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectCustomLabels", i0)
	r0, _ = returns[0].(*rekognition.DetectCustomLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DetectCustomLabelsRequest(i0 *rekognition.DetectCustomLabelsInput) (r0 *request.Request, r1 *rekognition.DetectCustomLabelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectCustomLabelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DetectCustomLabelsOutput)
	return
}

func (d *RekognitionDouble) DetectCustomLabelsWithContext(i0 context.Context, i1 *rekognition.DetectCustomLabelsInput, i2 ...request.Option) (r0 *rekognition.DetectCustomLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectCustomLabelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DetectCustomLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDetectCustomLabelsWithContext(ctx context.Context, in *rekognition.DetectCustomLabelsInput, _ ...request.Option) (*rekognition.DetectCustomLabelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectCustomLabels cancelled", ctx.Err())
	default:
		return d.DetectCustomLabels(in)
	}
}

func (d *RekognitionDouble) DetectFaces(i0 *rekognition.DetectFacesInput) (r0 *rekognition.DetectFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectFaces", i0)
	r0, _ = returns[0].(*rekognition.DetectFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DetectFacesRequest(i0 *rekognition.DetectFacesInput) (r0 *request.Request, r1 *rekognition.DetectFacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectFacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DetectFacesOutput)
	return
}

func (d *RekognitionDouble) DetectFacesWithContext(i0 context.Context, i1 *rekognition.DetectFacesInput, i2 ...request.Option) (r0 *rekognition.DetectFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectFacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DetectFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDetectFacesWithContext(ctx context.Context, in *rekognition.DetectFacesInput, _ ...request.Option) (*rekognition.DetectFacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectFaces cancelled", ctx.Err())
	default:
		return d.DetectFaces(in)
	}
}

func (d *RekognitionDouble) DetectLabels(i0 *rekognition.DetectLabelsInput) (r0 *rekognition.DetectLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectLabels", i0)
	r0, _ = returns[0].(*rekognition.DetectLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DetectLabelsRequest(i0 *rekognition.DetectLabelsInput) (r0 *request.Request, r1 *rekognition.DetectLabelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectLabelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DetectLabelsOutput)
	return
}

func (d *RekognitionDouble) DetectLabelsWithContext(i0 context.Context, i1 *rekognition.DetectLabelsInput, i2 ...request.Option) (r0 *rekognition.DetectLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectLabelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DetectLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDetectLabelsWithContext(ctx context.Context, in *rekognition.DetectLabelsInput, _ ...request.Option) (*rekognition.DetectLabelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectLabels cancelled", ctx.Err())
	default:
		return d.DetectLabels(in)
	}
}

func (d *RekognitionDouble) DetectModerationLabels(i0 *rekognition.DetectModerationLabelsInput) (r0 *rekognition.DetectModerationLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectModerationLabels", i0)
	r0, _ = returns[0].(*rekognition.DetectModerationLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DetectModerationLabelsRequest(i0 *rekognition.DetectModerationLabelsInput) (r0 *request.Request, r1 *rekognition.DetectModerationLabelsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectModerationLabelsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DetectModerationLabelsOutput)
	return
}

func (d *RekognitionDouble) DetectModerationLabelsWithContext(i0 context.Context, i1 *rekognition.DetectModerationLabelsInput, i2 ...request.Option) (r0 *rekognition.DetectModerationLabelsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectModerationLabelsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DetectModerationLabelsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDetectModerationLabelsWithContext(ctx context.Context, in *rekognition.DetectModerationLabelsInput, _ ...request.Option) (*rekognition.DetectModerationLabelsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectModerationLabels cancelled", ctx.Err())
	default:
		return d.DetectModerationLabels(in)
	}
}

func (d *RekognitionDouble) DetectText(i0 *rekognition.DetectTextInput) (r0 *rekognition.DetectTextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectText", i0)
	r0, _ = returns[0].(*rekognition.DetectTextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) DetectTextRequest(i0 *rekognition.DetectTextInput) (r0 *request.Request, r1 *rekognition.DetectTextOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectTextRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.DetectTextOutput)
	return
}

func (d *RekognitionDouble) DetectTextWithContext(i0 context.Context, i1 *rekognition.DetectTextInput, i2 ...request.Option) (r0 *rekognition.DetectTextOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DetectTextWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.DetectTextOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeDetectTextWithContext(ctx context.Context, in *rekognition.DetectTextInput, _ ...request.Option) (*rekognition.DetectTextOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DetectText cancelled", ctx.Err())
	default:
		return d.DetectText(in)
	}
}

func (d *RekognitionDouble) GetCelebrityInfo(i0 *rekognition.GetCelebrityInfoInput) (r0 *rekognition.GetCelebrityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityInfo", i0)
	r0, _ = returns[0].(*rekognition.GetCelebrityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) GetCelebrityInfoRequest(i0 *rekognition.GetCelebrityInfoInput) (r0 *request.Request, r1 *rekognition.GetCelebrityInfoOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityInfoRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.GetCelebrityInfoOutput)
	return
}

func (d *RekognitionDouble) GetCelebrityInfoWithContext(i0 context.Context, i1 *rekognition.GetCelebrityInfoInput, i2 ...request.Option) (r0 *rekognition.GetCelebrityInfoOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityInfoWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.GetCelebrityInfoOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeGetCelebrityInfoWithContext(ctx context.Context, in *rekognition.GetCelebrityInfoInput, _ ...request.Option) (*rekognition.GetCelebrityInfoOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCelebrityInfo cancelled", ctx.Err())
	default:
		return d.GetCelebrityInfo(in)
	}
}

func (d *RekognitionDouble) GetCelebrityRecognition(i0 *rekognition.GetCelebrityRecognitionInput) (r0 *rekognition.GetCelebrityRecognitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityRecognition", i0)
	r0, _ = returns[0].(*rekognition.GetCelebrityRecognitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) GetCelebrityRecognitionPages(i0 *rekognition.GetCelebrityRecognitionInput, i1 func(*rekognition.GetCelebrityRecognitionOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityRecognitionPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetCelebrityRecognitionPages(in *rekognition.GetCelebrityRecognitionInput, pager func(*rekognition.GetCelebrityRecognitionOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetCelebrityRecognition", paginators, in, pager)
}

func (d *RekognitionDouble) GetCelebrityRecognitionPagesWithContext(i0 context.Context, i1 *rekognition.GetCelebrityRecognitionInput, i2 func(*rekognition.GetCelebrityRecognitionOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityRecognitionPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetCelebrityRecognitionPagesWithContext(ctx context.Context, in *rekognition.GetCelebrityRecognitionInput, pager func(*rekognition.GetCelebrityRecognitionOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetCelebrityRecognition", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) GetCelebrityRecognitionRequest(i0 *rekognition.GetCelebrityRecognitionInput) (r0 *request.Request, r1 *rekognition.GetCelebrityRecognitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityRecognitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.GetCelebrityRecognitionOutput)
	return
}

func (d *RekognitionDouble) GetCelebrityRecognitionWithContext(i0 context.Context, i1 *rekognition.GetCelebrityRecognitionInput, i2 ...request.Option) (r0 *rekognition.GetCelebrityRecognitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetCelebrityRecognitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.GetCelebrityRecognitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeGetCelebrityRecognitionWithContext(ctx context.Context, in *rekognition.GetCelebrityRecognitionInput, _ ...request.Option) (*rekognition.GetCelebrityRecognitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetCelebrityRecognition cancelled", ctx.Err())
	default:
		return d.GetCelebrityRecognition(in)
	}
}

func (d *RekognitionDouble) GetContentModeration(i0 *rekognition.GetContentModerationInput) (r0 *rekognition.GetContentModerationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContentModeration", i0)
	r0, _ = returns[0].(*rekognition.GetContentModerationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) GetContentModerationPages(i0 *rekognition.GetContentModerationInput, i1 func(*rekognition.GetContentModerationOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContentModerationPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetContentModerationPages(in *rekognition.GetContentModerationInput, pager func(*rekognition.GetContentModerationOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetContentModeration", paginators, in, pager)
}

func (d *RekognitionDouble) GetContentModerationPagesWithContext(i0 context.Context, i1 *rekognition.GetContentModerationInput, i2 func(*rekognition.GetContentModerationOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContentModerationPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetContentModerationPagesWithContext(ctx context.Context, in *rekognition.GetContentModerationInput, pager func(*rekognition.GetContentModerationOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetContentModeration", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) GetContentModerationRequest(i0 *rekognition.GetContentModerationInput) (r0 *request.Request, r1 *rekognition.GetContentModerationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContentModerationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.GetContentModerationOutput)
	return
}

func (d *RekognitionDouble) GetContentModerationWithContext(i0 context.Context, i1 *rekognition.GetContentModerationInput, i2 ...request.Option) (r0 *rekognition.GetContentModerationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetContentModerationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.GetContentModerationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeGetContentModerationWithContext(ctx context.Context, in *rekognition.GetContentModerationInput, _ ...request.Option) (*rekognition.GetContentModerationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetContentModeration cancelled", ctx.Err())
	default:
		return d.GetContentModeration(in)
	}
}

func (d *RekognitionDouble) GetFaceDetection(i0 *rekognition.GetFaceDetectionInput) (r0 *rekognition.GetFaceDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceDetection", i0)
	r0, _ = returns[0].(*rekognition.GetFaceDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) GetFaceDetectionPages(i0 *rekognition.GetFaceDetectionInput, i1 func(*rekognition.GetFaceDetectionOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceDetectionPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetFaceDetectionPages(in *rekognition.GetFaceDetectionInput, pager func(*rekognition.GetFaceDetectionOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetFaceDetection", paginators, in, pager)
}

func (d *RekognitionDouble) GetFaceDetectionPagesWithContext(i0 context.Context, i1 *rekognition.GetFaceDetectionInput, i2 func(*rekognition.GetFaceDetectionOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceDetectionPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetFaceDetectionPagesWithContext(ctx context.Context, in *rekognition.GetFaceDetectionInput, pager func(*rekognition.GetFaceDetectionOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetFaceDetection", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) GetFaceDetectionRequest(i0 *rekognition.GetFaceDetectionInput) (r0 *request.Request, r1 *rekognition.GetFaceDetectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceDetectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.GetFaceDetectionOutput)
	return
}

func (d *RekognitionDouble) GetFaceDetectionWithContext(i0 context.Context, i1 *rekognition.GetFaceDetectionInput, i2 ...request.Option) (r0 *rekognition.GetFaceDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceDetectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.GetFaceDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeGetFaceDetectionWithContext(ctx context.Context, in *rekognition.GetFaceDetectionInput, _ ...request.Option) (*rekognition.GetFaceDetectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFaceDetection cancelled", ctx.Err())
	default:
		return d.GetFaceDetection(in)
	}
}

func (d *RekognitionDouble) GetFaceSearch(i0 *rekognition.GetFaceSearchInput) (r0 *rekognition.GetFaceSearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceSearch", i0)
	r0, _ = returns[0].(*rekognition.GetFaceSearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) GetFaceSearchPages(i0 *rekognition.GetFaceSearchInput, i1 func(*rekognition.GetFaceSearchOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceSearchPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetFaceSearchPages(in *rekognition.GetFaceSearchInput, pager func(*rekognition.GetFaceSearchOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetFaceSearch", paginators, in, pager)
}

func (d *RekognitionDouble) GetFaceSearchPagesWithContext(i0 context.Context, i1 *rekognition.GetFaceSearchInput, i2 func(*rekognition.GetFaceSearchOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceSearchPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetFaceSearchPagesWithContext(ctx context.Context, in *rekognition.GetFaceSearchInput, pager func(*rekognition.GetFaceSearchOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetFaceSearch", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) GetFaceSearchRequest(i0 *rekognition.GetFaceSearchInput) (r0 *request.Request, r1 *rekognition.GetFaceSearchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceSearchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.GetFaceSearchOutput)
	return
}

func (d *RekognitionDouble) GetFaceSearchWithContext(i0 context.Context, i1 *rekognition.GetFaceSearchInput, i2 ...request.Option) (r0 *rekognition.GetFaceSearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetFaceSearchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.GetFaceSearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeGetFaceSearchWithContext(ctx context.Context, in *rekognition.GetFaceSearchInput, _ ...request.Option) (*rekognition.GetFaceSearchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetFaceSearch cancelled", ctx.Err())
	default:
		return d.GetFaceSearch(in)
	}
}

func (d *RekognitionDouble) GetLabelDetection(i0 *rekognition.GetLabelDetectionInput) (r0 *rekognition.GetLabelDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLabelDetection", i0)
	r0, _ = returns[0].(*rekognition.GetLabelDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) GetLabelDetectionPages(i0 *rekognition.GetLabelDetectionInput, i1 func(*rekognition.GetLabelDetectionOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLabelDetectionPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetLabelDetectionPages(in *rekognition.GetLabelDetectionInput, pager func(*rekognition.GetLabelDetectionOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetLabelDetection", paginators, in, pager)
}

func (d *RekognitionDouble) GetLabelDetectionPagesWithContext(i0 context.Context, i1 *rekognition.GetLabelDetectionInput, i2 func(*rekognition.GetLabelDetectionOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLabelDetectionPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetLabelDetectionPagesWithContext(ctx context.Context, in *rekognition.GetLabelDetectionInput, pager func(*rekognition.GetLabelDetectionOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetLabelDetection", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) GetLabelDetectionRequest(i0 *rekognition.GetLabelDetectionInput) (r0 *request.Request, r1 *rekognition.GetLabelDetectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLabelDetectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.GetLabelDetectionOutput)
	return
}

func (d *RekognitionDouble) GetLabelDetectionWithContext(i0 context.Context, i1 *rekognition.GetLabelDetectionInput, i2 ...request.Option) (r0 *rekognition.GetLabelDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLabelDetectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.GetLabelDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeGetLabelDetectionWithContext(ctx context.Context, in *rekognition.GetLabelDetectionInput, _ ...request.Option) (*rekognition.GetLabelDetectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLabelDetection cancelled", ctx.Err())
	default:
		return d.GetLabelDetection(in)
	}
}

func (d *RekognitionDouble) GetPersonTracking(i0 *rekognition.GetPersonTrackingInput) (r0 *rekognition.GetPersonTrackingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPersonTracking", i0)
	r0, _ = returns[0].(*rekognition.GetPersonTrackingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) GetPersonTrackingPages(i0 *rekognition.GetPersonTrackingInput, i1 func(*rekognition.GetPersonTrackingOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPersonTrackingPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetPersonTrackingPages(in *rekognition.GetPersonTrackingInput, pager func(*rekognition.GetPersonTrackingOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetPersonTracking", paginators, in, pager)
}

func (d *RekognitionDouble) GetPersonTrackingPagesWithContext(i0 context.Context, i1 *rekognition.GetPersonTrackingInput, i2 func(*rekognition.GetPersonTrackingOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPersonTrackingPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeGetPersonTrackingPagesWithContext(ctx context.Context, in *rekognition.GetPersonTrackingInput, pager func(*rekognition.GetPersonTrackingOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetPersonTracking", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) GetPersonTrackingRequest(i0 *rekognition.GetPersonTrackingInput) (r0 *request.Request, r1 *rekognition.GetPersonTrackingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPersonTrackingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.GetPersonTrackingOutput)
	return
}

func (d *RekognitionDouble) GetPersonTrackingWithContext(i0 context.Context, i1 *rekognition.GetPersonTrackingInput, i2 ...request.Option) (r0 *rekognition.GetPersonTrackingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPersonTrackingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.GetPersonTrackingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeGetPersonTrackingWithContext(ctx context.Context, in *rekognition.GetPersonTrackingInput, _ ...request.Option) (*rekognition.GetPersonTrackingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPersonTracking cancelled", ctx.Err())
	default:
		return d.GetPersonTracking(in)
	}
}

func (d *RekognitionDouble) IndexFaces(i0 *rekognition.IndexFacesInput) (r0 *rekognition.IndexFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IndexFaces", i0)
	r0, _ = returns[0].(*rekognition.IndexFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) IndexFacesRequest(i0 *rekognition.IndexFacesInput) (r0 *request.Request, r1 *rekognition.IndexFacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IndexFacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.IndexFacesOutput)
	return
}

func (d *RekognitionDouble) IndexFacesWithContext(i0 context.Context, i1 *rekognition.IndexFacesInput, i2 ...request.Option) (r0 *rekognition.IndexFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("IndexFacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.IndexFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeIndexFacesWithContext(ctx context.Context, in *rekognition.IndexFacesInput, _ ...request.Option) (*rekognition.IndexFacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "IndexFaces cancelled", ctx.Err())
	default:
		return d.IndexFaces(in)
	}
}

func (d *RekognitionDouble) ListCollections(i0 *rekognition.ListCollectionsInput) (r0 *rekognition.ListCollectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCollections", i0)
	r0, _ = returns[0].(*rekognition.ListCollectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) ListCollectionsPages(i0 *rekognition.ListCollectionsInput, i1 func(*rekognition.ListCollectionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCollectionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeListCollectionsPages(in *rekognition.ListCollectionsInput, pager func(*rekognition.ListCollectionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListCollections", paginators, in, pager)
}

func (d *RekognitionDouble) ListCollectionsPagesWithContext(i0 context.Context, i1 *rekognition.ListCollectionsInput, i2 func(*rekognition.ListCollectionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCollectionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeListCollectionsPagesWithContext(ctx context.Context, in *rekognition.ListCollectionsInput, pager func(*rekognition.ListCollectionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListCollections", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) ListCollectionsRequest(i0 *rekognition.ListCollectionsInput) (r0 *request.Request, r1 *rekognition.ListCollectionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCollectionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.ListCollectionsOutput)
	return
}

func (d *RekognitionDouble) ListCollectionsWithContext(i0 context.Context, i1 *rekognition.ListCollectionsInput, i2 ...request.Option) (r0 *rekognition.ListCollectionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListCollectionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.ListCollectionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeListCollectionsWithContext(ctx context.Context, in *rekognition.ListCollectionsInput, _ ...request.Option) (*rekognition.ListCollectionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListCollections cancelled", ctx.Err())
	default:
		return d.ListCollections(in)
	}
}

func (d *RekognitionDouble) ListFaces(i0 *rekognition.ListFacesInput) (r0 *rekognition.ListFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFaces", i0)
	r0, _ = returns[0].(*rekognition.ListFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) ListFacesPages(i0 *rekognition.ListFacesInput, i1 func(*rekognition.ListFacesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeListFacesPages(in *rekognition.ListFacesInput, pager func(*rekognition.ListFacesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListFaces", paginators, in, pager)
}

func (d *RekognitionDouble) ListFacesPagesWithContext(i0 context.Context, i1 *rekognition.ListFacesInput, i2 func(*rekognition.ListFacesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeListFacesPagesWithContext(ctx context.Context, in *rekognition.ListFacesInput, pager func(*rekognition.ListFacesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListFaces", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) ListFacesRequest(i0 *rekognition.ListFacesInput) (r0 *request.Request, r1 *rekognition.ListFacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.ListFacesOutput)
	return
}

func (d *RekognitionDouble) ListFacesWithContext(i0 context.Context, i1 *rekognition.ListFacesInput, i2 ...request.Option) (r0 *rekognition.ListFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListFacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.ListFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeListFacesWithContext(ctx context.Context, in *rekognition.ListFacesInput, _ ...request.Option) (*rekognition.ListFacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListFaces cancelled", ctx.Err())
	default:
		return d.ListFaces(in)
	}
}

func (d *RekognitionDouble) ListStreamProcessors(i0 *rekognition.ListStreamProcessorsInput) (r0 *rekognition.ListStreamProcessorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamProcessors", i0)
	r0, _ = returns[0].(*rekognition.ListStreamProcessorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) ListStreamProcessorsPages(i0 *rekognition.ListStreamProcessorsInput, i1 func(*rekognition.ListStreamProcessorsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamProcessorsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeListStreamProcessorsPages(in *rekognition.ListStreamProcessorsInput, pager func(*rekognition.ListStreamProcessorsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListStreamProcessors", paginators, in, pager)
}

func (d *RekognitionDouble) ListStreamProcessorsPagesWithContext(i0 context.Context, i1 *rekognition.ListStreamProcessorsInput, i2 func(*rekognition.ListStreamProcessorsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamProcessorsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeListStreamProcessorsPagesWithContext(ctx context.Context, in *rekognition.ListStreamProcessorsInput, pager func(*rekognition.ListStreamProcessorsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListStreamProcessors", paginators, ctx, in, pager, options...)
}

func (d *RekognitionDouble) ListStreamProcessorsRequest(i0 *rekognition.ListStreamProcessorsInput) (r0 *request.Request, r1 *rekognition.ListStreamProcessorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamProcessorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.ListStreamProcessorsOutput)
	return
}

func (d *RekognitionDouble) ListStreamProcessorsWithContext(i0 context.Context, i1 *rekognition.ListStreamProcessorsInput, i2 ...request.Option) (r0 *rekognition.ListStreamProcessorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStreamProcessorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.ListStreamProcessorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeListStreamProcessorsWithContext(ctx context.Context, in *rekognition.ListStreamProcessorsInput, _ ...request.Option) (*rekognition.ListStreamProcessorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListStreamProcessors cancelled", ctx.Err())
	default:
		return d.ListStreamProcessors(in)
	}
}

func (d *RekognitionDouble) RecognizeCelebrities(i0 *rekognition.RecognizeCelebritiesInput) (r0 *rekognition.RecognizeCelebritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecognizeCelebrities", i0)
	r0, _ = returns[0].(*rekognition.RecognizeCelebritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) RecognizeCelebritiesRequest(i0 *rekognition.RecognizeCelebritiesInput) (r0 *request.Request, r1 *rekognition.RecognizeCelebritiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecognizeCelebritiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.RecognizeCelebritiesOutput)
	return
}

func (d *RekognitionDouble) RecognizeCelebritiesWithContext(i0 context.Context, i1 *rekognition.RecognizeCelebritiesInput, i2 ...request.Option) (r0 *rekognition.RecognizeCelebritiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RecognizeCelebritiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.RecognizeCelebritiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeRecognizeCelebritiesWithContext(ctx context.Context, in *rekognition.RecognizeCelebritiesInput, _ ...request.Option) (*rekognition.RecognizeCelebritiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RecognizeCelebrities cancelled", ctx.Err())
	default:
		return d.RecognizeCelebrities(in)
	}
}

func (d *RekognitionDouble) SearchFaces(i0 *rekognition.SearchFacesInput) (r0 *rekognition.SearchFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchFaces", i0)
	r0, _ = returns[0].(*rekognition.SearchFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) SearchFacesByImage(i0 *rekognition.SearchFacesByImageInput) (r0 *rekognition.SearchFacesByImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchFacesByImage", i0)
	r0, _ = returns[0].(*rekognition.SearchFacesByImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) SearchFacesByImageRequest(i0 *rekognition.SearchFacesByImageInput) (r0 *request.Request, r1 *rekognition.SearchFacesByImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchFacesByImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.SearchFacesByImageOutput)
	return
}

func (d *RekognitionDouble) SearchFacesByImageWithContext(i0 context.Context, i1 *rekognition.SearchFacesByImageInput, i2 ...request.Option) (r0 *rekognition.SearchFacesByImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchFacesByImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.SearchFacesByImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeSearchFacesByImageWithContext(ctx context.Context, in *rekognition.SearchFacesByImageInput, _ ...request.Option) (*rekognition.SearchFacesByImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchFacesByImage cancelled", ctx.Err())
	default:
		return d.SearchFacesByImage(in)
	}
}

func (d *RekognitionDouble) SearchFacesRequest(i0 *rekognition.SearchFacesInput) (r0 *request.Request, r1 *rekognition.SearchFacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchFacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.SearchFacesOutput)
	return
}

func (d *RekognitionDouble) SearchFacesWithContext(i0 context.Context, i1 *rekognition.SearchFacesInput, i2 ...request.Option) (r0 *rekognition.SearchFacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SearchFacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.SearchFacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeSearchFacesWithContext(ctx context.Context, in *rekognition.SearchFacesInput, _ ...request.Option) (*rekognition.SearchFacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SearchFaces cancelled", ctx.Err())
	default:
		return d.SearchFaces(in)
	}
}

func (d *RekognitionDouble) StartCelebrityRecognition(i0 *rekognition.StartCelebrityRecognitionInput) (r0 *rekognition.StartCelebrityRecognitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCelebrityRecognition", i0)
	r0, _ = returns[0].(*rekognition.StartCelebrityRecognitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartCelebrityRecognitionRequest(i0 *rekognition.StartCelebrityRecognitionInput) (r0 *request.Request, r1 *rekognition.StartCelebrityRecognitionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCelebrityRecognitionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartCelebrityRecognitionOutput)
	return
}

func (d *RekognitionDouble) StartCelebrityRecognitionWithContext(i0 context.Context, i1 *rekognition.StartCelebrityRecognitionInput, i2 ...request.Option) (r0 *rekognition.StartCelebrityRecognitionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartCelebrityRecognitionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartCelebrityRecognitionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartCelebrityRecognitionWithContext(ctx context.Context, in *rekognition.StartCelebrityRecognitionInput, _ ...request.Option) (*rekognition.StartCelebrityRecognitionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartCelebrityRecognition cancelled", ctx.Err())
	default:
		return d.StartCelebrityRecognition(in)
	}
}

func (d *RekognitionDouble) StartContentModeration(i0 *rekognition.StartContentModerationInput) (r0 *rekognition.StartContentModerationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartContentModeration", i0)
	r0, _ = returns[0].(*rekognition.StartContentModerationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartContentModerationRequest(i0 *rekognition.StartContentModerationInput) (r0 *request.Request, r1 *rekognition.StartContentModerationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartContentModerationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartContentModerationOutput)
	return
}

func (d *RekognitionDouble) StartContentModerationWithContext(i0 context.Context, i1 *rekognition.StartContentModerationInput, i2 ...request.Option) (r0 *rekognition.StartContentModerationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartContentModerationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartContentModerationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartContentModerationWithContext(ctx context.Context, in *rekognition.StartContentModerationInput, _ ...request.Option) (*rekognition.StartContentModerationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartContentModeration cancelled", ctx.Err())
	default:
		return d.StartContentModeration(in)
	}
}

func (d *RekognitionDouble) StartFaceDetection(i0 *rekognition.StartFaceDetectionInput) (r0 *rekognition.StartFaceDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFaceDetection", i0)
	r0, _ = returns[0].(*rekognition.StartFaceDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartFaceDetectionRequest(i0 *rekognition.StartFaceDetectionInput) (r0 *request.Request, r1 *rekognition.StartFaceDetectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFaceDetectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartFaceDetectionOutput)
	return
}

func (d *RekognitionDouble) StartFaceDetectionWithContext(i0 context.Context, i1 *rekognition.StartFaceDetectionInput, i2 ...request.Option) (r0 *rekognition.StartFaceDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFaceDetectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartFaceDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartFaceDetectionWithContext(ctx context.Context, in *rekognition.StartFaceDetectionInput, _ ...request.Option) (*rekognition.StartFaceDetectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartFaceDetection cancelled", ctx.Err())
	default:
		return d.StartFaceDetection(in)
	}
}

func (d *RekognitionDouble) StartFaceSearch(i0 *rekognition.StartFaceSearchInput) (r0 *rekognition.StartFaceSearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFaceSearch", i0)
	r0, _ = returns[0].(*rekognition.StartFaceSearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartFaceSearchRequest(i0 *rekognition.StartFaceSearchInput) (r0 *request.Request, r1 *rekognition.StartFaceSearchOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFaceSearchRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartFaceSearchOutput)
	return
}

func (d *RekognitionDouble) StartFaceSearchWithContext(i0 context.Context, i1 *rekognition.StartFaceSearchInput, i2 ...request.Option) (r0 *rekognition.StartFaceSearchOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartFaceSearchWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartFaceSearchOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartFaceSearchWithContext(ctx context.Context, in *rekognition.StartFaceSearchInput, _ ...request.Option) (*rekognition.StartFaceSearchOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartFaceSearch cancelled", ctx.Err())
	default:
		return d.StartFaceSearch(in)
	}
}

func (d *RekognitionDouble) StartLabelDetection(i0 *rekognition.StartLabelDetectionInput) (r0 *rekognition.StartLabelDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLabelDetection", i0)
	r0, _ = returns[0].(*rekognition.StartLabelDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartLabelDetectionRequest(i0 *rekognition.StartLabelDetectionInput) (r0 *request.Request, r1 *rekognition.StartLabelDetectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLabelDetectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartLabelDetectionOutput)
	return
}

func (d *RekognitionDouble) StartLabelDetectionWithContext(i0 context.Context, i1 *rekognition.StartLabelDetectionInput, i2 ...request.Option) (r0 *rekognition.StartLabelDetectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartLabelDetectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartLabelDetectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartLabelDetectionWithContext(ctx context.Context, in *rekognition.StartLabelDetectionInput, _ ...request.Option) (*rekognition.StartLabelDetectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartLabelDetection cancelled", ctx.Err())
	default:
		return d.StartLabelDetection(in)
	}
}

func (d *RekognitionDouble) StartPersonTracking(i0 *rekognition.StartPersonTrackingInput) (r0 *rekognition.StartPersonTrackingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPersonTracking", i0)
	r0, _ = returns[0].(*rekognition.StartPersonTrackingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartPersonTrackingRequest(i0 *rekognition.StartPersonTrackingInput) (r0 *request.Request, r1 *rekognition.StartPersonTrackingOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPersonTrackingRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartPersonTrackingOutput)
	return
}

func (d *RekognitionDouble) StartPersonTrackingWithContext(i0 context.Context, i1 *rekognition.StartPersonTrackingInput, i2 ...request.Option) (r0 *rekognition.StartPersonTrackingOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartPersonTrackingWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartPersonTrackingOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartPersonTrackingWithContext(ctx context.Context, in *rekognition.StartPersonTrackingInput, _ ...request.Option) (*rekognition.StartPersonTrackingOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartPersonTracking cancelled", ctx.Err())
	default:
		return d.StartPersonTracking(in)
	}
}

func (d *RekognitionDouble) StartProjectVersion(i0 *rekognition.StartProjectVersionInput) (r0 *rekognition.StartProjectVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartProjectVersion", i0)
	r0, _ = returns[0].(*rekognition.StartProjectVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartProjectVersionRequest(i0 *rekognition.StartProjectVersionInput) (r0 *request.Request, r1 *rekognition.StartProjectVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartProjectVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartProjectVersionOutput)
	return
}

func (d *RekognitionDouble) StartProjectVersionWithContext(i0 context.Context, i1 *rekognition.StartProjectVersionInput, i2 ...request.Option) (r0 *rekognition.StartProjectVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartProjectVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartProjectVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartProjectVersionWithContext(ctx context.Context, in *rekognition.StartProjectVersionInput, _ ...request.Option) (*rekognition.StartProjectVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartProjectVersion cancelled", ctx.Err())
	default:
		return d.StartProjectVersion(in)
	}
}

func (d *RekognitionDouble) StartStreamProcessor(i0 *rekognition.StartStreamProcessorInput) (r0 *rekognition.StartStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStreamProcessor", i0)
	r0, _ = returns[0].(*rekognition.StartStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StartStreamProcessorRequest(i0 *rekognition.StartStreamProcessorInput) (r0 *request.Request, r1 *rekognition.StartStreamProcessorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStreamProcessorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StartStreamProcessorOutput)
	return
}

func (d *RekognitionDouble) StartStreamProcessorWithContext(i0 context.Context, i1 *rekognition.StartStreamProcessorInput, i2 ...request.Option) (r0 *rekognition.StartStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartStreamProcessorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StartStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStartStreamProcessorWithContext(ctx context.Context, in *rekognition.StartStreamProcessorInput, _ ...request.Option) (*rekognition.StartStreamProcessorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartStreamProcessor cancelled", ctx.Err())
	default:
		return d.StartStreamProcessor(in)
	}
}

func (d *RekognitionDouble) StopProjectVersion(i0 *rekognition.StopProjectVersionInput) (r0 *rekognition.StopProjectVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopProjectVersion", i0)
	r0, _ = returns[0].(*rekognition.StopProjectVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StopProjectVersionRequest(i0 *rekognition.StopProjectVersionInput) (r0 *request.Request, r1 *rekognition.StopProjectVersionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopProjectVersionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StopProjectVersionOutput)
	return
}

func (d *RekognitionDouble) StopProjectVersionWithContext(i0 context.Context, i1 *rekognition.StopProjectVersionInput, i2 ...request.Option) (r0 *rekognition.StopProjectVersionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopProjectVersionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StopProjectVersionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStopProjectVersionWithContext(ctx context.Context, in *rekognition.StopProjectVersionInput, _ ...request.Option) (*rekognition.StopProjectVersionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopProjectVersion cancelled", ctx.Err())
	default:
		return d.StopProjectVersion(in)
	}
}

func (d *RekognitionDouble) StopStreamProcessor(i0 *rekognition.StopStreamProcessorInput) (r0 *rekognition.StopStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStreamProcessor", i0)
	r0, _ = returns[0].(*rekognition.StopStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) StopStreamProcessorRequest(i0 *rekognition.StopStreamProcessorInput) (r0 *request.Request, r1 *rekognition.StopStreamProcessorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStreamProcessorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*rekognition.StopStreamProcessorOutput)
	return
}

func (d *RekognitionDouble) StopStreamProcessorWithContext(i0 context.Context, i1 *rekognition.StopStreamProcessorInput, i2 ...request.Option) (r0 *rekognition.StopStreamProcessorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopStreamProcessorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*rekognition.StopStreamProcessorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *RekognitionDouble) fakeStopStreamProcessorWithContext(ctx context.Context, in *rekognition.StopStreamProcessorInput, _ ...request.Option) (*rekognition.StopStreamProcessorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopStreamProcessor cancelled", ctx.Err())
	default:
		return d.StopStreamProcessor(in)
	}
}

func (d *RekognitionDouble) WaitUntilProjectVersionRunning(i0 *rekognition.DescribeProjectVersionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilProjectVersionRunning", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeWaitUntilProjectVersionRunning(in *rekognition.DescribeProjectVersionsInput) error {
	return d.WaitUntil("ProjectVersionRunning", waiters, in)
}

func (d *RekognitionDouble) WaitUntilProjectVersionRunningWithContext(i0 context.Context, i1 *rekognition.DescribeProjectVersionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilProjectVersionRunningWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeWaitUntilProjectVersionRunningWithContext(ctx context.Context, in *rekognition.DescribeProjectVersionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ProjectVersionRunning", waiters, ctx, in, waitOption...)
}

func (d *RekognitionDouble) WaitUntilProjectVersionTrainingCompleted(i0 *rekognition.DescribeProjectVersionsInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilProjectVersionTrainingCompleted", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeWaitUntilProjectVersionTrainingCompleted(in *rekognition.DescribeProjectVersionsInput) error {
	return d.WaitUntil("ProjectVersionTrainingCompleted", waiters, in)
}

func (d *RekognitionDouble) WaitUntilProjectVersionTrainingCompletedWithContext(i0 context.Context, i1 *rekognition.DescribeProjectVersionsInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilProjectVersionTrainingCompletedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *RekognitionDouble) fakeWaitUntilProjectVersionTrainingCompletedWithContext(ctx context.Context, in *rekognition.DescribeProjectVersionsInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ProjectVersionTrainingCompleted", waiters, ctx, in, waitOption...)
}
