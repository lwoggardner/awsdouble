// Code generated by go awsdoublegen; DO NOT EDIT.
// This file was generated at 2020-01-29T21:22:05+11:00
package emrdouble

import (
	"time"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/lwoggardner/awsdouble"
)

var waiters = map[string]*awsdouble.Waiter{

	"ClusterRunning": &awsdouble.Waiter{
		OperationName: "DescribeCluster",
		Waiter: request.Waiter{
			Name:        "WaitUntilClusterRunning",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Cluster.Status.State",
					Expected: "RUNNING",
				},
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Cluster.Status.State",
					Expected: "WAITING",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Cluster.Status.State",
					Expected: "TERMINATING",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Cluster.Status.State",
					Expected: "TERMINATED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Cluster.Status.State",
					Expected: "TERMINATED_WITH_ERRORS",
				},
			},
		},
	},

	"ClusterTerminated": &awsdouble.Waiter{
		OperationName: "DescribeCluster",
		Waiter: request.Waiter{
			Name:        "WaitUntilClusterTerminated",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Cluster.Status.State",
					Expected: "TERMINATED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Cluster.Status.State",
					Expected: "TERMINATED_WITH_ERRORS",
				},
			},
		},
	},

	"StepComplete": &awsdouble.Waiter{
		OperationName: "DescribeStep",
		Waiter: request.Waiter{
			Name:        "WaitUntilStepComplete",
			MaxAttempts: 60,
			Delay:       request.ConstantWaiterDelay(30 * time.Second),
			Acceptors: []request.WaiterAcceptor{
				{
					State:   request.SuccessWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Step.Status.State",
					Expected: "COMPLETED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Step.Status.State",
					Expected: "FAILED",
				},
				{
					State:   request.FailureWaiterState,
					Matcher: request.PathWaiterMatch, Argument: "Step.Status.State",
					Expected: "CANCELLED",
				},
			},
		},
	},
}
