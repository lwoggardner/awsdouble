// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:12:45+11:00

// Package emrdouble provides a TestDouble implementation of emriface.EMRAPI
package emrdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/emr"
	"github.com/aws/aws-sdk-go/service/emr/emriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// EMRDouble is TestDouble for emriface.EMRAPI
type EMRDouble struct {
	emriface.EMRAPI
	*awsdouble.AWSTestDouble
}

// Constructor for EMRDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *EMRDouble {
	result := &EMRDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*emriface.EMRAPI)(nil), configurators...)
	return result
}

func (d *EMRDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *EMRDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AddInstanceFleetWithContext":
		return m.Fake(d.fakeAddInstanceFleetWithContext)

	case "AddInstanceGroupsWithContext":
		return m.Fake(d.fakeAddInstanceGroupsWithContext)

	case "AddJobFlowStepsWithContext":
		return m.Fake(d.fakeAddJobFlowStepsWithContext)

	case "AddTagsWithContext":
		return m.Fake(d.fakeAddTagsWithContext)

	case "CancelStepsWithContext":
		return m.Fake(d.fakeCancelStepsWithContext)

	case "CreateSecurityConfigurationWithContext":
		return m.Fake(d.fakeCreateSecurityConfigurationWithContext)

	case "DeleteSecurityConfigurationWithContext":
		return m.Fake(d.fakeDeleteSecurityConfigurationWithContext)

	case "DescribeClusterWithContext":
		return m.Fake(d.fakeDescribeClusterWithContext)

	case "DescribeJobFlowsWithContext":
		return m.Fake(d.fakeDescribeJobFlowsWithContext)

	case "DescribeSecurityConfigurationWithContext":
		return m.Fake(d.fakeDescribeSecurityConfigurationWithContext)

	case "DescribeStepWithContext":
		return m.Fake(d.fakeDescribeStepWithContext)

	case "GetBlockPublicAccessConfigurationWithContext":
		return m.Fake(d.fakeGetBlockPublicAccessConfigurationWithContext)

	case "ListBootstrapActionsPages":
		return m.Fake(d.fakeListBootstrapActionsPages)

	case "ListBootstrapActionsPagesWithContext":
		return m.Fake(d.fakeListBootstrapActionsPagesWithContext)

	case "ListBootstrapActionsWithContext":
		return m.Fake(d.fakeListBootstrapActionsWithContext)

	case "ListClustersPages":
		return m.Fake(d.fakeListClustersPages)

	case "ListClustersPagesWithContext":
		return m.Fake(d.fakeListClustersPagesWithContext)

	case "ListClustersWithContext":
		return m.Fake(d.fakeListClustersWithContext)

	case "ListInstanceFleetsPages":
		return m.Fake(d.fakeListInstanceFleetsPages)

	case "ListInstanceFleetsPagesWithContext":
		return m.Fake(d.fakeListInstanceFleetsPagesWithContext)

	case "ListInstanceFleetsWithContext":
		return m.Fake(d.fakeListInstanceFleetsWithContext)

	case "ListInstanceGroupsPages":
		return m.Fake(d.fakeListInstanceGroupsPages)

	case "ListInstanceGroupsPagesWithContext":
		return m.Fake(d.fakeListInstanceGroupsPagesWithContext)

	case "ListInstanceGroupsWithContext":
		return m.Fake(d.fakeListInstanceGroupsWithContext)

	case "ListInstancesPages":
		return m.Fake(d.fakeListInstancesPages)

	case "ListInstancesPagesWithContext":
		return m.Fake(d.fakeListInstancesPagesWithContext)

	case "ListInstancesWithContext":
		return m.Fake(d.fakeListInstancesWithContext)

	case "ListSecurityConfigurationsPages":
		return m.Fake(d.fakeListSecurityConfigurationsPages)

	case "ListSecurityConfigurationsPagesWithContext":
		return m.Fake(d.fakeListSecurityConfigurationsPagesWithContext)

	case "ListSecurityConfigurationsWithContext":
		return m.Fake(d.fakeListSecurityConfigurationsWithContext)

	case "ListStepsPages":
		return m.Fake(d.fakeListStepsPages)

	case "ListStepsPagesWithContext":
		return m.Fake(d.fakeListStepsPagesWithContext)

	case "ListStepsWithContext":
		return m.Fake(d.fakeListStepsWithContext)

	case "ModifyClusterWithContext":
		return m.Fake(d.fakeModifyClusterWithContext)

	case "ModifyInstanceFleetWithContext":
		return m.Fake(d.fakeModifyInstanceFleetWithContext)

	case "ModifyInstanceGroupsWithContext":
		return m.Fake(d.fakeModifyInstanceGroupsWithContext)

	case "PutAutoScalingPolicyWithContext":
		return m.Fake(d.fakePutAutoScalingPolicyWithContext)

	case "PutBlockPublicAccessConfigurationWithContext":
		return m.Fake(d.fakePutBlockPublicAccessConfigurationWithContext)

	case "RemoveAutoScalingPolicyWithContext":
		return m.Fake(d.fakeRemoveAutoScalingPolicyWithContext)

	case "RemoveTagsWithContext":
		return m.Fake(d.fakeRemoveTagsWithContext)

	case "RunJobFlowWithContext":
		return m.Fake(d.fakeRunJobFlowWithContext)

	case "SetTerminationProtectionWithContext":
		return m.Fake(d.fakeSetTerminationProtectionWithContext)

	case "SetVisibleToAllUsersWithContext":
		return m.Fake(d.fakeSetVisibleToAllUsersWithContext)

	case "TerminateJobFlowsWithContext":
		return m.Fake(d.fakeTerminateJobFlowsWithContext)

	case "WaitUntilClusterRunning":
		return m.Fake(d.fakeWaitUntilClusterRunning)

	case "WaitUntilClusterRunningWithContext":
		return m.Fake(d.fakeWaitUntilClusterRunningWithContext)

	case "WaitUntilClusterTerminated":
		return m.Fake(d.fakeWaitUntilClusterTerminated)

	case "WaitUntilClusterTerminatedWithContext":
		return m.Fake(d.fakeWaitUntilClusterTerminatedWithContext)

	case "WaitUntilStepComplete":
		return m.Fake(d.fakeWaitUntilStepComplete)

	case "WaitUntilStepCompleteWithContext":
		return m.Fake(d.fakeWaitUntilStepCompleteWithContext)

	default:
		return nil
	}
}

func (d *EMRDouble) AddInstanceFleet(i0 *emr.AddInstanceFleetInput) (r0 *emr.AddInstanceFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddInstanceFleet", i0)
	r0, _ = returns[0].(*emr.AddInstanceFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) AddInstanceFleetRequest(i0 *emr.AddInstanceFleetInput) (r0 *request.Request, r1 *emr.AddInstanceFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddInstanceFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.AddInstanceFleetOutput)
	return
}

func (d *EMRDouble) AddInstanceFleetWithContext(i0 context.Context, i1 *emr.AddInstanceFleetInput, i2 ...request.Option) (r0 *emr.AddInstanceFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddInstanceFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.AddInstanceFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeAddInstanceFleetWithContext(ctx context.Context, in *emr.AddInstanceFleetInput, _ ...request.Option) (*emr.AddInstanceFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddInstanceFleet cancelled", ctx.Err())
	default:
		return d.AddInstanceFleet(in)
	}
}

func (d *EMRDouble) AddInstanceGroups(i0 *emr.AddInstanceGroupsInput) (r0 *emr.AddInstanceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddInstanceGroups", i0)
	r0, _ = returns[0].(*emr.AddInstanceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) AddInstanceGroupsRequest(i0 *emr.AddInstanceGroupsInput) (r0 *request.Request, r1 *emr.AddInstanceGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddInstanceGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.AddInstanceGroupsOutput)
	return
}

func (d *EMRDouble) AddInstanceGroupsWithContext(i0 context.Context, i1 *emr.AddInstanceGroupsInput, i2 ...request.Option) (r0 *emr.AddInstanceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddInstanceGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.AddInstanceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeAddInstanceGroupsWithContext(ctx context.Context, in *emr.AddInstanceGroupsInput, _ ...request.Option) (*emr.AddInstanceGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddInstanceGroups cancelled", ctx.Err())
	default:
		return d.AddInstanceGroups(in)
	}
}

func (d *EMRDouble) AddJobFlowSteps(i0 *emr.AddJobFlowStepsInput) (r0 *emr.AddJobFlowStepsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddJobFlowSteps", i0)
	r0, _ = returns[0].(*emr.AddJobFlowStepsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) AddJobFlowStepsRequest(i0 *emr.AddJobFlowStepsInput) (r0 *request.Request, r1 *emr.AddJobFlowStepsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddJobFlowStepsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.AddJobFlowStepsOutput)
	return
}

func (d *EMRDouble) AddJobFlowStepsWithContext(i0 context.Context, i1 *emr.AddJobFlowStepsInput, i2 ...request.Option) (r0 *emr.AddJobFlowStepsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddJobFlowStepsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.AddJobFlowStepsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeAddJobFlowStepsWithContext(ctx context.Context, in *emr.AddJobFlowStepsInput, _ ...request.Option) (*emr.AddJobFlowStepsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddJobFlowSteps cancelled", ctx.Err())
	default:
		return d.AddJobFlowSteps(in)
	}
}

func (d *EMRDouble) AddTags(i0 *emr.AddTagsInput) (r0 *emr.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTags", i0)
	r0, _ = returns[0].(*emr.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) AddTagsRequest(i0 *emr.AddTagsInput) (r0 *request.Request, r1 *emr.AddTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.AddTagsOutput)
	return
}

func (d *EMRDouble) AddTagsWithContext(i0 context.Context, i1 *emr.AddTagsInput, i2 ...request.Option) (r0 *emr.AddTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AddTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.AddTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeAddTagsWithContext(ctx context.Context, in *emr.AddTagsInput, _ ...request.Option) (*emr.AddTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AddTags cancelled", ctx.Err())
	default:
		return d.AddTags(in)
	}
}

func (d *EMRDouble) CancelSteps(i0 *emr.CancelStepsInput) (r0 *emr.CancelStepsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelSteps", i0)
	r0, _ = returns[0].(*emr.CancelStepsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) CancelStepsRequest(i0 *emr.CancelStepsInput) (r0 *request.Request, r1 *emr.CancelStepsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelStepsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.CancelStepsOutput)
	return
}

func (d *EMRDouble) CancelStepsWithContext(i0 context.Context, i1 *emr.CancelStepsInput, i2 ...request.Option) (r0 *emr.CancelStepsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CancelStepsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.CancelStepsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeCancelStepsWithContext(ctx context.Context, in *emr.CancelStepsInput, _ ...request.Option) (*emr.CancelStepsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CancelSteps cancelled", ctx.Err())
	default:
		return d.CancelSteps(in)
	}
}

func (d *EMRDouble) CreateSecurityConfiguration(i0 *emr.CreateSecurityConfigurationInput) (r0 *emr.CreateSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityConfiguration", i0)
	r0, _ = returns[0].(*emr.CreateSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) CreateSecurityConfigurationRequest(i0 *emr.CreateSecurityConfigurationInput) (r0 *request.Request, r1 *emr.CreateSecurityConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.CreateSecurityConfigurationOutput)
	return
}

func (d *EMRDouble) CreateSecurityConfigurationWithContext(i0 context.Context, i1 *emr.CreateSecurityConfigurationInput, i2 ...request.Option) (r0 *emr.CreateSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSecurityConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.CreateSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeCreateSecurityConfigurationWithContext(ctx context.Context, in *emr.CreateSecurityConfigurationInput, _ ...request.Option) (*emr.CreateSecurityConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSecurityConfiguration cancelled", ctx.Err())
	default:
		return d.CreateSecurityConfiguration(in)
	}
}

func (d *EMRDouble) DeleteSecurityConfiguration(i0 *emr.DeleteSecurityConfigurationInput) (r0 *emr.DeleteSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityConfiguration", i0)
	r0, _ = returns[0].(*emr.DeleteSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) DeleteSecurityConfigurationRequest(i0 *emr.DeleteSecurityConfigurationInput) (r0 *request.Request, r1 *emr.DeleteSecurityConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.DeleteSecurityConfigurationOutput)
	return
}

func (d *EMRDouble) DeleteSecurityConfigurationWithContext(i0 context.Context, i1 *emr.DeleteSecurityConfigurationInput, i2 ...request.Option) (r0 *emr.DeleteSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSecurityConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.DeleteSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeDeleteSecurityConfigurationWithContext(ctx context.Context, in *emr.DeleteSecurityConfigurationInput, _ ...request.Option) (*emr.DeleteSecurityConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSecurityConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteSecurityConfiguration(in)
	}
}

func (d *EMRDouble) DescribeCluster(i0 *emr.DescribeClusterInput) (r0 *emr.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeCluster", i0)
	r0, _ = returns[0].(*emr.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) DescribeClusterRequest(i0 *emr.DescribeClusterInput) (r0 *request.Request, r1 *emr.DescribeClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.DescribeClusterOutput)
	return
}

func (d *EMRDouble) DescribeClusterWithContext(i0 context.Context, i1 *emr.DescribeClusterInput, i2 ...request.Option) (r0 *emr.DescribeClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.DescribeClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeDescribeClusterWithContext(ctx context.Context, in *emr.DescribeClusterInput, _ ...request.Option) (*emr.DescribeClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeCluster cancelled", ctx.Err())
	default:
		return d.DescribeCluster(in)
	}
}

func (d *EMRDouble) DescribeJobFlows(i0 *emr.DescribeJobFlowsInput) (r0 *emr.DescribeJobFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobFlows", i0)
	r0, _ = returns[0].(*emr.DescribeJobFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) DescribeJobFlowsRequest(i0 *emr.DescribeJobFlowsInput) (r0 *request.Request, r1 *emr.DescribeJobFlowsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobFlowsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.DescribeJobFlowsOutput)
	return
}

func (d *EMRDouble) DescribeJobFlowsWithContext(i0 context.Context, i1 *emr.DescribeJobFlowsInput, i2 ...request.Option) (r0 *emr.DescribeJobFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeJobFlowsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.DescribeJobFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeDescribeJobFlowsWithContext(ctx context.Context, in *emr.DescribeJobFlowsInput, _ ...request.Option) (*emr.DescribeJobFlowsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeJobFlows cancelled", ctx.Err())
	default:
		return d.DescribeJobFlows(in)
	}
}

func (d *EMRDouble) DescribeSecurityConfiguration(i0 *emr.DescribeSecurityConfigurationInput) (r0 *emr.DescribeSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityConfiguration", i0)
	r0, _ = returns[0].(*emr.DescribeSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) DescribeSecurityConfigurationRequest(i0 *emr.DescribeSecurityConfigurationInput) (r0 *request.Request, r1 *emr.DescribeSecurityConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.DescribeSecurityConfigurationOutput)
	return
}

func (d *EMRDouble) DescribeSecurityConfigurationWithContext(i0 context.Context, i1 *emr.DescribeSecurityConfigurationInput, i2 ...request.Option) (r0 *emr.DescribeSecurityConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeSecurityConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.DescribeSecurityConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeDescribeSecurityConfigurationWithContext(ctx context.Context, in *emr.DescribeSecurityConfigurationInput, _ ...request.Option) (*emr.DescribeSecurityConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeSecurityConfiguration cancelled", ctx.Err())
	default:
		return d.DescribeSecurityConfiguration(in)
	}
}

func (d *EMRDouble) DescribeStep(i0 *emr.DescribeStepInput) (r0 *emr.DescribeStepOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStep", i0)
	r0, _ = returns[0].(*emr.DescribeStepOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) DescribeStepRequest(i0 *emr.DescribeStepInput) (r0 *request.Request, r1 *emr.DescribeStepOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStepRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.DescribeStepOutput)
	return
}

func (d *EMRDouble) DescribeStepWithContext(i0 context.Context, i1 *emr.DescribeStepInput, i2 ...request.Option) (r0 *emr.DescribeStepOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeStepWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.DescribeStepOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeDescribeStepWithContext(ctx context.Context, in *emr.DescribeStepInput, _ ...request.Option) (*emr.DescribeStepOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeStep cancelled", ctx.Err())
	default:
		return d.DescribeStep(in)
	}
}

func (d *EMRDouble) GetBlockPublicAccessConfiguration(i0 *emr.GetBlockPublicAccessConfigurationInput) (r0 *emr.GetBlockPublicAccessConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlockPublicAccessConfiguration", i0)
	r0, _ = returns[0].(*emr.GetBlockPublicAccessConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) GetBlockPublicAccessConfigurationRequest(i0 *emr.GetBlockPublicAccessConfigurationInput) (r0 *request.Request, r1 *emr.GetBlockPublicAccessConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlockPublicAccessConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.GetBlockPublicAccessConfigurationOutput)
	return
}

func (d *EMRDouble) GetBlockPublicAccessConfigurationWithContext(i0 context.Context, i1 *emr.GetBlockPublicAccessConfigurationInput, i2 ...request.Option) (r0 *emr.GetBlockPublicAccessConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetBlockPublicAccessConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.GetBlockPublicAccessConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeGetBlockPublicAccessConfigurationWithContext(ctx context.Context, in *emr.GetBlockPublicAccessConfigurationInput, _ ...request.Option) (*emr.GetBlockPublicAccessConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetBlockPublicAccessConfiguration cancelled", ctx.Err())
	default:
		return d.GetBlockPublicAccessConfiguration(in)
	}
}

func (d *EMRDouble) ListBootstrapActions(i0 *emr.ListBootstrapActionsInput) (r0 *emr.ListBootstrapActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBootstrapActions", i0)
	r0, _ = returns[0].(*emr.ListBootstrapActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ListBootstrapActionsPages(i0 *emr.ListBootstrapActionsInput, i1 func(*emr.ListBootstrapActionsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBootstrapActionsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListBootstrapActionsPages(in *emr.ListBootstrapActionsInput, pager func(*emr.ListBootstrapActionsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListBootstrapActions", paginators, in, pager)
}

func (d *EMRDouble) ListBootstrapActionsPagesWithContext(i0 context.Context, i1 *emr.ListBootstrapActionsInput, i2 func(*emr.ListBootstrapActionsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBootstrapActionsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListBootstrapActionsPagesWithContext(ctx context.Context, in *emr.ListBootstrapActionsInput, pager func(*emr.ListBootstrapActionsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListBootstrapActions", paginators, ctx, in, pager, options...)
}

func (d *EMRDouble) ListBootstrapActionsRequest(i0 *emr.ListBootstrapActionsInput) (r0 *request.Request, r1 *emr.ListBootstrapActionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBootstrapActionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ListBootstrapActionsOutput)
	return
}

func (d *EMRDouble) ListBootstrapActionsWithContext(i0 context.Context, i1 *emr.ListBootstrapActionsInput, i2 ...request.Option) (r0 *emr.ListBootstrapActionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListBootstrapActionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ListBootstrapActionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeListBootstrapActionsWithContext(ctx context.Context, in *emr.ListBootstrapActionsInput, _ ...request.Option) (*emr.ListBootstrapActionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListBootstrapActions cancelled", ctx.Err())
	default:
		return d.ListBootstrapActions(in)
	}
}

func (d *EMRDouble) ListClusters(i0 *emr.ListClustersInput) (r0 *emr.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClusters", i0)
	r0, _ = returns[0].(*emr.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ListClustersPages(i0 *emr.ListClustersInput, i1 func(*emr.ListClustersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListClustersPages(in *emr.ListClustersInput, pager func(*emr.ListClustersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListClusters", paginators, in, pager)
}

func (d *EMRDouble) ListClustersPagesWithContext(i0 context.Context, i1 *emr.ListClustersInput, i2 func(*emr.ListClustersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListClustersPagesWithContext(ctx context.Context, in *emr.ListClustersInput, pager func(*emr.ListClustersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListClusters", paginators, ctx, in, pager, options...)
}

func (d *EMRDouble) ListClustersRequest(i0 *emr.ListClustersInput) (r0 *request.Request, r1 *emr.ListClustersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ListClustersOutput)
	return
}

func (d *EMRDouble) ListClustersWithContext(i0 context.Context, i1 *emr.ListClustersInput, i2 ...request.Option) (r0 *emr.ListClustersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListClustersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ListClustersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeListClustersWithContext(ctx context.Context, in *emr.ListClustersInput, _ ...request.Option) (*emr.ListClustersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListClusters cancelled", ctx.Err())
	default:
		return d.ListClusters(in)
	}
}

func (d *EMRDouble) ListInstanceFleets(i0 *emr.ListInstanceFleetsInput) (r0 *emr.ListInstanceFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceFleets", i0)
	r0, _ = returns[0].(*emr.ListInstanceFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ListInstanceFleetsPages(i0 *emr.ListInstanceFleetsInput, i1 func(*emr.ListInstanceFleetsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceFleetsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListInstanceFleetsPages(in *emr.ListInstanceFleetsInput, pager func(*emr.ListInstanceFleetsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInstanceFleets", paginators, in, pager)
}

func (d *EMRDouble) ListInstanceFleetsPagesWithContext(i0 context.Context, i1 *emr.ListInstanceFleetsInput, i2 func(*emr.ListInstanceFleetsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceFleetsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListInstanceFleetsPagesWithContext(ctx context.Context, in *emr.ListInstanceFleetsInput, pager func(*emr.ListInstanceFleetsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInstanceFleets", paginators, ctx, in, pager, options...)
}

func (d *EMRDouble) ListInstanceFleetsRequest(i0 *emr.ListInstanceFleetsInput) (r0 *request.Request, r1 *emr.ListInstanceFleetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceFleetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ListInstanceFleetsOutput)
	return
}

func (d *EMRDouble) ListInstanceFleetsWithContext(i0 context.Context, i1 *emr.ListInstanceFleetsInput, i2 ...request.Option) (r0 *emr.ListInstanceFleetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceFleetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ListInstanceFleetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeListInstanceFleetsWithContext(ctx context.Context, in *emr.ListInstanceFleetsInput, _ ...request.Option) (*emr.ListInstanceFleetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInstanceFleets cancelled", ctx.Err())
	default:
		return d.ListInstanceFleets(in)
	}
}

func (d *EMRDouble) ListInstanceGroups(i0 *emr.ListInstanceGroupsInput) (r0 *emr.ListInstanceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceGroups", i0)
	r0, _ = returns[0].(*emr.ListInstanceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ListInstanceGroupsPages(i0 *emr.ListInstanceGroupsInput, i1 func(*emr.ListInstanceGroupsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceGroupsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListInstanceGroupsPages(in *emr.ListInstanceGroupsInput, pager func(*emr.ListInstanceGroupsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInstanceGroups", paginators, in, pager)
}

func (d *EMRDouble) ListInstanceGroupsPagesWithContext(i0 context.Context, i1 *emr.ListInstanceGroupsInput, i2 func(*emr.ListInstanceGroupsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceGroupsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListInstanceGroupsPagesWithContext(ctx context.Context, in *emr.ListInstanceGroupsInput, pager func(*emr.ListInstanceGroupsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInstanceGroups", paginators, ctx, in, pager, options...)
}

func (d *EMRDouble) ListInstanceGroupsRequest(i0 *emr.ListInstanceGroupsInput) (r0 *request.Request, r1 *emr.ListInstanceGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ListInstanceGroupsOutput)
	return
}

func (d *EMRDouble) ListInstanceGroupsWithContext(i0 context.Context, i1 *emr.ListInstanceGroupsInput, i2 ...request.Option) (r0 *emr.ListInstanceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstanceGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ListInstanceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeListInstanceGroupsWithContext(ctx context.Context, in *emr.ListInstanceGroupsInput, _ ...request.Option) (*emr.ListInstanceGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInstanceGroups cancelled", ctx.Err())
	default:
		return d.ListInstanceGroups(in)
	}
}

func (d *EMRDouble) ListInstances(i0 *emr.ListInstancesInput) (r0 *emr.ListInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstances", i0)
	r0, _ = returns[0].(*emr.ListInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ListInstancesPages(i0 *emr.ListInstancesInput, i1 func(*emr.ListInstancesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListInstancesPages(in *emr.ListInstancesInput, pager func(*emr.ListInstancesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListInstances", paginators, in, pager)
}

func (d *EMRDouble) ListInstancesPagesWithContext(i0 context.Context, i1 *emr.ListInstancesInput, i2 func(*emr.ListInstancesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListInstancesPagesWithContext(ctx context.Context, in *emr.ListInstancesInput, pager func(*emr.ListInstancesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListInstances", paginators, ctx, in, pager, options...)
}

func (d *EMRDouble) ListInstancesRequest(i0 *emr.ListInstancesInput) (r0 *request.Request, r1 *emr.ListInstancesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ListInstancesOutput)
	return
}

func (d *EMRDouble) ListInstancesWithContext(i0 context.Context, i1 *emr.ListInstancesInput, i2 ...request.Option) (r0 *emr.ListInstancesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListInstancesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ListInstancesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeListInstancesWithContext(ctx context.Context, in *emr.ListInstancesInput, _ ...request.Option) (*emr.ListInstancesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListInstances cancelled", ctx.Err())
	default:
		return d.ListInstances(in)
	}
}

func (d *EMRDouble) ListSecurityConfigurations(i0 *emr.ListSecurityConfigurationsInput) (r0 *emr.ListSecurityConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityConfigurations", i0)
	r0, _ = returns[0].(*emr.ListSecurityConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ListSecurityConfigurationsPages(i0 *emr.ListSecurityConfigurationsInput, i1 func(*emr.ListSecurityConfigurationsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityConfigurationsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListSecurityConfigurationsPages(in *emr.ListSecurityConfigurationsInput, pager func(*emr.ListSecurityConfigurationsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSecurityConfigurations", paginators, in, pager)
}

func (d *EMRDouble) ListSecurityConfigurationsPagesWithContext(i0 context.Context, i1 *emr.ListSecurityConfigurationsInput, i2 func(*emr.ListSecurityConfigurationsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityConfigurationsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListSecurityConfigurationsPagesWithContext(ctx context.Context, in *emr.ListSecurityConfigurationsInput, pager func(*emr.ListSecurityConfigurationsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSecurityConfigurations", paginators, ctx, in, pager, options...)
}

func (d *EMRDouble) ListSecurityConfigurationsRequest(i0 *emr.ListSecurityConfigurationsInput) (r0 *request.Request, r1 *emr.ListSecurityConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ListSecurityConfigurationsOutput)
	return
}

func (d *EMRDouble) ListSecurityConfigurationsWithContext(i0 context.Context, i1 *emr.ListSecurityConfigurationsInput, i2 ...request.Option) (r0 *emr.ListSecurityConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSecurityConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ListSecurityConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeListSecurityConfigurationsWithContext(ctx context.Context, in *emr.ListSecurityConfigurationsInput, _ ...request.Option) (*emr.ListSecurityConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSecurityConfigurations cancelled", ctx.Err())
	default:
		return d.ListSecurityConfigurations(in)
	}
}

func (d *EMRDouble) ListSteps(i0 *emr.ListStepsInput) (r0 *emr.ListStepsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSteps", i0)
	r0, _ = returns[0].(*emr.ListStepsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ListStepsPages(i0 *emr.ListStepsInput, i1 func(*emr.ListStepsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStepsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListStepsPages(in *emr.ListStepsInput, pager func(*emr.ListStepsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("ListSteps", paginators, in, pager)
}

func (d *EMRDouble) ListStepsPagesWithContext(i0 context.Context, i1 *emr.ListStepsInput, i2 func(*emr.ListStepsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStepsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeListStepsPagesWithContext(ctx context.Context, in *emr.ListStepsInput, pager func(*emr.ListStepsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("ListSteps", paginators, ctx, in, pager, options...)
}

func (d *EMRDouble) ListStepsRequest(i0 *emr.ListStepsInput) (r0 *request.Request, r1 *emr.ListStepsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStepsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ListStepsOutput)
	return
}

func (d *EMRDouble) ListStepsWithContext(i0 context.Context, i1 *emr.ListStepsInput, i2 ...request.Option) (r0 *emr.ListStepsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListStepsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ListStepsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeListStepsWithContext(ctx context.Context, in *emr.ListStepsInput, _ ...request.Option) (*emr.ListStepsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSteps cancelled", ctx.Err())
	default:
		return d.ListSteps(in)
	}
}

func (d *EMRDouble) ModifyCluster(i0 *emr.ModifyClusterInput) (r0 *emr.ModifyClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyCluster", i0)
	r0, _ = returns[0].(*emr.ModifyClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ModifyClusterRequest(i0 *emr.ModifyClusterInput) (r0 *request.Request, r1 *emr.ModifyClusterOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ModifyClusterOutput)
	return
}

func (d *EMRDouble) ModifyClusterWithContext(i0 context.Context, i1 *emr.ModifyClusterInput, i2 ...request.Option) (r0 *emr.ModifyClusterOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClusterWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ModifyClusterOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeModifyClusterWithContext(ctx context.Context, in *emr.ModifyClusterInput, _ ...request.Option) (*emr.ModifyClusterOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyCluster cancelled", ctx.Err())
	default:
		return d.ModifyCluster(in)
	}
}

func (d *EMRDouble) ModifyInstanceFleet(i0 *emr.ModifyInstanceFleetInput) (r0 *emr.ModifyInstanceFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceFleet", i0)
	r0, _ = returns[0].(*emr.ModifyInstanceFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ModifyInstanceFleetRequest(i0 *emr.ModifyInstanceFleetInput) (r0 *request.Request, r1 *emr.ModifyInstanceFleetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceFleetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ModifyInstanceFleetOutput)
	return
}

func (d *EMRDouble) ModifyInstanceFleetWithContext(i0 context.Context, i1 *emr.ModifyInstanceFleetInput, i2 ...request.Option) (r0 *emr.ModifyInstanceFleetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceFleetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ModifyInstanceFleetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeModifyInstanceFleetWithContext(ctx context.Context, in *emr.ModifyInstanceFleetInput, _ ...request.Option) (*emr.ModifyInstanceFleetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstanceFleet cancelled", ctx.Err())
	default:
		return d.ModifyInstanceFleet(in)
	}
}

func (d *EMRDouble) ModifyInstanceGroups(i0 *emr.ModifyInstanceGroupsInput) (r0 *emr.ModifyInstanceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceGroups", i0)
	r0, _ = returns[0].(*emr.ModifyInstanceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) ModifyInstanceGroupsRequest(i0 *emr.ModifyInstanceGroupsInput) (r0 *request.Request, r1 *emr.ModifyInstanceGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.ModifyInstanceGroupsOutput)
	return
}

func (d *EMRDouble) ModifyInstanceGroupsWithContext(i0 context.Context, i1 *emr.ModifyInstanceGroupsInput, i2 ...request.Option) (r0 *emr.ModifyInstanceGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyInstanceGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.ModifyInstanceGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeModifyInstanceGroupsWithContext(ctx context.Context, in *emr.ModifyInstanceGroupsInput, _ ...request.Option) (*emr.ModifyInstanceGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyInstanceGroups cancelled", ctx.Err())
	default:
		return d.ModifyInstanceGroups(in)
	}
}

func (d *EMRDouble) PutAutoScalingPolicy(i0 *emr.PutAutoScalingPolicyInput) (r0 *emr.PutAutoScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAutoScalingPolicy", i0)
	r0, _ = returns[0].(*emr.PutAutoScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) PutAutoScalingPolicyRequest(i0 *emr.PutAutoScalingPolicyInput) (r0 *request.Request, r1 *emr.PutAutoScalingPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAutoScalingPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.PutAutoScalingPolicyOutput)
	return
}

func (d *EMRDouble) PutAutoScalingPolicyWithContext(i0 context.Context, i1 *emr.PutAutoScalingPolicyInput, i2 ...request.Option) (r0 *emr.PutAutoScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAutoScalingPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.PutAutoScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakePutAutoScalingPolicyWithContext(ctx context.Context, in *emr.PutAutoScalingPolicyInput, _ ...request.Option) (*emr.PutAutoScalingPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAutoScalingPolicy cancelled", ctx.Err())
	default:
		return d.PutAutoScalingPolicy(in)
	}
}

func (d *EMRDouble) PutBlockPublicAccessConfiguration(i0 *emr.PutBlockPublicAccessConfigurationInput) (r0 *emr.PutBlockPublicAccessConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBlockPublicAccessConfiguration", i0)
	r0, _ = returns[0].(*emr.PutBlockPublicAccessConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) PutBlockPublicAccessConfigurationRequest(i0 *emr.PutBlockPublicAccessConfigurationInput) (r0 *request.Request, r1 *emr.PutBlockPublicAccessConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBlockPublicAccessConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.PutBlockPublicAccessConfigurationOutput)
	return
}

func (d *EMRDouble) PutBlockPublicAccessConfigurationWithContext(i0 context.Context, i1 *emr.PutBlockPublicAccessConfigurationInput, i2 ...request.Option) (r0 *emr.PutBlockPublicAccessConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutBlockPublicAccessConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.PutBlockPublicAccessConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakePutBlockPublicAccessConfigurationWithContext(ctx context.Context, in *emr.PutBlockPublicAccessConfigurationInput, _ ...request.Option) (*emr.PutBlockPublicAccessConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutBlockPublicAccessConfiguration cancelled", ctx.Err())
	default:
		return d.PutBlockPublicAccessConfiguration(in)
	}
}

func (d *EMRDouble) RemoveAutoScalingPolicy(i0 *emr.RemoveAutoScalingPolicyInput) (r0 *emr.RemoveAutoScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAutoScalingPolicy", i0)
	r0, _ = returns[0].(*emr.RemoveAutoScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) RemoveAutoScalingPolicyRequest(i0 *emr.RemoveAutoScalingPolicyInput) (r0 *request.Request, r1 *emr.RemoveAutoScalingPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAutoScalingPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.RemoveAutoScalingPolicyOutput)
	return
}

func (d *EMRDouble) RemoveAutoScalingPolicyWithContext(i0 context.Context, i1 *emr.RemoveAutoScalingPolicyInput, i2 ...request.Option) (r0 *emr.RemoveAutoScalingPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveAutoScalingPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.RemoveAutoScalingPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeRemoveAutoScalingPolicyWithContext(ctx context.Context, in *emr.RemoveAutoScalingPolicyInput, _ ...request.Option) (*emr.RemoveAutoScalingPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveAutoScalingPolicy cancelled", ctx.Err())
	default:
		return d.RemoveAutoScalingPolicy(in)
	}
}

func (d *EMRDouble) RemoveTags(i0 *emr.RemoveTagsInput) (r0 *emr.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTags", i0)
	r0, _ = returns[0].(*emr.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) RemoveTagsRequest(i0 *emr.RemoveTagsInput) (r0 *request.Request, r1 *emr.RemoveTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.RemoveTagsOutput)
	return
}

func (d *EMRDouble) RemoveTagsWithContext(i0 context.Context, i1 *emr.RemoveTagsInput, i2 ...request.Option) (r0 *emr.RemoveTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RemoveTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.RemoveTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeRemoveTagsWithContext(ctx context.Context, in *emr.RemoveTagsInput, _ ...request.Option) (*emr.RemoveTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RemoveTags cancelled", ctx.Err())
	default:
		return d.RemoveTags(in)
	}
}

func (d *EMRDouble) RunJobFlow(i0 *emr.RunJobFlowInput) (r0 *emr.RunJobFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunJobFlow", i0)
	r0, _ = returns[0].(*emr.RunJobFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) RunJobFlowRequest(i0 *emr.RunJobFlowInput) (r0 *request.Request, r1 *emr.RunJobFlowOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunJobFlowRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.RunJobFlowOutput)
	return
}

func (d *EMRDouble) RunJobFlowWithContext(i0 context.Context, i1 *emr.RunJobFlowInput, i2 ...request.Option) (r0 *emr.RunJobFlowOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RunJobFlowWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.RunJobFlowOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeRunJobFlowWithContext(ctx context.Context, in *emr.RunJobFlowInput, _ ...request.Option) (*emr.RunJobFlowOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RunJobFlow cancelled", ctx.Err())
	default:
		return d.RunJobFlow(in)
	}
}

func (d *EMRDouble) SetTerminationProtection(i0 *emr.SetTerminationProtectionInput) (r0 *emr.SetTerminationProtectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTerminationProtection", i0)
	r0, _ = returns[0].(*emr.SetTerminationProtectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) SetTerminationProtectionRequest(i0 *emr.SetTerminationProtectionInput) (r0 *request.Request, r1 *emr.SetTerminationProtectionOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTerminationProtectionRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.SetTerminationProtectionOutput)
	return
}

func (d *EMRDouble) SetTerminationProtectionWithContext(i0 context.Context, i1 *emr.SetTerminationProtectionInput, i2 ...request.Option) (r0 *emr.SetTerminationProtectionOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetTerminationProtectionWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.SetTerminationProtectionOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeSetTerminationProtectionWithContext(ctx context.Context, in *emr.SetTerminationProtectionInput, _ ...request.Option) (*emr.SetTerminationProtectionOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetTerminationProtection cancelled", ctx.Err())
	default:
		return d.SetTerminationProtection(in)
	}
}

func (d *EMRDouble) SetVisibleToAllUsers(i0 *emr.SetVisibleToAllUsersInput) (r0 *emr.SetVisibleToAllUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVisibleToAllUsers", i0)
	r0, _ = returns[0].(*emr.SetVisibleToAllUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) SetVisibleToAllUsersRequest(i0 *emr.SetVisibleToAllUsersInput) (r0 *request.Request, r1 *emr.SetVisibleToAllUsersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVisibleToAllUsersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.SetVisibleToAllUsersOutput)
	return
}

func (d *EMRDouble) SetVisibleToAllUsersWithContext(i0 context.Context, i1 *emr.SetVisibleToAllUsersInput, i2 ...request.Option) (r0 *emr.SetVisibleToAllUsersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("SetVisibleToAllUsersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.SetVisibleToAllUsersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeSetVisibleToAllUsersWithContext(ctx context.Context, in *emr.SetVisibleToAllUsersInput, _ ...request.Option) (*emr.SetVisibleToAllUsersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "SetVisibleToAllUsers cancelled", ctx.Err())
	default:
		return d.SetVisibleToAllUsers(in)
	}
}

func (d *EMRDouble) TerminateJobFlows(i0 *emr.TerminateJobFlowsInput) (r0 *emr.TerminateJobFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateJobFlows", i0)
	r0, _ = returns[0].(*emr.TerminateJobFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) TerminateJobFlowsRequest(i0 *emr.TerminateJobFlowsInput) (r0 *request.Request, r1 *emr.TerminateJobFlowsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateJobFlowsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*emr.TerminateJobFlowsOutput)
	return
}

func (d *EMRDouble) TerminateJobFlowsWithContext(i0 context.Context, i1 *emr.TerminateJobFlowsInput, i2 ...request.Option) (r0 *emr.TerminateJobFlowsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateJobFlowsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*emr.TerminateJobFlowsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *EMRDouble) fakeTerminateJobFlowsWithContext(ctx context.Context, in *emr.TerminateJobFlowsInput, _ ...request.Option) (*emr.TerminateJobFlowsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateJobFlows cancelled", ctx.Err())
	default:
		return d.TerminateJobFlows(in)
	}
}

func (d *EMRDouble) WaitUntilClusterRunning(i0 *emr.DescribeClusterInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterRunning", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeWaitUntilClusterRunning(in *emr.DescribeClusterInput) error {
	return d.WaitUntil("ClusterRunning", waiters, in)
}

func (d *EMRDouble) WaitUntilClusterRunningWithContext(i0 context.Context, i1 *emr.DescribeClusterInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterRunningWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeWaitUntilClusterRunningWithContext(ctx context.Context, in *emr.DescribeClusterInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ClusterRunning", waiters, ctx, in, waitOption...)
}

func (d *EMRDouble) WaitUntilClusterTerminated(i0 *emr.DescribeClusterInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterTerminated", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeWaitUntilClusterTerminated(in *emr.DescribeClusterInput) error {
	return d.WaitUntil("ClusterTerminated", waiters, in)
}

func (d *EMRDouble) WaitUntilClusterTerminatedWithContext(i0 context.Context, i1 *emr.DescribeClusterInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilClusterTerminatedWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeWaitUntilClusterTerminatedWithContext(ctx context.Context, in *emr.DescribeClusterInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("ClusterTerminated", waiters, ctx, in, waitOption...)
}

func (d *EMRDouble) WaitUntilStepComplete(i0 *emr.DescribeStepInput) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStepComplete", i0)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeWaitUntilStepComplete(in *emr.DescribeStepInput) error {
	return d.WaitUntil("StepComplete", waiters, in)
}

func (d *EMRDouble) WaitUntilStepCompleteWithContext(i0 context.Context, i1 *emr.DescribeStepInput, i2 ...request.WaiterOption) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("WaitUntilStepCompleteWithContext", i0, i1, i2)
	r0, _ = returns[0].(error)
	return
}

func (d *EMRDouble) fakeWaitUntilStepCompleteWithContext(ctx context.Context, in *emr.DescribeStepInput, waitOption ...request.WaiterOption) error {
	return d.WaitWithContext("StepComplete", waiters, ctx, in, waitOption...)
}
