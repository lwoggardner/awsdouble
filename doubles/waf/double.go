// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:29+11:00

// Package wafdouble provides a TestDouble implementation of wafiface.WAFAPI
package wafdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/waf"
	"github.com/aws/aws-sdk-go/service/waf/wafiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// WAFDouble is TestDouble for wafiface.WAFAPI
type WAFDouble struct {
	wafiface.WAFAPI
	*awsdouble.AWSTestDouble
}

// Constructor for WAFDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *WAFDouble {
	result := &WAFDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*wafiface.WAFAPI)(nil), configurators...)
	return result
}

func (d *WAFDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *WAFDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateByteMatchSetWithContext":
		return m.Fake(d.fakeCreateByteMatchSetWithContext)

	case "CreateGeoMatchSetWithContext":
		return m.Fake(d.fakeCreateGeoMatchSetWithContext)

	case "CreateIPSetWithContext":
		return m.Fake(d.fakeCreateIPSetWithContext)

	case "CreateRateBasedRuleWithContext":
		return m.Fake(d.fakeCreateRateBasedRuleWithContext)

	case "CreateRegexMatchSetWithContext":
		return m.Fake(d.fakeCreateRegexMatchSetWithContext)

	case "CreateRegexPatternSetWithContext":
		return m.Fake(d.fakeCreateRegexPatternSetWithContext)

	case "CreateRuleGroupWithContext":
		return m.Fake(d.fakeCreateRuleGroupWithContext)

	case "CreateRuleWithContext":
		return m.Fake(d.fakeCreateRuleWithContext)

	case "CreateSizeConstraintSetWithContext":
		return m.Fake(d.fakeCreateSizeConstraintSetWithContext)

	case "CreateSqlInjectionMatchSetWithContext":
		return m.Fake(d.fakeCreateSqlInjectionMatchSetWithContext)

	case "CreateWebACLWithContext":
		return m.Fake(d.fakeCreateWebACLWithContext)

	case "CreateXssMatchSetWithContext":
		return m.Fake(d.fakeCreateXssMatchSetWithContext)

	case "DeleteByteMatchSetWithContext":
		return m.Fake(d.fakeDeleteByteMatchSetWithContext)

	case "DeleteGeoMatchSetWithContext":
		return m.Fake(d.fakeDeleteGeoMatchSetWithContext)

	case "DeleteIPSetWithContext":
		return m.Fake(d.fakeDeleteIPSetWithContext)

	case "DeleteLoggingConfigurationWithContext":
		return m.Fake(d.fakeDeleteLoggingConfigurationWithContext)

	case "DeletePermissionPolicyWithContext":
		return m.Fake(d.fakeDeletePermissionPolicyWithContext)

	case "DeleteRateBasedRuleWithContext":
		return m.Fake(d.fakeDeleteRateBasedRuleWithContext)

	case "DeleteRegexMatchSetWithContext":
		return m.Fake(d.fakeDeleteRegexMatchSetWithContext)

	case "DeleteRegexPatternSetWithContext":
		return m.Fake(d.fakeDeleteRegexPatternSetWithContext)

	case "DeleteRuleGroupWithContext":
		return m.Fake(d.fakeDeleteRuleGroupWithContext)

	case "DeleteRuleWithContext":
		return m.Fake(d.fakeDeleteRuleWithContext)

	case "DeleteSizeConstraintSetWithContext":
		return m.Fake(d.fakeDeleteSizeConstraintSetWithContext)

	case "DeleteSqlInjectionMatchSetWithContext":
		return m.Fake(d.fakeDeleteSqlInjectionMatchSetWithContext)

	case "DeleteWebACLWithContext":
		return m.Fake(d.fakeDeleteWebACLWithContext)

	case "DeleteXssMatchSetWithContext":
		return m.Fake(d.fakeDeleteXssMatchSetWithContext)

	case "GetByteMatchSetWithContext":
		return m.Fake(d.fakeGetByteMatchSetWithContext)

	case "GetChangeTokenStatusWithContext":
		return m.Fake(d.fakeGetChangeTokenStatusWithContext)

	case "GetChangeTokenWithContext":
		return m.Fake(d.fakeGetChangeTokenWithContext)

	case "GetGeoMatchSetWithContext":
		return m.Fake(d.fakeGetGeoMatchSetWithContext)

	case "GetIPSetWithContext":
		return m.Fake(d.fakeGetIPSetWithContext)

	case "GetLoggingConfigurationWithContext":
		return m.Fake(d.fakeGetLoggingConfigurationWithContext)

	case "GetPermissionPolicyWithContext":
		return m.Fake(d.fakeGetPermissionPolicyWithContext)

	case "GetRateBasedRuleManagedKeysWithContext":
		return m.Fake(d.fakeGetRateBasedRuleManagedKeysWithContext)

	case "GetRateBasedRuleWithContext":
		return m.Fake(d.fakeGetRateBasedRuleWithContext)

	case "GetRegexMatchSetWithContext":
		return m.Fake(d.fakeGetRegexMatchSetWithContext)

	case "GetRegexPatternSetWithContext":
		return m.Fake(d.fakeGetRegexPatternSetWithContext)

	case "GetRuleGroupWithContext":
		return m.Fake(d.fakeGetRuleGroupWithContext)

	case "GetRuleWithContext":
		return m.Fake(d.fakeGetRuleWithContext)

	case "GetSampledRequestsWithContext":
		return m.Fake(d.fakeGetSampledRequestsWithContext)

	case "GetSizeConstraintSetWithContext":
		return m.Fake(d.fakeGetSizeConstraintSetWithContext)

	case "GetSqlInjectionMatchSetWithContext":
		return m.Fake(d.fakeGetSqlInjectionMatchSetWithContext)

	case "GetWebACLWithContext":
		return m.Fake(d.fakeGetWebACLWithContext)

	case "GetXssMatchSetWithContext":
		return m.Fake(d.fakeGetXssMatchSetWithContext)

	case "ListActivatedRulesInRuleGroupWithContext":
		return m.Fake(d.fakeListActivatedRulesInRuleGroupWithContext)

	case "ListByteMatchSetsWithContext":
		return m.Fake(d.fakeListByteMatchSetsWithContext)

	case "ListGeoMatchSetsWithContext":
		return m.Fake(d.fakeListGeoMatchSetsWithContext)

	case "ListIPSetsWithContext":
		return m.Fake(d.fakeListIPSetsWithContext)

	case "ListLoggingConfigurationsWithContext":
		return m.Fake(d.fakeListLoggingConfigurationsWithContext)

	case "ListRateBasedRulesWithContext":
		return m.Fake(d.fakeListRateBasedRulesWithContext)

	case "ListRegexMatchSetsWithContext":
		return m.Fake(d.fakeListRegexMatchSetsWithContext)

	case "ListRegexPatternSetsWithContext":
		return m.Fake(d.fakeListRegexPatternSetsWithContext)

	case "ListRuleGroupsWithContext":
		return m.Fake(d.fakeListRuleGroupsWithContext)

	case "ListRulesWithContext":
		return m.Fake(d.fakeListRulesWithContext)

	case "ListSizeConstraintSetsWithContext":
		return m.Fake(d.fakeListSizeConstraintSetsWithContext)

	case "ListSqlInjectionMatchSetsWithContext":
		return m.Fake(d.fakeListSqlInjectionMatchSetsWithContext)

	case "ListSubscribedRuleGroupsWithContext":
		return m.Fake(d.fakeListSubscribedRuleGroupsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "ListWebACLsWithContext":
		return m.Fake(d.fakeListWebACLsWithContext)

	case "ListXssMatchSetsWithContext":
		return m.Fake(d.fakeListXssMatchSetsWithContext)

	case "PutLoggingConfigurationWithContext":
		return m.Fake(d.fakePutLoggingConfigurationWithContext)

	case "PutPermissionPolicyWithContext":
		return m.Fake(d.fakePutPermissionPolicyWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	case "UpdateByteMatchSetWithContext":
		return m.Fake(d.fakeUpdateByteMatchSetWithContext)

	case "UpdateGeoMatchSetWithContext":
		return m.Fake(d.fakeUpdateGeoMatchSetWithContext)

	case "UpdateIPSetWithContext":
		return m.Fake(d.fakeUpdateIPSetWithContext)

	case "UpdateRateBasedRuleWithContext":
		return m.Fake(d.fakeUpdateRateBasedRuleWithContext)

	case "UpdateRegexMatchSetWithContext":
		return m.Fake(d.fakeUpdateRegexMatchSetWithContext)

	case "UpdateRegexPatternSetWithContext":
		return m.Fake(d.fakeUpdateRegexPatternSetWithContext)

	case "UpdateRuleGroupWithContext":
		return m.Fake(d.fakeUpdateRuleGroupWithContext)

	case "UpdateRuleWithContext":
		return m.Fake(d.fakeUpdateRuleWithContext)

	case "UpdateSizeConstraintSetWithContext":
		return m.Fake(d.fakeUpdateSizeConstraintSetWithContext)

	case "UpdateSqlInjectionMatchSetWithContext":
		return m.Fake(d.fakeUpdateSqlInjectionMatchSetWithContext)

	case "UpdateWebACLWithContext":
		return m.Fake(d.fakeUpdateWebACLWithContext)

	case "UpdateXssMatchSetWithContext":
		return m.Fake(d.fakeUpdateXssMatchSetWithContext)

	default:
		return nil
	}
}

func (d *WAFDouble) CreateByteMatchSet(i0 *waf.CreateByteMatchSetInput) (r0 *waf.CreateByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateByteMatchSet", i0)
	r0, _ = returns[0].(*waf.CreateByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateByteMatchSetRequest(i0 *waf.CreateByteMatchSetInput) (r0 *request.Request, r1 *waf.CreateByteMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateByteMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateByteMatchSetOutput)
	return
}

func (d *WAFDouble) CreateByteMatchSetWithContext(i0 context.Context, i1 *waf.CreateByteMatchSetInput, i2 ...request.Option) (r0 *waf.CreateByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateByteMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateByteMatchSetWithContext(ctx context.Context, in *waf.CreateByteMatchSetInput, _ ...request.Option) (*waf.CreateByteMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateByteMatchSet cancelled", ctx.Err())
	default:
		return d.CreateByteMatchSet(in)
	}
}

func (d *WAFDouble) CreateGeoMatchSet(i0 *waf.CreateGeoMatchSetInput) (r0 *waf.CreateGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGeoMatchSet", i0)
	r0, _ = returns[0].(*waf.CreateGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateGeoMatchSetRequest(i0 *waf.CreateGeoMatchSetInput) (r0 *request.Request, r1 *waf.CreateGeoMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGeoMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateGeoMatchSetOutput)
	return
}

func (d *WAFDouble) CreateGeoMatchSetWithContext(i0 context.Context, i1 *waf.CreateGeoMatchSetInput, i2 ...request.Option) (r0 *waf.CreateGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateGeoMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateGeoMatchSetWithContext(ctx context.Context, in *waf.CreateGeoMatchSetInput, _ ...request.Option) (*waf.CreateGeoMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateGeoMatchSet cancelled", ctx.Err())
	default:
		return d.CreateGeoMatchSet(in)
	}
}

func (d *WAFDouble) CreateIPSet(i0 *waf.CreateIPSetInput) (r0 *waf.CreateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIPSet", i0)
	r0, _ = returns[0].(*waf.CreateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateIPSetRequest(i0 *waf.CreateIPSetInput) (r0 *request.Request, r1 *waf.CreateIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateIPSetOutput)
	return
}

func (d *WAFDouble) CreateIPSetWithContext(i0 context.Context, i1 *waf.CreateIPSetInput, i2 ...request.Option) (r0 *waf.CreateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateIPSetWithContext(ctx context.Context, in *waf.CreateIPSetInput, _ ...request.Option) (*waf.CreateIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIPSet cancelled", ctx.Err())
	default:
		return d.CreateIPSet(in)
	}
}

func (d *WAFDouble) CreateRateBasedRule(i0 *waf.CreateRateBasedRuleInput) (r0 *waf.CreateRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRateBasedRule", i0)
	r0, _ = returns[0].(*waf.CreateRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateRateBasedRuleRequest(i0 *waf.CreateRateBasedRuleInput) (r0 *request.Request, r1 *waf.CreateRateBasedRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRateBasedRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateRateBasedRuleOutput)
	return
}

func (d *WAFDouble) CreateRateBasedRuleWithContext(i0 context.Context, i1 *waf.CreateRateBasedRuleInput, i2 ...request.Option) (r0 *waf.CreateRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRateBasedRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateRateBasedRuleWithContext(ctx context.Context, in *waf.CreateRateBasedRuleInput, _ ...request.Option) (*waf.CreateRateBasedRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRateBasedRule cancelled", ctx.Err())
	default:
		return d.CreateRateBasedRule(in)
	}
}

func (d *WAFDouble) CreateRegexMatchSet(i0 *waf.CreateRegexMatchSetInput) (r0 *waf.CreateRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexMatchSet", i0)
	r0, _ = returns[0].(*waf.CreateRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateRegexMatchSetRequest(i0 *waf.CreateRegexMatchSetInput) (r0 *request.Request, r1 *waf.CreateRegexMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateRegexMatchSetOutput)
	return
}

func (d *WAFDouble) CreateRegexMatchSetWithContext(i0 context.Context, i1 *waf.CreateRegexMatchSetInput, i2 ...request.Option) (r0 *waf.CreateRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateRegexMatchSetWithContext(ctx context.Context, in *waf.CreateRegexMatchSetInput, _ ...request.Option) (*waf.CreateRegexMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRegexMatchSet cancelled", ctx.Err())
	default:
		return d.CreateRegexMatchSet(in)
	}
}

func (d *WAFDouble) CreateRegexPatternSet(i0 *waf.CreateRegexPatternSetInput) (r0 *waf.CreateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexPatternSet", i0)
	r0, _ = returns[0].(*waf.CreateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateRegexPatternSetRequest(i0 *waf.CreateRegexPatternSetInput) (r0 *request.Request, r1 *waf.CreateRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateRegexPatternSetOutput)
	return
}

func (d *WAFDouble) CreateRegexPatternSetWithContext(i0 context.Context, i1 *waf.CreateRegexPatternSetInput, i2 ...request.Option) (r0 *waf.CreateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateRegexPatternSetWithContext(ctx context.Context, in *waf.CreateRegexPatternSetInput, _ ...request.Option) (*waf.CreateRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRegexPatternSet cancelled", ctx.Err())
	default:
		return d.CreateRegexPatternSet(in)
	}
}

func (d *WAFDouble) CreateRule(i0 *waf.CreateRuleInput) (r0 *waf.CreateRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRule", i0)
	r0, _ = returns[0].(*waf.CreateRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateRuleGroup(i0 *waf.CreateRuleGroupInput) (r0 *waf.CreateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleGroup", i0)
	r0, _ = returns[0].(*waf.CreateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateRuleGroupRequest(i0 *waf.CreateRuleGroupInput) (r0 *request.Request, r1 *waf.CreateRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateRuleGroupOutput)
	return
}

func (d *WAFDouble) CreateRuleGroupWithContext(i0 context.Context, i1 *waf.CreateRuleGroupInput, i2 ...request.Option) (r0 *waf.CreateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateRuleGroupWithContext(ctx context.Context, in *waf.CreateRuleGroupInput, _ ...request.Option) (*waf.CreateRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRuleGroup cancelled", ctx.Err())
	default:
		return d.CreateRuleGroup(in)
	}
}

func (d *WAFDouble) CreateRuleRequest(i0 *waf.CreateRuleInput) (r0 *request.Request, r1 *waf.CreateRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateRuleOutput)
	return
}

func (d *WAFDouble) CreateRuleWithContext(i0 context.Context, i1 *waf.CreateRuleInput, i2 ...request.Option) (r0 *waf.CreateRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateRuleWithContext(ctx context.Context, in *waf.CreateRuleInput, _ ...request.Option) (*waf.CreateRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateRule cancelled", ctx.Err())
	default:
		return d.CreateRule(in)
	}
}

func (d *WAFDouble) CreateSizeConstraintSet(i0 *waf.CreateSizeConstraintSetInput) (r0 *waf.CreateSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSizeConstraintSet", i0)
	r0, _ = returns[0].(*waf.CreateSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateSizeConstraintSetRequest(i0 *waf.CreateSizeConstraintSetInput) (r0 *request.Request, r1 *waf.CreateSizeConstraintSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSizeConstraintSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateSizeConstraintSetOutput)
	return
}

func (d *WAFDouble) CreateSizeConstraintSetWithContext(i0 context.Context, i1 *waf.CreateSizeConstraintSetInput, i2 ...request.Option) (r0 *waf.CreateSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSizeConstraintSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateSizeConstraintSetWithContext(ctx context.Context, in *waf.CreateSizeConstraintSetInput, _ ...request.Option) (*waf.CreateSizeConstraintSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSizeConstraintSet cancelled", ctx.Err())
	default:
		return d.CreateSizeConstraintSet(in)
	}
}

func (d *WAFDouble) CreateSqlInjectionMatchSet(i0 *waf.CreateSqlInjectionMatchSetInput) (r0 *waf.CreateSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSqlInjectionMatchSet", i0)
	r0, _ = returns[0].(*waf.CreateSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateSqlInjectionMatchSetRequest(i0 *waf.CreateSqlInjectionMatchSetInput) (r0 *request.Request, r1 *waf.CreateSqlInjectionMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSqlInjectionMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateSqlInjectionMatchSetOutput)
	return
}

func (d *WAFDouble) CreateSqlInjectionMatchSetWithContext(i0 context.Context, i1 *waf.CreateSqlInjectionMatchSetInput, i2 ...request.Option) (r0 *waf.CreateSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateSqlInjectionMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateSqlInjectionMatchSetWithContext(ctx context.Context, in *waf.CreateSqlInjectionMatchSetInput, _ ...request.Option) (*waf.CreateSqlInjectionMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateSqlInjectionMatchSet cancelled", ctx.Err())
	default:
		return d.CreateSqlInjectionMatchSet(in)
	}
}

func (d *WAFDouble) CreateWebACL(i0 *waf.CreateWebACLInput) (r0 *waf.CreateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebACL", i0)
	r0, _ = returns[0].(*waf.CreateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateWebACLRequest(i0 *waf.CreateWebACLInput) (r0 *request.Request, r1 *waf.CreateWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateWebACLOutput)
	return
}

func (d *WAFDouble) CreateWebACLWithContext(i0 context.Context, i1 *waf.CreateWebACLInput, i2 ...request.Option) (r0 *waf.CreateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateWebACLWithContext(ctx context.Context, in *waf.CreateWebACLInput, _ ...request.Option) (*waf.CreateWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWebACL cancelled", ctx.Err())
	default:
		return d.CreateWebACL(in)
	}
}

func (d *WAFDouble) CreateXssMatchSet(i0 *waf.CreateXssMatchSetInput) (r0 *waf.CreateXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateXssMatchSet", i0)
	r0, _ = returns[0].(*waf.CreateXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) CreateXssMatchSetRequest(i0 *waf.CreateXssMatchSetInput) (r0 *request.Request, r1 *waf.CreateXssMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateXssMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.CreateXssMatchSetOutput)
	return
}

func (d *WAFDouble) CreateXssMatchSetWithContext(i0 context.Context, i1 *waf.CreateXssMatchSetInput, i2 ...request.Option) (r0 *waf.CreateXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateXssMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.CreateXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeCreateXssMatchSetWithContext(ctx context.Context, in *waf.CreateXssMatchSetInput, _ ...request.Option) (*waf.CreateXssMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateXssMatchSet cancelled", ctx.Err())
	default:
		return d.CreateXssMatchSet(in)
	}
}

func (d *WAFDouble) DeleteByteMatchSet(i0 *waf.DeleteByteMatchSetInput) (r0 *waf.DeleteByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteByteMatchSet", i0)
	r0, _ = returns[0].(*waf.DeleteByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteByteMatchSetRequest(i0 *waf.DeleteByteMatchSetInput) (r0 *request.Request, r1 *waf.DeleteByteMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteByteMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteByteMatchSetOutput)
	return
}

func (d *WAFDouble) DeleteByteMatchSetWithContext(i0 context.Context, i1 *waf.DeleteByteMatchSetInput, i2 ...request.Option) (r0 *waf.DeleteByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteByteMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteByteMatchSetWithContext(ctx context.Context, in *waf.DeleteByteMatchSetInput, _ ...request.Option) (*waf.DeleteByteMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteByteMatchSet cancelled", ctx.Err())
	default:
		return d.DeleteByteMatchSet(in)
	}
}

func (d *WAFDouble) DeleteGeoMatchSet(i0 *waf.DeleteGeoMatchSetInput) (r0 *waf.DeleteGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGeoMatchSet", i0)
	r0, _ = returns[0].(*waf.DeleteGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteGeoMatchSetRequest(i0 *waf.DeleteGeoMatchSetInput) (r0 *request.Request, r1 *waf.DeleteGeoMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGeoMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteGeoMatchSetOutput)
	return
}

func (d *WAFDouble) DeleteGeoMatchSetWithContext(i0 context.Context, i1 *waf.DeleteGeoMatchSetInput, i2 ...request.Option) (r0 *waf.DeleteGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteGeoMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteGeoMatchSetWithContext(ctx context.Context, in *waf.DeleteGeoMatchSetInput, _ ...request.Option) (*waf.DeleteGeoMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteGeoMatchSet cancelled", ctx.Err())
	default:
		return d.DeleteGeoMatchSet(in)
	}
}

func (d *WAFDouble) DeleteIPSet(i0 *waf.DeleteIPSetInput) (r0 *waf.DeleteIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIPSet", i0)
	r0, _ = returns[0].(*waf.DeleteIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteIPSetRequest(i0 *waf.DeleteIPSetInput) (r0 *request.Request, r1 *waf.DeleteIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteIPSetOutput)
	return
}

func (d *WAFDouble) DeleteIPSetWithContext(i0 context.Context, i1 *waf.DeleteIPSetInput, i2 ...request.Option) (r0 *waf.DeleteIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteIPSetWithContext(ctx context.Context, in *waf.DeleteIPSetInput, _ ...request.Option) (*waf.DeleteIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIPSet cancelled", ctx.Err())
	default:
		return d.DeleteIPSet(in)
	}
}

func (d *WAFDouble) DeleteLoggingConfiguration(i0 *waf.DeleteLoggingConfigurationInput) (r0 *waf.DeleteLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggingConfiguration", i0)
	r0, _ = returns[0].(*waf.DeleteLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteLoggingConfigurationRequest(i0 *waf.DeleteLoggingConfigurationInput) (r0 *request.Request, r1 *waf.DeleteLoggingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteLoggingConfigurationOutput)
	return
}

func (d *WAFDouble) DeleteLoggingConfigurationWithContext(i0 context.Context, i1 *waf.DeleteLoggingConfigurationInput, i2 ...request.Option) (r0 *waf.DeleteLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteLoggingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteLoggingConfigurationWithContext(ctx context.Context, in *waf.DeleteLoggingConfigurationInput, _ ...request.Option) (*waf.DeleteLoggingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteLoggingConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteLoggingConfiguration(in)
	}
}

func (d *WAFDouble) DeletePermissionPolicy(i0 *waf.DeletePermissionPolicyInput) (r0 *waf.DeletePermissionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePermissionPolicy", i0)
	r0, _ = returns[0].(*waf.DeletePermissionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeletePermissionPolicyRequest(i0 *waf.DeletePermissionPolicyInput) (r0 *request.Request, r1 *waf.DeletePermissionPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePermissionPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeletePermissionPolicyOutput)
	return
}

func (d *WAFDouble) DeletePermissionPolicyWithContext(i0 context.Context, i1 *waf.DeletePermissionPolicyInput, i2 ...request.Option) (r0 *waf.DeletePermissionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePermissionPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeletePermissionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeletePermissionPolicyWithContext(ctx context.Context, in *waf.DeletePermissionPolicyInput, _ ...request.Option) (*waf.DeletePermissionPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePermissionPolicy cancelled", ctx.Err())
	default:
		return d.DeletePermissionPolicy(in)
	}
}

func (d *WAFDouble) DeleteRateBasedRule(i0 *waf.DeleteRateBasedRuleInput) (r0 *waf.DeleteRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRateBasedRule", i0)
	r0, _ = returns[0].(*waf.DeleteRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteRateBasedRuleRequest(i0 *waf.DeleteRateBasedRuleInput) (r0 *request.Request, r1 *waf.DeleteRateBasedRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRateBasedRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteRateBasedRuleOutput)
	return
}

func (d *WAFDouble) DeleteRateBasedRuleWithContext(i0 context.Context, i1 *waf.DeleteRateBasedRuleInput, i2 ...request.Option) (r0 *waf.DeleteRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRateBasedRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteRateBasedRuleWithContext(ctx context.Context, in *waf.DeleteRateBasedRuleInput, _ ...request.Option) (*waf.DeleteRateBasedRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRateBasedRule cancelled", ctx.Err())
	default:
		return d.DeleteRateBasedRule(in)
	}
}

func (d *WAFDouble) DeleteRegexMatchSet(i0 *waf.DeleteRegexMatchSetInput) (r0 *waf.DeleteRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexMatchSet", i0)
	r0, _ = returns[0].(*waf.DeleteRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteRegexMatchSetRequest(i0 *waf.DeleteRegexMatchSetInput) (r0 *request.Request, r1 *waf.DeleteRegexMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteRegexMatchSetOutput)
	return
}

func (d *WAFDouble) DeleteRegexMatchSetWithContext(i0 context.Context, i1 *waf.DeleteRegexMatchSetInput, i2 ...request.Option) (r0 *waf.DeleteRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteRegexMatchSetWithContext(ctx context.Context, in *waf.DeleteRegexMatchSetInput, _ ...request.Option) (*waf.DeleteRegexMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRegexMatchSet cancelled", ctx.Err())
	default:
		return d.DeleteRegexMatchSet(in)
	}
}

func (d *WAFDouble) DeleteRegexPatternSet(i0 *waf.DeleteRegexPatternSetInput) (r0 *waf.DeleteRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexPatternSet", i0)
	r0, _ = returns[0].(*waf.DeleteRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteRegexPatternSetRequest(i0 *waf.DeleteRegexPatternSetInput) (r0 *request.Request, r1 *waf.DeleteRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteRegexPatternSetOutput)
	return
}

func (d *WAFDouble) DeleteRegexPatternSetWithContext(i0 context.Context, i1 *waf.DeleteRegexPatternSetInput, i2 ...request.Option) (r0 *waf.DeleteRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteRegexPatternSetWithContext(ctx context.Context, in *waf.DeleteRegexPatternSetInput, _ ...request.Option) (*waf.DeleteRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRegexPatternSet cancelled", ctx.Err())
	default:
		return d.DeleteRegexPatternSet(in)
	}
}

func (d *WAFDouble) DeleteRule(i0 *waf.DeleteRuleInput) (r0 *waf.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRule", i0)
	r0, _ = returns[0].(*waf.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteRuleGroup(i0 *waf.DeleteRuleGroupInput) (r0 *waf.DeleteRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleGroup", i0)
	r0, _ = returns[0].(*waf.DeleteRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteRuleGroupRequest(i0 *waf.DeleteRuleGroupInput) (r0 *request.Request, r1 *waf.DeleteRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteRuleGroupOutput)
	return
}

func (d *WAFDouble) DeleteRuleGroupWithContext(i0 context.Context, i1 *waf.DeleteRuleGroupInput, i2 ...request.Option) (r0 *waf.DeleteRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteRuleGroupWithContext(ctx context.Context, in *waf.DeleteRuleGroupInput, _ ...request.Option) (*waf.DeleteRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRuleGroup cancelled", ctx.Err())
	default:
		return d.DeleteRuleGroup(in)
	}
}

func (d *WAFDouble) DeleteRuleRequest(i0 *waf.DeleteRuleInput) (r0 *request.Request, r1 *waf.DeleteRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteRuleOutput)
	return
}

func (d *WAFDouble) DeleteRuleWithContext(i0 context.Context, i1 *waf.DeleteRuleInput, i2 ...request.Option) (r0 *waf.DeleteRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteRuleWithContext(ctx context.Context, in *waf.DeleteRuleInput, _ ...request.Option) (*waf.DeleteRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteRule cancelled", ctx.Err())
	default:
		return d.DeleteRule(in)
	}
}

func (d *WAFDouble) DeleteSizeConstraintSet(i0 *waf.DeleteSizeConstraintSetInput) (r0 *waf.DeleteSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSizeConstraintSet", i0)
	r0, _ = returns[0].(*waf.DeleteSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteSizeConstraintSetRequest(i0 *waf.DeleteSizeConstraintSetInput) (r0 *request.Request, r1 *waf.DeleteSizeConstraintSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSizeConstraintSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteSizeConstraintSetOutput)
	return
}

func (d *WAFDouble) DeleteSizeConstraintSetWithContext(i0 context.Context, i1 *waf.DeleteSizeConstraintSetInput, i2 ...request.Option) (r0 *waf.DeleteSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSizeConstraintSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteSizeConstraintSetWithContext(ctx context.Context, in *waf.DeleteSizeConstraintSetInput, _ ...request.Option) (*waf.DeleteSizeConstraintSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSizeConstraintSet cancelled", ctx.Err())
	default:
		return d.DeleteSizeConstraintSet(in)
	}
}

func (d *WAFDouble) DeleteSqlInjectionMatchSet(i0 *waf.DeleteSqlInjectionMatchSetInput) (r0 *waf.DeleteSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSqlInjectionMatchSet", i0)
	r0, _ = returns[0].(*waf.DeleteSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteSqlInjectionMatchSetRequest(i0 *waf.DeleteSqlInjectionMatchSetInput) (r0 *request.Request, r1 *waf.DeleteSqlInjectionMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSqlInjectionMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteSqlInjectionMatchSetOutput)
	return
}

func (d *WAFDouble) DeleteSqlInjectionMatchSetWithContext(i0 context.Context, i1 *waf.DeleteSqlInjectionMatchSetInput, i2 ...request.Option) (r0 *waf.DeleteSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteSqlInjectionMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteSqlInjectionMatchSetWithContext(ctx context.Context, in *waf.DeleteSqlInjectionMatchSetInput, _ ...request.Option) (*waf.DeleteSqlInjectionMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteSqlInjectionMatchSet cancelled", ctx.Err())
	default:
		return d.DeleteSqlInjectionMatchSet(in)
	}
}

func (d *WAFDouble) DeleteWebACL(i0 *waf.DeleteWebACLInput) (r0 *waf.DeleteWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebACL", i0)
	r0, _ = returns[0].(*waf.DeleteWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteWebACLRequest(i0 *waf.DeleteWebACLInput) (r0 *request.Request, r1 *waf.DeleteWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteWebACLOutput)
	return
}

func (d *WAFDouble) DeleteWebACLWithContext(i0 context.Context, i1 *waf.DeleteWebACLInput, i2 ...request.Option) (r0 *waf.DeleteWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteWebACLWithContext(ctx context.Context, in *waf.DeleteWebACLInput, _ ...request.Option) (*waf.DeleteWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWebACL cancelled", ctx.Err())
	default:
		return d.DeleteWebACL(in)
	}
}

func (d *WAFDouble) DeleteXssMatchSet(i0 *waf.DeleteXssMatchSetInput) (r0 *waf.DeleteXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteXssMatchSet", i0)
	r0, _ = returns[0].(*waf.DeleteXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) DeleteXssMatchSetRequest(i0 *waf.DeleteXssMatchSetInput) (r0 *request.Request, r1 *waf.DeleteXssMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteXssMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.DeleteXssMatchSetOutput)
	return
}

func (d *WAFDouble) DeleteXssMatchSetWithContext(i0 context.Context, i1 *waf.DeleteXssMatchSetInput, i2 ...request.Option) (r0 *waf.DeleteXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteXssMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.DeleteXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeDeleteXssMatchSetWithContext(ctx context.Context, in *waf.DeleteXssMatchSetInput, _ ...request.Option) (*waf.DeleteXssMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteXssMatchSet cancelled", ctx.Err())
	default:
		return d.DeleteXssMatchSet(in)
	}
}

func (d *WAFDouble) GetByteMatchSet(i0 *waf.GetByteMatchSetInput) (r0 *waf.GetByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetByteMatchSet", i0)
	r0, _ = returns[0].(*waf.GetByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetByteMatchSetRequest(i0 *waf.GetByteMatchSetInput) (r0 *request.Request, r1 *waf.GetByteMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetByteMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetByteMatchSetOutput)
	return
}

func (d *WAFDouble) GetByteMatchSetWithContext(i0 context.Context, i1 *waf.GetByteMatchSetInput, i2 ...request.Option) (r0 *waf.GetByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetByteMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetByteMatchSetWithContext(ctx context.Context, in *waf.GetByteMatchSetInput, _ ...request.Option) (*waf.GetByteMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetByteMatchSet cancelled", ctx.Err())
	default:
		return d.GetByteMatchSet(in)
	}
}

func (d *WAFDouble) GetChangeToken(i0 *waf.GetChangeTokenInput) (r0 *waf.GetChangeTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeToken", i0)
	r0, _ = returns[0].(*waf.GetChangeTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetChangeTokenRequest(i0 *waf.GetChangeTokenInput) (r0 *request.Request, r1 *waf.GetChangeTokenOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeTokenRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetChangeTokenOutput)
	return
}

func (d *WAFDouble) GetChangeTokenStatus(i0 *waf.GetChangeTokenStatusInput) (r0 *waf.GetChangeTokenStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeTokenStatus", i0)
	r0, _ = returns[0].(*waf.GetChangeTokenStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetChangeTokenStatusRequest(i0 *waf.GetChangeTokenStatusInput) (r0 *request.Request, r1 *waf.GetChangeTokenStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeTokenStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetChangeTokenStatusOutput)
	return
}

func (d *WAFDouble) GetChangeTokenStatusWithContext(i0 context.Context, i1 *waf.GetChangeTokenStatusInput, i2 ...request.Option) (r0 *waf.GetChangeTokenStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeTokenStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetChangeTokenStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetChangeTokenStatusWithContext(ctx context.Context, in *waf.GetChangeTokenStatusInput, _ ...request.Option) (*waf.GetChangeTokenStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetChangeTokenStatus cancelled", ctx.Err())
	default:
		return d.GetChangeTokenStatus(in)
	}
}

func (d *WAFDouble) GetChangeTokenWithContext(i0 context.Context, i1 *waf.GetChangeTokenInput, i2 ...request.Option) (r0 *waf.GetChangeTokenOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetChangeTokenWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetChangeTokenOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetChangeTokenWithContext(ctx context.Context, in *waf.GetChangeTokenInput, _ ...request.Option) (*waf.GetChangeTokenOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetChangeToken cancelled", ctx.Err())
	default:
		return d.GetChangeToken(in)
	}
}

func (d *WAFDouble) GetGeoMatchSet(i0 *waf.GetGeoMatchSetInput) (r0 *waf.GetGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGeoMatchSet", i0)
	r0, _ = returns[0].(*waf.GetGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetGeoMatchSetRequest(i0 *waf.GetGeoMatchSetInput) (r0 *request.Request, r1 *waf.GetGeoMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGeoMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetGeoMatchSetOutput)
	return
}

func (d *WAFDouble) GetGeoMatchSetWithContext(i0 context.Context, i1 *waf.GetGeoMatchSetInput, i2 ...request.Option) (r0 *waf.GetGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetGeoMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetGeoMatchSetWithContext(ctx context.Context, in *waf.GetGeoMatchSetInput, _ ...request.Option) (*waf.GetGeoMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetGeoMatchSet cancelled", ctx.Err())
	default:
		return d.GetGeoMatchSet(in)
	}
}

func (d *WAFDouble) GetIPSet(i0 *waf.GetIPSetInput) (r0 *waf.GetIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIPSet", i0)
	r0, _ = returns[0].(*waf.GetIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetIPSetRequest(i0 *waf.GetIPSetInput) (r0 *request.Request, r1 *waf.GetIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetIPSetOutput)
	return
}

func (d *WAFDouble) GetIPSetWithContext(i0 context.Context, i1 *waf.GetIPSetInput, i2 ...request.Option) (r0 *waf.GetIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetIPSetWithContext(ctx context.Context, in *waf.GetIPSetInput, _ ...request.Option) (*waf.GetIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetIPSet cancelled", ctx.Err())
	default:
		return d.GetIPSet(in)
	}
}

func (d *WAFDouble) GetLoggingConfiguration(i0 *waf.GetLoggingConfigurationInput) (r0 *waf.GetLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingConfiguration", i0)
	r0, _ = returns[0].(*waf.GetLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetLoggingConfigurationRequest(i0 *waf.GetLoggingConfigurationInput) (r0 *request.Request, r1 *waf.GetLoggingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetLoggingConfigurationOutput)
	return
}

func (d *WAFDouble) GetLoggingConfigurationWithContext(i0 context.Context, i1 *waf.GetLoggingConfigurationInput, i2 ...request.Option) (r0 *waf.GetLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetLoggingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetLoggingConfigurationWithContext(ctx context.Context, in *waf.GetLoggingConfigurationInput, _ ...request.Option) (*waf.GetLoggingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetLoggingConfiguration cancelled", ctx.Err())
	default:
		return d.GetLoggingConfiguration(in)
	}
}

func (d *WAFDouble) GetPermissionPolicy(i0 *waf.GetPermissionPolicyInput) (r0 *waf.GetPermissionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPermissionPolicy", i0)
	r0, _ = returns[0].(*waf.GetPermissionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetPermissionPolicyRequest(i0 *waf.GetPermissionPolicyInput) (r0 *request.Request, r1 *waf.GetPermissionPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPermissionPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetPermissionPolicyOutput)
	return
}

func (d *WAFDouble) GetPermissionPolicyWithContext(i0 context.Context, i1 *waf.GetPermissionPolicyInput, i2 ...request.Option) (r0 *waf.GetPermissionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPermissionPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetPermissionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetPermissionPolicyWithContext(ctx context.Context, in *waf.GetPermissionPolicyInput, _ ...request.Option) (*waf.GetPermissionPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPermissionPolicy cancelled", ctx.Err())
	default:
		return d.GetPermissionPolicy(in)
	}
}

func (d *WAFDouble) GetRateBasedRule(i0 *waf.GetRateBasedRuleInput) (r0 *waf.GetRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedRule", i0)
	r0, _ = returns[0].(*waf.GetRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetRateBasedRuleManagedKeys(i0 *waf.GetRateBasedRuleManagedKeysInput) (r0 *waf.GetRateBasedRuleManagedKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedRuleManagedKeys", i0)
	r0, _ = returns[0].(*waf.GetRateBasedRuleManagedKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetRateBasedRuleManagedKeysRequest(i0 *waf.GetRateBasedRuleManagedKeysInput) (r0 *request.Request, r1 *waf.GetRateBasedRuleManagedKeysOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedRuleManagedKeysRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetRateBasedRuleManagedKeysOutput)
	return
}

func (d *WAFDouble) GetRateBasedRuleManagedKeysWithContext(i0 context.Context, i1 *waf.GetRateBasedRuleManagedKeysInput, i2 ...request.Option) (r0 *waf.GetRateBasedRuleManagedKeysOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedRuleManagedKeysWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetRateBasedRuleManagedKeysOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetRateBasedRuleManagedKeysWithContext(ctx context.Context, in *waf.GetRateBasedRuleManagedKeysInput, _ ...request.Option) (*waf.GetRateBasedRuleManagedKeysOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRateBasedRuleManagedKeys cancelled", ctx.Err())
	default:
		return d.GetRateBasedRuleManagedKeys(in)
	}
}

func (d *WAFDouble) GetRateBasedRuleRequest(i0 *waf.GetRateBasedRuleInput) (r0 *request.Request, r1 *waf.GetRateBasedRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetRateBasedRuleOutput)
	return
}

func (d *WAFDouble) GetRateBasedRuleWithContext(i0 context.Context, i1 *waf.GetRateBasedRuleInput, i2 ...request.Option) (r0 *waf.GetRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRateBasedRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetRateBasedRuleWithContext(ctx context.Context, in *waf.GetRateBasedRuleInput, _ ...request.Option) (*waf.GetRateBasedRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRateBasedRule cancelled", ctx.Err())
	default:
		return d.GetRateBasedRule(in)
	}
}

func (d *WAFDouble) GetRegexMatchSet(i0 *waf.GetRegexMatchSetInput) (r0 *waf.GetRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexMatchSet", i0)
	r0, _ = returns[0].(*waf.GetRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetRegexMatchSetRequest(i0 *waf.GetRegexMatchSetInput) (r0 *request.Request, r1 *waf.GetRegexMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetRegexMatchSetOutput)
	return
}

func (d *WAFDouble) GetRegexMatchSetWithContext(i0 context.Context, i1 *waf.GetRegexMatchSetInput, i2 ...request.Option) (r0 *waf.GetRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetRegexMatchSetWithContext(ctx context.Context, in *waf.GetRegexMatchSetInput, _ ...request.Option) (*waf.GetRegexMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRegexMatchSet cancelled", ctx.Err())
	default:
		return d.GetRegexMatchSet(in)
	}
}

func (d *WAFDouble) GetRegexPatternSet(i0 *waf.GetRegexPatternSetInput) (r0 *waf.GetRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexPatternSet", i0)
	r0, _ = returns[0].(*waf.GetRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetRegexPatternSetRequest(i0 *waf.GetRegexPatternSetInput) (r0 *request.Request, r1 *waf.GetRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetRegexPatternSetOutput)
	return
}

func (d *WAFDouble) GetRegexPatternSetWithContext(i0 context.Context, i1 *waf.GetRegexPatternSetInput, i2 ...request.Option) (r0 *waf.GetRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetRegexPatternSetWithContext(ctx context.Context, in *waf.GetRegexPatternSetInput, _ ...request.Option) (*waf.GetRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRegexPatternSet cancelled", ctx.Err())
	default:
		return d.GetRegexPatternSet(in)
	}
}

func (d *WAFDouble) GetRule(i0 *waf.GetRuleInput) (r0 *waf.GetRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRule", i0)
	r0, _ = returns[0].(*waf.GetRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetRuleGroup(i0 *waf.GetRuleGroupInput) (r0 *waf.GetRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleGroup", i0)
	r0, _ = returns[0].(*waf.GetRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetRuleGroupRequest(i0 *waf.GetRuleGroupInput) (r0 *request.Request, r1 *waf.GetRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetRuleGroupOutput)
	return
}

func (d *WAFDouble) GetRuleGroupWithContext(i0 context.Context, i1 *waf.GetRuleGroupInput, i2 ...request.Option) (r0 *waf.GetRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetRuleGroupWithContext(ctx context.Context, in *waf.GetRuleGroupInput, _ ...request.Option) (*waf.GetRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRuleGroup cancelled", ctx.Err())
	default:
		return d.GetRuleGroup(in)
	}
}

func (d *WAFDouble) GetRuleRequest(i0 *waf.GetRuleInput) (r0 *request.Request, r1 *waf.GetRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetRuleOutput)
	return
}

func (d *WAFDouble) GetRuleWithContext(i0 context.Context, i1 *waf.GetRuleInput, i2 ...request.Option) (r0 *waf.GetRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetRuleWithContext(ctx context.Context, in *waf.GetRuleInput, _ ...request.Option) (*waf.GetRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetRule cancelled", ctx.Err())
	default:
		return d.GetRule(in)
	}
}

func (d *WAFDouble) GetSampledRequests(i0 *waf.GetSampledRequestsInput) (r0 *waf.GetSampledRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSampledRequests", i0)
	r0, _ = returns[0].(*waf.GetSampledRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetSampledRequestsRequest(i0 *waf.GetSampledRequestsInput) (r0 *request.Request, r1 *waf.GetSampledRequestsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSampledRequestsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetSampledRequestsOutput)
	return
}

func (d *WAFDouble) GetSampledRequestsWithContext(i0 context.Context, i1 *waf.GetSampledRequestsInput, i2 ...request.Option) (r0 *waf.GetSampledRequestsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSampledRequestsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetSampledRequestsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetSampledRequestsWithContext(ctx context.Context, in *waf.GetSampledRequestsInput, _ ...request.Option) (*waf.GetSampledRequestsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSampledRequests cancelled", ctx.Err())
	default:
		return d.GetSampledRequests(in)
	}
}

func (d *WAFDouble) GetSizeConstraintSet(i0 *waf.GetSizeConstraintSetInput) (r0 *waf.GetSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSizeConstraintSet", i0)
	r0, _ = returns[0].(*waf.GetSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetSizeConstraintSetRequest(i0 *waf.GetSizeConstraintSetInput) (r0 *request.Request, r1 *waf.GetSizeConstraintSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSizeConstraintSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetSizeConstraintSetOutput)
	return
}

func (d *WAFDouble) GetSizeConstraintSetWithContext(i0 context.Context, i1 *waf.GetSizeConstraintSetInput, i2 ...request.Option) (r0 *waf.GetSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSizeConstraintSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetSizeConstraintSetWithContext(ctx context.Context, in *waf.GetSizeConstraintSetInput, _ ...request.Option) (*waf.GetSizeConstraintSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSizeConstraintSet cancelled", ctx.Err())
	default:
		return d.GetSizeConstraintSet(in)
	}
}

func (d *WAFDouble) GetSqlInjectionMatchSet(i0 *waf.GetSqlInjectionMatchSetInput) (r0 *waf.GetSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSqlInjectionMatchSet", i0)
	r0, _ = returns[0].(*waf.GetSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetSqlInjectionMatchSetRequest(i0 *waf.GetSqlInjectionMatchSetInput) (r0 *request.Request, r1 *waf.GetSqlInjectionMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSqlInjectionMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetSqlInjectionMatchSetOutput)
	return
}

func (d *WAFDouble) GetSqlInjectionMatchSetWithContext(i0 context.Context, i1 *waf.GetSqlInjectionMatchSetInput, i2 ...request.Option) (r0 *waf.GetSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetSqlInjectionMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetSqlInjectionMatchSetWithContext(ctx context.Context, in *waf.GetSqlInjectionMatchSetInput, _ ...request.Option) (*waf.GetSqlInjectionMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetSqlInjectionMatchSet cancelled", ctx.Err())
	default:
		return d.GetSqlInjectionMatchSet(in)
	}
}

func (d *WAFDouble) GetWebACL(i0 *waf.GetWebACLInput) (r0 *waf.GetWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACL", i0)
	r0, _ = returns[0].(*waf.GetWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetWebACLRequest(i0 *waf.GetWebACLInput) (r0 *request.Request, r1 *waf.GetWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetWebACLOutput)
	return
}

func (d *WAFDouble) GetWebACLWithContext(i0 context.Context, i1 *waf.GetWebACLInput, i2 ...request.Option) (r0 *waf.GetWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetWebACLWithContext(ctx context.Context, in *waf.GetWebACLInput, _ ...request.Option) (*waf.GetWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetWebACL cancelled", ctx.Err())
	default:
		return d.GetWebACL(in)
	}
}

func (d *WAFDouble) GetXssMatchSet(i0 *waf.GetXssMatchSetInput) (r0 *waf.GetXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetXssMatchSet", i0)
	r0, _ = returns[0].(*waf.GetXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) GetXssMatchSetRequest(i0 *waf.GetXssMatchSetInput) (r0 *request.Request, r1 *waf.GetXssMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetXssMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.GetXssMatchSetOutput)
	return
}

func (d *WAFDouble) GetXssMatchSetWithContext(i0 context.Context, i1 *waf.GetXssMatchSetInput, i2 ...request.Option) (r0 *waf.GetXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetXssMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.GetXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeGetXssMatchSetWithContext(ctx context.Context, in *waf.GetXssMatchSetInput, _ ...request.Option) (*waf.GetXssMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetXssMatchSet cancelled", ctx.Err())
	default:
		return d.GetXssMatchSet(in)
	}
}

func (d *WAFDouble) ListActivatedRulesInRuleGroup(i0 *waf.ListActivatedRulesInRuleGroupInput) (r0 *waf.ListActivatedRulesInRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivatedRulesInRuleGroup", i0)
	r0, _ = returns[0].(*waf.ListActivatedRulesInRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListActivatedRulesInRuleGroupRequest(i0 *waf.ListActivatedRulesInRuleGroupInput) (r0 *request.Request, r1 *waf.ListActivatedRulesInRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivatedRulesInRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListActivatedRulesInRuleGroupOutput)
	return
}

func (d *WAFDouble) ListActivatedRulesInRuleGroupWithContext(i0 context.Context, i1 *waf.ListActivatedRulesInRuleGroupInput, i2 ...request.Option) (r0 *waf.ListActivatedRulesInRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListActivatedRulesInRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListActivatedRulesInRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListActivatedRulesInRuleGroupWithContext(ctx context.Context, in *waf.ListActivatedRulesInRuleGroupInput, _ ...request.Option) (*waf.ListActivatedRulesInRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListActivatedRulesInRuleGroup cancelled", ctx.Err())
	default:
		return d.ListActivatedRulesInRuleGroup(in)
	}
}

func (d *WAFDouble) ListByteMatchSets(i0 *waf.ListByteMatchSetsInput) (r0 *waf.ListByteMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListByteMatchSets", i0)
	r0, _ = returns[0].(*waf.ListByteMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListByteMatchSetsRequest(i0 *waf.ListByteMatchSetsInput) (r0 *request.Request, r1 *waf.ListByteMatchSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListByteMatchSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListByteMatchSetsOutput)
	return
}

func (d *WAFDouble) ListByteMatchSetsWithContext(i0 context.Context, i1 *waf.ListByteMatchSetsInput, i2 ...request.Option) (r0 *waf.ListByteMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListByteMatchSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListByteMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListByteMatchSetsWithContext(ctx context.Context, in *waf.ListByteMatchSetsInput, _ ...request.Option) (*waf.ListByteMatchSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListByteMatchSets cancelled", ctx.Err())
	default:
		return d.ListByteMatchSets(in)
	}
}

func (d *WAFDouble) ListGeoMatchSets(i0 *waf.ListGeoMatchSetsInput) (r0 *waf.ListGeoMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGeoMatchSets", i0)
	r0, _ = returns[0].(*waf.ListGeoMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListGeoMatchSetsRequest(i0 *waf.ListGeoMatchSetsInput) (r0 *request.Request, r1 *waf.ListGeoMatchSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGeoMatchSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListGeoMatchSetsOutput)
	return
}

func (d *WAFDouble) ListGeoMatchSetsWithContext(i0 context.Context, i1 *waf.ListGeoMatchSetsInput, i2 ...request.Option) (r0 *waf.ListGeoMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListGeoMatchSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListGeoMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListGeoMatchSetsWithContext(ctx context.Context, in *waf.ListGeoMatchSetsInput, _ ...request.Option) (*waf.ListGeoMatchSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListGeoMatchSets cancelled", ctx.Err())
	default:
		return d.ListGeoMatchSets(in)
	}
}

func (d *WAFDouble) ListIPSets(i0 *waf.ListIPSetsInput) (r0 *waf.ListIPSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIPSets", i0)
	r0, _ = returns[0].(*waf.ListIPSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListIPSetsRequest(i0 *waf.ListIPSetsInput) (r0 *request.Request, r1 *waf.ListIPSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIPSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListIPSetsOutput)
	return
}

func (d *WAFDouble) ListIPSetsWithContext(i0 context.Context, i1 *waf.ListIPSetsInput, i2 ...request.Option) (r0 *waf.ListIPSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListIPSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListIPSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListIPSetsWithContext(ctx context.Context, in *waf.ListIPSetsInput, _ ...request.Option) (*waf.ListIPSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListIPSets cancelled", ctx.Err())
	default:
		return d.ListIPSets(in)
	}
}

func (d *WAFDouble) ListLoggingConfigurations(i0 *waf.ListLoggingConfigurationsInput) (r0 *waf.ListLoggingConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggingConfigurations", i0)
	r0, _ = returns[0].(*waf.ListLoggingConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListLoggingConfigurationsRequest(i0 *waf.ListLoggingConfigurationsInput) (r0 *request.Request, r1 *waf.ListLoggingConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggingConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListLoggingConfigurationsOutput)
	return
}

func (d *WAFDouble) ListLoggingConfigurationsWithContext(i0 context.Context, i1 *waf.ListLoggingConfigurationsInput, i2 ...request.Option) (r0 *waf.ListLoggingConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListLoggingConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListLoggingConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListLoggingConfigurationsWithContext(ctx context.Context, in *waf.ListLoggingConfigurationsInput, _ ...request.Option) (*waf.ListLoggingConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListLoggingConfigurations cancelled", ctx.Err())
	default:
		return d.ListLoggingConfigurations(in)
	}
}

func (d *WAFDouble) ListRateBasedRules(i0 *waf.ListRateBasedRulesInput) (r0 *waf.ListRateBasedRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRateBasedRules", i0)
	r0, _ = returns[0].(*waf.ListRateBasedRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListRateBasedRulesRequest(i0 *waf.ListRateBasedRulesInput) (r0 *request.Request, r1 *waf.ListRateBasedRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRateBasedRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListRateBasedRulesOutput)
	return
}

func (d *WAFDouble) ListRateBasedRulesWithContext(i0 context.Context, i1 *waf.ListRateBasedRulesInput, i2 ...request.Option) (r0 *waf.ListRateBasedRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRateBasedRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListRateBasedRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListRateBasedRulesWithContext(ctx context.Context, in *waf.ListRateBasedRulesInput, _ ...request.Option) (*waf.ListRateBasedRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRateBasedRules cancelled", ctx.Err())
	default:
		return d.ListRateBasedRules(in)
	}
}

func (d *WAFDouble) ListRegexMatchSets(i0 *waf.ListRegexMatchSetsInput) (r0 *waf.ListRegexMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexMatchSets", i0)
	r0, _ = returns[0].(*waf.ListRegexMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListRegexMatchSetsRequest(i0 *waf.ListRegexMatchSetsInput) (r0 *request.Request, r1 *waf.ListRegexMatchSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexMatchSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListRegexMatchSetsOutput)
	return
}

func (d *WAFDouble) ListRegexMatchSetsWithContext(i0 context.Context, i1 *waf.ListRegexMatchSetsInput, i2 ...request.Option) (r0 *waf.ListRegexMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexMatchSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListRegexMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListRegexMatchSetsWithContext(ctx context.Context, in *waf.ListRegexMatchSetsInput, _ ...request.Option) (*waf.ListRegexMatchSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRegexMatchSets cancelled", ctx.Err())
	default:
		return d.ListRegexMatchSets(in)
	}
}

func (d *WAFDouble) ListRegexPatternSets(i0 *waf.ListRegexPatternSetsInput) (r0 *waf.ListRegexPatternSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexPatternSets", i0)
	r0, _ = returns[0].(*waf.ListRegexPatternSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListRegexPatternSetsRequest(i0 *waf.ListRegexPatternSetsInput) (r0 *request.Request, r1 *waf.ListRegexPatternSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexPatternSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListRegexPatternSetsOutput)
	return
}

func (d *WAFDouble) ListRegexPatternSetsWithContext(i0 context.Context, i1 *waf.ListRegexPatternSetsInput, i2 ...request.Option) (r0 *waf.ListRegexPatternSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRegexPatternSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListRegexPatternSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListRegexPatternSetsWithContext(ctx context.Context, in *waf.ListRegexPatternSetsInput, _ ...request.Option) (*waf.ListRegexPatternSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRegexPatternSets cancelled", ctx.Err())
	default:
		return d.ListRegexPatternSets(in)
	}
}

func (d *WAFDouble) ListRuleGroups(i0 *waf.ListRuleGroupsInput) (r0 *waf.ListRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleGroups", i0)
	r0, _ = returns[0].(*waf.ListRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListRuleGroupsRequest(i0 *waf.ListRuleGroupsInput) (r0 *request.Request, r1 *waf.ListRuleGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListRuleGroupsOutput)
	return
}

func (d *WAFDouble) ListRuleGroupsWithContext(i0 context.Context, i1 *waf.ListRuleGroupsInput, i2 ...request.Option) (r0 *waf.ListRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRuleGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListRuleGroupsWithContext(ctx context.Context, in *waf.ListRuleGroupsInput, _ ...request.Option) (*waf.ListRuleGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRuleGroups cancelled", ctx.Err())
	default:
		return d.ListRuleGroups(in)
	}
}

func (d *WAFDouble) ListRules(i0 *waf.ListRulesInput) (r0 *waf.ListRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRules", i0)
	r0, _ = returns[0].(*waf.ListRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListRulesRequest(i0 *waf.ListRulesInput) (r0 *request.Request, r1 *waf.ListRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListRulesOutput)
	return
}

func (d *WAFDouble) ListRulesWithContext(i0 context.Context, i1 *waf.ListRulesInput, i2 ...request.Option) (r0 *waf.ListRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListRulesWithContext(ctx context.Context, in *waf.ListRulesInput, _ ...request.Option) (*waf.ListRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListRules cancelled", ctx.Err())
	default:
		return d.ListRules(in)
	}
}

func (d *WAFDouble) ListSizeConstraintSets(i0 *waf.ListSizeConstraintSetsInput) (r0 *waf.ListSizeConstraintSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSizeConstraintSets", i0)
	r0, _ = returns[0].(*waf.ListSizeConstraintSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListSizeConstraintSetsRequest(i0 *waf.ListSizeConstraintSetsInput) (r0 *request.Request, r1 *waf.ListSizeConstraintSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSizeConstraintSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListSizeConstraintSetsOutput)
	return
}

func (d *WAFDouble) ListSizeConstraintSetsWithContext(i0 context.Context, i1 *waf.ListSizeConstraintSetsInput, i2 ...request.Option) (r0 *waf.ListSizeConstraintSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSizeConstraintSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListSizeConstraintSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListSizeConstraintSetsWithContext(ctx context.Context, in *waf.ListSizeConstraintSetsInput, _ ...request.Option) (*waf.ListSizeConstraintSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSizeConstraintSets cancelled", ctx.Err())
	default:
		return d.ListSizeConstraintSets(in)
	}
}

func (d *WAFDouble) ListSqlInjectionMatchSets(i0 *waf.ListSqlInjectionMatchSetsInput) (r0 *waf.ListSqlInjectionMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSqlInjectionMatchSets", i0)
	r0, _ = returns[0].(*waf.ListSqlInjectionMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListSqlInjectionMatchSetsRequest(i0 *waf.ListSqlInjectionMatchSetsInput) (r0 *request.Request, r1 *waf.ListSqlInjectionMatchSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSqlInjectionMatchSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListSqlInjectionMatchSetsOutput)
	return
}

func (d *WAFDouble) ListSqlInjectionMatchSetsWithContext(i0 context.Context, i1 *waf.ListSqlInjectionMatchSetsInput, i2 ...request.Option) (r0 *waf.ListSqlInjectionMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSqlInjectionMatchSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListSqlInjectionMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListSqlInjectionMatchSetsWithContext(ctx context.Context, in *waf.ListSqlInjectionMatchSetsInput, _ ...request.Option) (*waf.ListSqlInjectionMatchSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSqlInjectionMatchSets cancelled", ctx.Err())
	default:
		return d.ListSqlInjectionMatchSets(in)
	}
}

func (d *WAFDouble) ListSubscribedRuleGroups(i0 *waf.ListSubscribedRuleGroupsInput) (r0 *waf.ListSubscribedRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedRuleGroups", i0)
	r0, _ = returns[0].(*waf.ListSubscribedRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListSubscribedRuleGroupsRequest(i0 *waf.ListSubscribedRuleGroupsInput) (r0 *request.Request, r1 *waf.ListSubscribedRuleGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedRuleGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListSubscribedRuleGroupsOutput)
	return
}

func (d *WAFDouble) ListSubscribedRuleGroupsWithContext(i0 context.Context, i1 *waf.ListSubscribedRuleGroupsInput, i2 ...request.Option) (r0 *waf.ListSubscribedRuleGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListSubscribedRuleGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListSubscribedRuleGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListSubscribedRuleGroupsWithContext(ctx context.Context, in *waf.ListSubscribedRuleGroupsInput, _ ...request.Option) (*waf.ListSubscribedRuleGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListSubscribedRuleGroups cancelled", ctx.Err())
	default:
		return d.ListSubscribedRuleGroups(in)
	}
}

func (d *WAFDouble) ListTagsForResource(i0 *waf.ListTagsForResourceInput) (r0 *waf.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*waf.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListTagsForResourceRequest(i0 *waf.ListTagsForResourceInput) (r0 *request.Request, r1 *waf.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListTagsForResourceOutput)
	return
}

func (d *WAFDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *waf.ListTagsForResourceInput, i2 ...request.Option) (r0 *waf.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *waf.ListTagsForResourceInput, _ ...request.Option) (*waf.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *WAFDouble) ListWebACLs(i0 *waf.ListWebACLsInput) (r0 *waf.ListWebACLsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebACLs", i0)
	r0, _ = returns[0].(*waf.ListWebACLsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListWebACLsRequest(i0 *waf.ListWebACLsInput) (r0 *request.Request, r1 *waf.ListWebACLsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebACLsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListWebACLsOutput)
	return
}

func (d *WAFDouble) ListWebACLsWithContext(i0 context.Context, i1 *waf.ListWebACLsInput, i2 ...request.Option) (r0 *waf.ListWebACLsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListWebACLsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListWebACLsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListWebACLsWithContext(ctx context.Context, in *waf.ListWebACLsInput, _ ...request.Option) (*waf.ListWebACLsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListWebACLs cancelled", ctx.Err())
	default:
		return d.ListWebACLs(in)
	}
}

func (d *WAFDouble) ListXssMatchSets(i0 *waf.ListXssMatchSetsInput) (r0 *waf.ListXssMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListXssMatchSets", i0)
	r0, _ = returns[0].(*waf.ListXssMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) ListXssMatchSetsRequest(i0 *waf.ListXssMatchSetsInput) (r0 *request.Request, r1 *waf.ListXssMatchSetsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListXssMatchSetsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.ListXssMatchSetsOutput)
	return
}

func (d *WAFDouble) ListXssMatchSetsWithContext(i0 context.Context, i1 *waf.ListXssMatchSetsInput, i2 ...request.Option) (r0 *waf.ListXssMatchSetsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListXssMatchSetsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.ListXssMatchSetsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeListXssMatchSetsWithContext(ctx context.Context, in *waf.ListXssMatchSetsInput, _ ...request.Option) (*waf.ListXssMatchSetsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListXssMatchSets cancelled", ctx.Err())
	default:
		return d.ListXssMatchSets(in)
	}
}

func (d *WAFDouble) PutLoggingConfiguration(i0 *waf.PutLoggingConfigurationInput) (r0 *waf.PutLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingConfiguration", i0)
	r0, _ = returns[0].(*waf.PutLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) PutLoggingConfigurationRequest(i0 *waf.PutLoggingConfigurationInput) (r0 *request.Request, r1 *waf.PutLoggingConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.PutLoggingConfigurationOutput)
	return
}

func (d *WAFDouble) PutLoggingConfigurationWithContext(i0 context.Context, i1 *waf.PutLoggingConfigurationInput, i2 ...request.Option) (r0 *waf.PutLoggingConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutLoggingConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.PutLoggingConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakePutLoggingConfigurationWithContext(ctx context.Context, in *waf.PutLoggingConfigurationInput, _ ...request.Option) (*waf.PutLoggingConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutLoggingConfiguration cancelled", ctx.Err())
	default:
		return d.PutLoggingConfiguration(in)
	}
}

func (d *WAFDouble) PutPermissionPolicy(i0 *waf.PutPermissionPolicyInput) (r0 *waf.PutPermissionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermissionPolicy", i0)
	r0, _ = returns[0].(*waf.PutPermissionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) PutPermissionPolicyRequest(i0 *waf.PutPermissionPolicyInput) (r0 *request.Request, r1 *waf.PutPermissionPolicyOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermissionPolicyRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.PutPermissionPolicyOutput)
	return
}

func (d *WAFDouble) PutPermissionPolicyWithContext(i0 context.Context, i1 *waf.PutPermissionPolicyInput, i2 ...request.Option) (r0 *waf.PutPermissionPolicyOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPermissionPolicyWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.PutPermissionPolicyOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakePutPermissionPolicyWithContext(ctx context.Context, in *waf.PutPermissionPolicyInput, _ ...request.Option) (*waf.PutPermissionPolicyOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPermissionPolicy cancelled", ctx.Err())
	default:
		return d.PutPermissionPolicy(in)
	}
}

func (d *WAFDouble) TagResource(i0 *waf.TagResourceInput) (r0 *waf.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*waf.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) TagResourceRequest(i0 *waf.TagResourceInput) (r0 *request.Request, r1 *waf.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.TagResourceOutput)
	return
}

func (d *WAFDouble) TagResourceWithContext(i0 context.Context, i1 *waf.TagResourceInput, i2 ...request.Option) (r0 *waf.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeTagResourceWithContext(ctx context.Context, in *waf.TagResourceInput, _ ...request.Option) (*waf.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *WAFDouble) UntagResource(i0 *waf.UntagResourceInput) (r0 *waf.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*waf.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UntagResourceRequest(i0 *waf.UntagResourceInput) (r0 *request.Request, r1 *waf.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UntagResourceOutput)
	return
}

func (d *WAFDouble) UntagResourceWithContext(i0 context.Context, i1 *waf.UntagResourceInput, i2 ...request.Option) (r0 *waf.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUntagResourceWithContext(ctx context.Context, in *waf.UntagResourceInput, _ ...request.Option) (*waf.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}

func (d *WAFDouble) UpdateByteMatchSet(i0 *waf.UpdateByteMatchSetInput) (r0 *waf.UpdateByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateByteMatchSet", i0)
	r0, _ = returns[0].(*waf.UpdateByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateByteMatchSetRequest(i0 *waf.UpdateByteMatchSetInput) (r0 *request.Request, r1 *waf.UpdateByteMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateByteMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateByteMatchSetOutput)
	return
}

func (d *WAFDouble) UpdateByteMatchSetWithContext(i0 context.Context, i1 *waf.UpdateByteMatchSetInput, i2 ...request.Option) (r0 *waf.UpdateByteMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateByteMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateByteMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateByteMatchSetWithContext(ctx context.Context, in *waf.UpdateByteMatchSetInput, _ ...request.Option) (*waf.UpdateByteMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateByteMatchSet cancelled", ctx.Err())
	default:
		return d.UpdateByteMatchSet(in)
	}
}

func (d *WAFDouble) UpdateGeoMatchSet(i0 *waf.UpdateGeoMatchSetInput) (r0 *waf.UpdateGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGeoMatchSet", i0)
	r0, _ = returns[0].(*waf.UpdateGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateGeoMatchSetRequest(i0 *waf.UpdateGeoMatchSetInput) (r0 *request.Request, r1 *waf.UpdateGeoMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGeoMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateGeoMatchSetOutput)
	return
}

func (d *WAFDouble) UpdateGeoMatchSetWithContext(i0 context.Context, i1 *waf.UpdateGeoMatchSetInput, i2 ...request.Option) (r0 *waf.UpdateGeoMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateGeoMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateGeoMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateGeoMatchSetWithContext(ctx context.Context, in *waf.UpdateGeoMatchSetInput, _ ...request.Option) (*waf.UpdateGeoMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateGeoMatchSet cancelled", ctx.Err())
	default:
		return d.UpdateGeoMatchSet(in)
	}
}

func (d *WAFDouble) UpdateIPSet(i0 *waf.UpdateIPSetInput) (r0 *waf.UpdateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIPSet", i0)
	r0, _ = returns[0].(*waf.UpdateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateIPSetRequest(i0 *waf.UpdateIPSetInput) (r0 *request.Request, r1 *waf.UpdateIPSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIPSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateIPSetOutput)
	return
}

func (d *WAFDouble) UpdateIPSetWithContext(i0 context.Context, i1 *waf.UpdateIPSetInput, i2 ...request.Option) (r0 *waf.UpdateIPSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateIPSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateIPSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateIPSetWithContext(ctx context.Context, in *waf.UpdateIPSetInput, _ ...request.Option) (*waf.UpdateIPSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateIPSet cancelled", ctx.Err())
	default:
		return d.UpdateIPSet(in)
	}
}

func (d *WAFDouble) UpdateRateBasedRule(i0 *waf.UpdateRateBasedRuleInput) (r0 *waf.UpdateRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRateBasedRule", i0)
	r0, _ = returns[0].(*waf.UpdateRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateRateBasedRuleRequest(i0 *waf.UpdateRateBasedRuleInput) (r0 *request.Request, r1 *waf.UpdateRateBasedRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRateBasedRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateRateBasedRuleOutput)
	return
}

func (d *WAFDouble) UpdateRateBasedRuleWithContext(i0 context.Context, i1 *waf.UpdateRateBasedRuleInput, i2 ...request.Option) (r0 *waf.UpdateRateBasedRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRateBasedRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateRateBasedRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateRateBasedRuleWithContext(ctx context.Context, in *waf.UpdateRateBasedRuleInput, _ ...request.Option) (*waf.UpdateRateBasedRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRateBasedRule cancelled", ctx.Err())
	default:
		return d.UpdateRateBasedRule(in)
	}
}

func (d *WAFDouble) UpdateRegexMatchSet(i0 *waf.UpdateRegexMatchSetInput) (r0 *waf.UpdateRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexMatchSet", i0)
	r0, _ = returns[0].(*waf.UpdateRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateRegexMatchSetRequest(i0 *waf.UpdateRegexMatchSetInput) (r0 *request.Request, r1 *waf.UpdateRegexMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateRegexMatchSetOutput)
	return
}

func (d *WAFDouble) UpdateRegexMatchSetWithContext(i0 context.Context, i1 *waf.UpdateRegexMatchSetInput, i2 ...request.Option) (r0 *waf.UpdateRegexMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateRegexMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateRegexMatchSetWithContext(ctx context.Context, in *waf.UpdateRegexMatchSetInput, _ ...request.Option) (*waf.UpdateRegexMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRegexMatchSet cancelled", ctx.Err())
	default:
		return d.UpdateRegexMatchSet(in)
	}
}

func (d *WAFDouble) UpdateRegexPatternSet(i0 *waf.UpdateRegexPatternSetInput) (r0 *waf.UpdateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexPatternSet", i0)
	r0, _ = returns[0].(*waf.UpdateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateRegexPatternSetRequest(i0 *waf.UpdateRegexPatternSetInput) (r0 *request.Request, r1 *waf.UpdateRegexPatternSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexPatternSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateRegexPatternSetOutput)
	return
}

func (d *WAFDouble) UpdateRegexPatternSetWithContext(i0 context.Context, i1 *waf.UpdateRegexPatternSetInput, i2 ...request.Option) (r0 *waf.UpdateRegexPatternSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRegexPatternSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateRegexPatternSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateRegexPatternSetWithContext(ctx context.Context, in *waf.UpdateRegexPatternSetInput, _ ...request.Option) (*waf.UpdateRegexPatternSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRegexPatternSet cancelled", ctx.Err())
	default:
		return d.UpdateRegexPatternSet(in)
	}
}

func (d *WAFDouble) UpdateRule(i0 *waf.UpdateRuleInput) (r0 *waf.UpdateRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRule", i0)
	r0, _ = returns[0].(*waf.UpdateRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateRuleGroup(i0 *waf.UpdateRuleGroupInput) (r0 *waf.UpdateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleGroup", i0)
	r0, _ = returns[0].(*waf.UpdateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateRuleGroupRequest(i0 *waf.UpdateRuleGroupInput) (r0 *request.Request, r1 *waf.UpdateRuleGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateRuleGroupOutput)
	return
}

func (d *WAFDouble) UpdateRuleGroupWithContext(i0 context.Context, i1 *waf.UpdateRuleGroupInput, i2 ...request.Option) (r0 *waf.UpdateRuleGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateRuleGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateRuleGroupWithContext(ctx context.Context, in *waf.UpdateRuleGroupInput, _ ...request.Option) (*waf.UpdateRuleGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRuleGroup cancelled", ctx.Err())
	default:
		return d.UpdateRuleGroup(in)
	}
}

func (d *WAFDouble) UpdateRuleRequest(i0 *waf.UpdateRuleInput) (r0 *request.Request, r1 *waf.UpdateRuleOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateRuleOutput)
	return
}

func (d *WAFDouble) UpdateRuleWithContext(i0 context.Context, i1 *waf.UpdateRuleInput, i2 ...request.Option) (r0 *waf.UpdateRuleOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRuleWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateRuleOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateRuleWithContext(ctx context.Context, in *waf.UpdateRuleInput, _ ...request.Option) (*waf.UpdateRuleOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRule cancelled", ctx.Err())
	default:
		return d.UpdateRule(in)
	}
}

func (d *WAFDouble) UpdateSizeConstraintSet(i0 *waf.UpdateSizeConstraintSetInput) (r0 *waf.UpdateSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSizeConstraintSet", i0)
	r0, _ = returns[0].(*waf.UpdateSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateSizeConstraintSetRequest(i0 *waf.UpdateSizeConstraintSetInput) (r0 *request.Request, r1 *waf.UpdateSizeConstraintSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSizeConstraintSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateSizeConstraintSetOutput)
	return
}

func (d *WAFDouble) UpdateSizeConstraintSetWithContext(i0 context.Context, i1 *waf.UpdateSizeConstraintSetInput, i2 ...request.Option) (r0 *waf.UpdateSizeConstraintSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSizeConstraintSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateSizeConstraintSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateSizeConstraintSetWithContext(ctx context.Context, in *waf.UpdateSizeConstraintSetInput, _ ...request.Option) (*waf.UpdateSizeConstraintSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSizeConstraintSet cancelled", ctx.Err())
	default:
		return d.UpdateSizeConstraintSet(in)
	}
}

func (d *WAFDouble) UpdateSqlInjectionMatchSet(i0 *waf.UpdateSqlInjectionMatchSetInput) (r0 *waf.UpdateSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSqlInjectionMatchSet", i0)
	r0, _ = returns[0].(*waf.UpdateSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateSqlInjectionMatchSetRequest(i0 *waf.UpdateSqlInjectionMatchSetInput) (r0 *request.Request, r1 *waf.UpdateSqlInjectionMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSqlInjectionMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateSqlInjectionMatchSetOutput)
	return
}

func (d *WAFDouble) UpdateSqlInjectionMatchSetWithContext(i0 context.Context, i1 *waf.UpdateSqlInjectionMatchSetInput, i2 ...request.Option) (r0 *waf.UpdateSqlInjectionMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateSqlInjectionMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateSqlInjectionMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateSqlInjectionMatchSetWithContext(ctx context.Context, in *waf.UpdateSqlInjectionMatchSetInput, _ ...request.Option) (*waf.UpdateSqlInjectionMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateSqlInjectionMatchSet cancelled", ctx.Err())
	default:
		return d.UpdateSqlInjectionMatchSet(in)
	}
}

func (d *WAFDouble) UpdateWebACL(i0 *waf.UpdateWebACLInput) (r0 *waf.UpdateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebACL", i0)
	r0, _ = returns[0].(*waf.UpdateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateWebACLRequest(i0 *waf.UpdateWebACLInput) (r0 *request.Request, r1 *waf.UpdateWebACLOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebACLRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateWebACLOutput)
	return
}

func (d *WAFDouble) UpdateWebACLWithContext(i0 context.Context, i1 *waf.UpdateWebACLInput, i2 ...request.Option) (r0 *waf.UpdateWebACLOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateWebACLWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateWebACLOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateWebACLWithContext(ctx context.Context, in *waf.UpdateWebACLInput, _ ...request.Option) (*waf.UpdateWebACLOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateWebACL cancelled", ctx.Err())
	default:
		return d.UpdateWebACL(in)
	}
}

func (d *WAFDouble) UpdateXssMatchSet(i0 *waf.UpdateXssMatchSetInput) (r0 *waf.UpdateXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateXssMatchSet", i0)
	r0, _ = returns[0].(*waf.UpdateXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) UpdateXssMatchSetRequest(i0 *waf.UpdateXssMatchSetInput) (r0 *request.Request, r1 *waf.UpdateXssMatchSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateXssMatchSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*waf.UpdateXssMatchSetOutput)
	return
}

func (d *WAFDouble) UpdateXssMatchSetWithContext(i0 context.Context, i1 *waf.UpdateXssMatchSetInput, i2 ...request.Option) (r0 *waf.UpdateXssMatchSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateXssMatchSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*waf.UpdateXssMatchSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WAFDouble) fakeUpdateXssMatchSetWithContext(ctx context.Context, in *waf.UpdateXssMatchSetInput, _ ...request.Option) (*waf.UpdateXssMatchSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateXssMatchSet cancelled", ctx.Err())
	default:
		return d.UpdateXssMatchSet(in)
	}
}
