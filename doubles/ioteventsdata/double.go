// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:13:18+11:00

// Package ioteventsdatadouble provides a TestDouble implementation of ioteventsdataiface.IoTEventsDataAPI
package ioteventsdatadouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ioteventsdata"
	"github.com/aws/aws-sdk-go/service/ioteventsdata/ioteventsdataiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// IoTEventsDataDouble is TestDouble for ioteventsdataiface.IoTEventsDataAPI
type IoTEventsDataDouble struct {
	ioteventsdataiface.IoTEventsDataAPI
	*awsdouble.AWSTestDouble
}

// Constructor for IoTEventsDataDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *IoTEventsDataDouble {
	result := &IoTEventsDataDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*ioteventsdataiface.IoTEventsDataAPI)(nil), configurators...)
	return result
}

func (d *IoTEventsDataDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *IoTEventsDataDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "BatchPutMessageWithContext":
		return m.Fake(d.fakeBatchPutMessageWithContext)

	case "BatchUpdateDetectorWithContext":
		return m.Fake(d.fakeBatchUpdateDetectorWithContext)

	case "DescribeDetectorWithContext":
		return m.Fake(d.fakeDescribeDetectorWithContext)

	case "ListDetectorsWithContext":
		return m.Fake(d.fakeListDetectorsWithContext)

	default:
		return nil
	}
}

func (d *IoTEventsDataDouble) BatchPutMessage(i0 *ioteventsdata.BatchPutMessageInput) (r0 *ioteventsdata.BatchPutMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutMessage", i0)
	r0, _ = returns[0].(*ioteventsdata.BatchPutMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) BatchPutMessageRequest(i0 *ioteventsdata.BatchPutMessageInput) (r0 *request.Request, r1 *ioteventsdata.BatchPutMessageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutMessageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ioteventsdata.BatchPutMessageOutput)
	return
}

func (d *IoTEventsDataDouble) BatchPutMessageWithContext(i0 context.Context, i1 *ioteventsdata.BatchPutMessageInput, i2 ...request.Option) (r0 *ioteventsdata.BatchPutMessageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchPutMessageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ioteventsdata.BatchPutMessageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) fakeBatchPutMessageWithContext(ctx context.Context, in *ioteventsdata.BatchPutMessageInput, _ ...request.Option) (*ioteventsdata.BatchPutMessageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchPutMessage cancelled", ctx.Err())
	default:
		return d.BatchPutMessage(in)
	}
}

func (d *IoTEventsDataDouble) BatchUpdateDetector(i0 *ioteventsdata.BatchUpdateDetectorInput) (r0 *ioteventsdata.BatchUpdateDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchUpdateDetector", i0)
	r0, _ = returns[0].(*ioteventsdata.BatchUpdateDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) BatchUpdateDetectorRequest(i0 *ioteventsdata.BatchUpdateDetectorInput) (r0 *request.Request, r1 *ioteventsdata.BatchUpdateDetectorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchUpdateDetectorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ioteventsdata.BatchUpdateDetectorOutput)
	return
}

func (d *IoTEventsDataDouble) BatchUpdateDetectorWithContext(i0 context.Context, i1 *ioteventsdata.BatchUpdateDetectorInput, i2 ...request.Option) (r0 *ioteventsdata.BatchUpdateDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("BatchUpdateDetectorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ioteventsdata.BatchUpdateDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) fakeBatchUpdateDetectorWithContext(ctx context.Context, in *ioteventsdata.BatchUpdateDetectorInput, _ ...request.Option) (*ioteventsdata.BatchUpdateDetectorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "BatchUpdateDetector cancelled", ctx.Err())
	default:
		return d.BatchUpdateDetector(in)
	}
}

func (d *IoTEventsDataDouble) DescribeDetector(i0 *ioteventsdata.DescribeDetectorInput) (r0 *ioteventsdata.DescribeDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDetector", i0)
	r0, _ = returns[0].(*ioteventsdata.DescribeDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) DescribeDetectorRequest(i0 *ioteventsdata.DescribeDetectorInput) (r0 *request.Request, r1 *ioteventsdata.DescribeDetectorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDetectorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ioteventsdata.DescribeDetectorOutput)
	return
}

func (d *IoTEventsDataDouble) DescribeDetectorWithContext(i0 context.Context, i1 *ioteventsdata.DescribeDetectorInput, i2 ...request.Option) (r0 *ioteventsdata.DescribeDetectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeDetectorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ioteventsdata.DescribeDetectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) fakeDescribeDetectorWithContext(ctx context.Context, in *ioteventsdata.DescribeDetectorInput, _ ...request.Option) (*ioteventsdata.DescribeDetectorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeDetector cancelled", ctx.Err())
	default:
		return d.DescribeDetector(in)
	}
}

func (d *IoTEventsDataDouble) ListDetectors(i0 *ioteventsdata.ListDetectorsInput) (r0 *ioteventsdata.ListDetectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectors", i0)
	r0, _ = returns[0].(*ioteventsdata.ListDetectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) ListDetectorsRequest(i0 *ioteventsdata.ListDetectorsInput) (r0 *request.Request, r1 *ioteventsdata.ListDetectorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*ioteventsdata.ListDetectorsOutput)
	return
}

func (d *IoTEventsDataDouble) ListDetectorsWithContext(i0 context.Context, i1 *ioteventsdata.ListDetectorsInput, i2 ...request.Option) (r0 *ioteventsdata.ListDetectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListDetectorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*ioteventsdata.ListDetectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *IoTEventsDataDouble) fakeListDetectorsWithContext(ctx context.Context, in *ioteventsdata.ListDetectorsInput, _ ...request.Option) (*ioteventsdata.ListDetectorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListDetectors cancelled", ctx.Err())
	default:
		return d.ListDetectors(in)
	}
}
