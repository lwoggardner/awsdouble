// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:14:00+11:00

// Package mediatailordouble provides a TestDouble implementation of mediatailoriface.MediaTailorAPI
package mediatailordouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mediatailor"
	"github.com/aws/aws-sdk-go/service/mediatailor/mediatailoriface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// MediaTailorDouble is TestDouble for mediatailoriface.MediaTailorAPI
type MediaTailorDouble struct {
	mediatailoriface.MediaTailorAPI
	*awsdouble.AWSTestDouble
}

// Constructor for MediaTailorDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *MediaTailorDouble {
	result := &MediaTailorDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*mediatailoriface.MediaTailorAPI)(nil), configurators...)
	return result
}

func (d *MediaTailorDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *MediaTailorDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "DeletePlaybackConfigurationWithContext":
		return m.Fake(d.fakeDeletePlaybackConfigurationWithContext)

	case "GetPlaybackConfigurationWithContext":
		return m.Fake(d.fakeGetPlaybackConfigurationWithContext)

	case "ListPlaybackConfigurationsWithContext":
		return m.Fake(d.fakeListPlaybackConfigurationsWithContext)

	case "ListTagsForResourceWithContext":
		return m.Fake(d.fakeListTagsForResourceWithContext)

	case "PutPlaybackConfigurationWithContext":
		return m.Fake(d.fakePutPlaybackConfigurationWithContext)

	case "TagResourceWithContext":
		return m.Fake(d.fakeTagResourceWithContext)

	case "UntagResourceWithContext":
		return m.Fake(d.fakeUntagResourceWithContext)

	default:
		return nil
	}
}

func (d *MediaTailorDouble) DeletePlaybackConfiguration(i0 *mediatailor.DeletePlaybackConfigurationInput) (r0 *mediatailor.DeletePlaybackConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlaybackConfiguration", i0)
	r0, _ = returns[0].(*mediatailor.DeletePlaybackConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) DeletePlaybackConfigurationRequest(i0 *mediatailor.DeletePlaybackConfigurationInput) (r0 *request.Request, r1 *mediatailor.DeletePlaybackConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlaybackConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediatailor.DeletePlaybackConfigurationOutput)
	return
}

func (d *MediaTailorDouble) DeletePlaybackConfigurationWithContext(i0 context.Context, i1 *mediatailor.DeletePlaybackConfigurationInput, i2 ...request.Option) (r0 *mediatailor.DeletePlaybackConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeletePlaybackConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediatailor.DeletePlaybackConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) fakeDeletePlaybackConfigurationWithContext(ctx context.Context, in *mediatailor.DeletePlaybackConfigurationInput, _ ...request.Option) (*mediatailor.DeletePlaybackConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeletePlaybackConfiguration cancelled", ctx.Err())
	default:
		return d.DeletePlaybackConfiguration(in)
	}
}

func (d *MediaTailorDouble) GetPlaybackConfiguration(i0 *mediatailor.GetPlaybackConfigurationInput) (r0 *mediatailor.GetPlaybackConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPlaybackConfiguration", i0)
	r0, _ = returns[0].(*mediatailor.GetPlaybackConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) GetPlaybackConfigurationRequest(i0 *mediatailor.GetPlaybackConfigurationInput) (r0 *request.Request, r1 *mediatailor.GetPlaybackConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPlaybackConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediatailor.GetPlaybackConfigurationOutput)
	return
}

func (d *MediaTailorDouble) GetPlaybackConfigurationWithContext(i0 context.Context, i1 *mediatailor.GetPlaybackConfigurationInput, i2 ...request.Option) (r0 *mediatailor.GetPlaybackConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetPlaybackConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediatailor.GetPlaybackConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) fakeGetPlaybackConfigurationWithContext(ctx context.Context, in *mediatailor.GetPlaybackConfigurationInput, _ ...request.Option) (*mediatailor.GetPlaybackConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetPlaybackConfiguration cancelled", ctx.Err())
	default:
		return d.GetPlaybackConfiguration(in)
	}
}

func (d *MediaTailorDouble) ListPlaybackConfigurations(i0 *mediatailor.ListPlaybackConfigurationsInput) (r0 *mediatailor.ListPlaybackConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlaybackConfigurations", i0)
	r0, _ = returns[0].(*mediatailor.ListPlaybackConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) ListPlaybackConfigurationsRequest(i0 *mediatailor.ListPlaybackConfigurationsInput) (r0 *request.Request, r1 *mediatailor.ListPlaybackConfigurationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlaybackConfigurationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediatailor.ListPlaybackConfigurationsOutput)
	return
}

func (d *MediaTailorDouble) ListPlaybackConfigurationsWithContext(i0 context.Context, i1 *mediatailor.ListPlaybackConfigurationsInput, i2 ...request.Option) (r0 *mediatailor.ListPlaybackConfigurationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListPlaybackConfigurationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediatailor.ListPlaybackConfigurationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) fakeListPlaybackConfigurationsWithContext(ctx context.Context, in *mediatailor.ListPlaybackConfigurationsInput, _ ...request.Option) (*mediatailor.ListPlaybackConfigurationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListPlaybackConfigurations cancelled", ctx.Err())
	default:
		return d.ListPlaybackConfigurations(in)
	}
}

func (d *MediaTailorDouble) ListTagsForResource(i0 *mediatailor.ListTagsForResourceInput) (r0 *mediatailor.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResource", i0)
	r0, _ = returns[0].(*mediatailor.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) ListTagsForResourceRequest(i0 *mediatailor.ListTagsForResourceInput) (r0 *request.Request, r1 *mediatailor.ListTagsForResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediatailor.ListTagsForResourceOutput)
	return
}

func (d *MediaTailorDouble) ListTagsForResourceWithContext(i0 context.Context, i1 *mediatailor.ListTagsForResourceInput, i2 ...request.Option) (r0 *mediatailor.ListTagsForResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListTagsForResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediatailor.ListTagsForResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) fakeListTagsForResourceWithContext(ctx context.Context, in *mediatailor.ListTagsForResourceInput, _ ...request.Option) (*mediatailor.ListTagsForResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListTagsForResource cancelled", ctx.Err())
	default:
		return d.ListTagsForResource(in)
	}
}

func (d *MediaTailorDouble) PutPlaybackConfiguration(i0 *mediatailor.PutPlaybackConfigurationInput) (r0 *mediatailor.PutPlaybackConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPlaybackConfiguration", i0)
	r0, _ = returns[0].(*mediatailor.PutPlaybackConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) PutPlaybackConfigurationRequest(i0 *mediatailor.PutPlaybackConfigurationInput) (r0 *request.Request, r1 *mediatailor.PutPlaybackConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPlaybackConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediatailor.PutPlaybackConfigurationOutput)
	return
}

func (d *MediaTailorDouble) PutPlaybackConfigurationWithContext(i0 context.Context, i1 *mediatailor.PutPlaybackConfigurationInput, i2 ...request.Option) (r0 *mediatailor.PutPlaybackConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutPlaybackConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediatailor.PutPlaybackConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) fakePutPlaybackConfigurationWithContext(ctx context.Context, in *mediatailor.PutPlaybackConfigurationInput, _ ...request.Option) (*mediatailor.PutPlaybackConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutPlaybackConfiguration cancelled", ctx.Err())
	default:
		return d.PutPlaybackConfiguration(in)
	}
}

func (d *MediaTailorDouble) TagResource(i0 *mediatailor.TagResourceInput) (r0 *mediatailor.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResource", i0)
	r0, _ = returns[0].(*mediatailor.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) TagResourceRequest(i0 *mediatailor.TagResourceInput) (r0 *request.Request, r1 *mediatailor.TagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediatailor.TagResourceOutput)
	return
}

func (d *MediaTailorDouble) TagResourceWithContext(i0 context.Context, i1 *mediatailor.TagResourceInput, i2 ...request.Option) (r0 *mediatailor.TagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediatailor.TagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) fakeTagResourceWithContext(ctx context.Context, in *mediatailor.TagResourceInput, _ ...request.Option) (*mediatailor.TagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TagResource cancelled", ctx.Err())
	default:
		return d.TagResource(in)
	}
}

func (d *MediaTailorDouble) UntagResource(i0 *mediatailor.UntagResourceInput) (r0 *mediatailor.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResource", i0)
	r0, _ = returns[0].(*mediatailor.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) UntagResourceRequest(i0 *mediatailor.UntagResourceInput) (r0 *request.Request, r1 *mediatailor.UntagResourceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*mediatailor.UntagResourceOutput)
	return
}

func (d *MediaTailorDouble) UntagResourceWithContext(i0 context.Context, i1 *mediatailor.UntagResourceInput, i2 ...request.Option) (r0 *mediatailor.UntagResourceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UntagResourceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*mediatailor.UntagResourceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *MediaTailorDouble) fakeUntagResourceWithContext(ctx context.Context, in *mediatailor.UntagResourceInput, _ ...request.Option) (*mediatailor.UntagResourceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UntagResource cancelled", ctx.Err())
	default:
		return d.UntagResource(in)
	}
}
