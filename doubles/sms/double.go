// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:08+11:00

// Package smsdouble provides a TestDouble implementation of smsiface.SMSAPI
package smsdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sms"
	"github.com/aws/aws-sdk-go/service/sms/smsiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// SMSDouble is TestDouble for smsiface.SMSAPI
type SMSDouble struct {
	smsiface.SMSAPI
	*awsdouble.AWSTestDouble
}

// Constructor for SMSDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *SMSDouble {
	result := &SMSDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*smsiface.SMSAPI)(nil), configurators...)
	return result
}

func (d *SMSDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *SMSDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "CreateAppWithContext":
		return m.Fake(d.fakeCreateAppWithContext)

	case "CreateReplicationJobWithContext":
		return m.Fake(d.fakeCreateReplicationJobWithContext)

	case "DeleteAppLaunchConfigurationWithContext":
		return m.Fake(d.fakeDeleteAppLaunchConfigurationWithContext)

	case "DeleteAppReplicationConfigurationWithContext":
		return m.Fake(d.fakeDeleteAppReplicationConfigurationWithContext)

	case "DeleteAppWithContext":
		return m.Fake(d.fakeDeleteAppWithContext)

	case "DeleteReplicationJobWithContext":
		return m.Fake(d.fakeDeleteReplicationJobWithContext)

	case "DeleteServerCatalogWithContext":
		return m.Fake(d.fakeDeleteServerCatalogWithContext)

	case "DisassociateConnectorWithContext":
		return m.Fake(d.fakeDisassociateConnectorWithContext)

	case "GenerateChangeSetWithContext":
		return m.Fake(d.fakeGenerateChangeSetWithContext)

	case "GenerateTemplateWithContext":
		return m.Fake(d.fakeGenerateTemplateWithContext)

	case "GetAppLaunchConfigurationWithContext":
		return m.Fake(d.fakeGetAppLaunchConfigurationWithContext)

	case "GetAppReplicationConfigurationWithContext":
		return m.Fake(d.fakeGetAppReplicationConfigurationWithContext)

	case "GetAppWithContext":
		return m.Fake(d.fakeGetAppWithContext)

	case "GetConnectorsPages":
		return m.Fake(d.fakeGetConnectorsPages)

	case "GetConnectorsPagesWithContext":
		return m.Fake(d.fakeGetConnectorsPagesWithContext)

	case "GetConnectorsWithContext":
		return m.Fake(d.fakeGetConnectorsWithContext)

	case "GetReplicationJobsPages":
		return m.Fake(d.fakeGetReplicationJobsPages)

	case "GetReplicationJobsPagesWithContext":
		return m.Fake(d.fakeGetReplicationJobsPagesWithContext)

	case "GetReplicationJobsWithContext":
		return m.Fake(d.fakeGetReplicationJobsWithContext)

	case "GetReplicationRunsPages":
		return m.Fake(d.fakeGetReplicationRunsPages)

	case "GetReplicationRunsPagesWithContext":
		return m.Fake(d.fakeGetReplicationRunsPagesWithContext)

	case "GetReplicationRunsWithContext":
		return m.Fake(d.fakeGetReplicationRunsWithContext)

	case "GetServersPages":
		return m.Fake(d.fakeGetServersPages)

	case "GetServersPagesWithContext":
		return m.Fake(d.fakeGetServersPagesWithContext)

	case "GetServersWithContext":
		return m.Fake(d.fakeGetServersWithContext)

	case "ImportServerCatalogWithContext":
		return m.Fake(d.fakeImportServerCatalogWithContext)

	case "LaunchAppWithContext":
		return m.Fake(d.fakeLaunchAppWithContext)

	case "ListAppsWithContext":
		return m.Fake(d.fakeListAppsWithContext)

	case "PutAppLaunchConfigurationWithContext":
		return m.Fake(d.fakePutAppLaunchConfigurationWithContext)

	case "PutAppReplicationConfigurationWithContext":
		return m.Fake(d.fakePutAppReplicationConfigurationWithContext)

	case "StartAppReplicationWithContext":
		return m.Fake(d.fakeStartAppReplicationWithContext)

	case "StartOnDemandReplicationRunWithContext":
		return m.Fake(d.fakeStartOnDemandReplicationRunWithContext)

	case "StopAppReplicationWithContext":
		return m.Fake(d.fakeStopAppReplicationWithContext)

	case "TerminateAppWithContext":
		return m.Fake(d.fakeTerminateAppWithContext)

	case "UpdateAppWithContext":
		return m.Fake(d.fakeUpdateAppWithContext)

	case "UpdateReplicationJobWithContext":
		return m.Fake(d.fakeUpdateReplicationJobWithContext)

	default:
		return nil
	}
}

func (d *SMSDouble) CreateApp(i0 *sms.CreateAppInput) (r0 *sms.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateApp", i0)
	r0, _ = returns[0].(*sms.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) CreateAppRequest(i0 *sms.CreateAppInput) (r0 *request.Request, r1 *sms.CreateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.CreateAppOutput)
	return
}

func (d *SMSDouble) CreateAppWithContext(i0 context.Context, i1 *sms.CreateAppInput, i2 ...request.Option) (r0 *sms.CreateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.CreateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeCreateAppWithContext(ctx context.Context, in *sms.CreateAppInput, _ ...request.Option) (*sms.CreateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateApp cancelled", ctx.Err())
	default:
		return d.CreateApp(in)
	}
}

func (d *SMSDouble) CreateReplicationJob(i0 *sms.CreateReplicationJobInput) (r0 *sms.CreateReplicationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationJob", i0)
	r0, _ = returns[0].(*sms.CreateReplicationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) CreateReplicationJobRequest(i0 *sms.CreateReplicationJobInput) (r0 *request.Request, r1 *sms.CreateReplicationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.CreateReplicationJobOutput)
	return
}

func (d *SMSDouble) CreateReplicationJobWithContext(i0 context.Context, i1 *sms.CreateReplicationJobInput, i2 ...request.Option) (r0 *sms.CreateReplicationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateReplicationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.CreateReplicationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeCreateReplicationJobWithContext(ctx context.Context, in *sms.CreateReplicationJobInput, _ ...request.Option) (*sms.CreateReplicationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateReplicationJob cancelled", ctx.Err())
	default:
		return d.CreateReplicationJob(in)
	}
}

func (d *SMSDouble) DeleteApp(i0 *sms.DeleteAppInput) (r0 *sms.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteApp", i0)
	r0, _ = returns[0].(*sms.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) DeleteAppLaunchConfiguration(i0 *sms.DeleteAppLaunchConfigurationInput) (r0 *sms.DeleteAppLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppLaunchConfiguration", i0)
	r0, _ = returns[0].(*sms.DeleteAppLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) DeleteAppLaunchConfigurationRequest(i0 *sms.DeleteAppLaunchConfigurationInput) (r0 *request.Request, r1 *sms.DeleteAppLaunchConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppLaunchConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.DeleteAppLaunchConfigurationOutput)
	return
}

func (d *SMSDouble) DeleteAppLaunchConfigurationWithContext(i0 context.Context, i1 *sms.DeleteAppLaunchConfigurationInput, i2 ...request.Option) (r0 *sms.DeleteAppLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppLaunchConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.DeleteAppLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeDeleteAppLaunchConfigurationWithContext(ctx context.Context, in *sms.DeleteAppLaunchConfigurationInput, _ ...request.Option) (*sms.DeleteAppLaunchConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAppLaunchConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteAppLaunchConfiguration(in)
	}
}

func (d *SMSDouble) DeleteAppReplicationConfiguration(i0 *sms.DeleteAppReplicationConfigurationInput) (r0 *sms.DeleteAppReplicationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppReplicationConfiguration", i0)
	r0, _ = returns[0].(*sms.DeleteAppReplicationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) DeleteAppReplicationConfigurationRequest(i0 *sms.DeleteAppReplicationConfigurationInput) (r0 *request.Request, r1 *sms.DeleteAppReplicationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppReplicationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.DeleteAppReplicationConfigurationOutput)
	return
}

func (d *SMSDouble) DeleteAppReplicationConfigurationWithContext(i0 context.Context, i1 *sms.DeleteAppReplicationConfigurationInput, i2 ...request.Option) (r0 *sms.DeleteAppReplicationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppReplicationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.DeleteAppReplicationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeDeleteAppReplicationConfigurationWithContext(ctx context.Context, in *sms.DeleteAppReplicationConfigurationInput, _ ...request.Option) (*sms.DeleteAppReplicationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteAppReplicationConfiguration cancelled", ctx.Err())
	default:
		return d.DeleteAppReplicationConfiguration(in)
	}
}

func (d *SMSDouble) DeleteAppRequest(i0 *sms.DeleteAppInput) (r0 *request.Request, r1 *sms.DeleteAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.DeleteAppOutput)
	return
}

func (d *SMSDouble) DeleteAppWithContext(i0 context.Context, i1 *sms.DeleteAppInput, i2 ...request.Option) (r0 *sms.DeleteAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.DeleteAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeDeleteAppWithContext(ctx context.Context, in *sms.DeleteAppInput, _ ...request.Option) (*sms.DeleteAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteApp cancelled", ctx.Err())
	default:
		return d.DeleteApp(in)
	}
}

func (d *SMSDouble) DeleteReplicationJob(i0 *sms.DeleteReplicationJobInput) (r0 *sms.DeleteReplicationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationJob", i0)
	r0, _ = returns[0].(*sms.DeleteReplicationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) DeleteReplicationJobRequest(i0 *sms.DeleteReplicationJobInput) (r0 *request.Request, r1 *sms.DeleteReplicationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.DeleteReplicationJobOutput)
	return
}

func (d *SMSDouble) DeleteReplicationJobWithContext(i0 context.Context, i1 *sms.DeleteReplicationJobInput, i2 ...request.Option) (r0 *sms.DeleteReplicationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteReplicationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.DeleteReplicationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeDeleteReplicationJobWithContext(ctx context.Context, in *sms.DeleteReplicationJobInput, _ ...request.Option) (*sms.DeleteReplicationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteReplicationJob cancelled", ctx.Err())
	default:
		return d.DeleteReplicationJob(in)
	}
}

func (d *SMSDouble) DeleteServerCatalog(i0 *sms.DeleteServerCatalogInput) (r0 *sms.DeleteServerCatalogOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerCatalog", i0)
	r0, _ = returns[0].(*sms.DeleteServerCatalogOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) DeleteServerCatalogRequest(i0 *sms.DeleteServerCatalogInput) (r0 *request.Request, r1 *sms.DeleteServerCatalogOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerCatalogRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.DeleteServerCatalogOutput)
	return
}

func (d *SMSDouble) DeleteServerCatalogWithContext(i0 context.Context, i1 *sms.DeleteServerCatalogInput, i2 ...request.Option) (r0 *sms.DeleteServerCatalogOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteServerCatalogWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.DeleteServerCatalogOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeDeleteServerCatalogWithContext(ctx context.Context, in *sms.DeleteServerCatalogInput, _ ...request.Option) (*sms.DeleteServerCatalogOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteServerCatalog cancelled", ctx.Err())
	default:
		return d.DeleteServerCatalog(in)
	}
}

func (d *SMSDouble) DisassociateConnector(i0 *sms.DisassociateConnectorInput) (r0 *sms.DisassociateConnectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateConnector", i0)
	r0, _ = returns[0].(*sms.DisassociateConnectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) DisassociateConnectorRequest(i0 *sms.DisassociateConnectorInput) (r0 *request.Request, r1 *sms.DisassociateConnectorOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateConnectorRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.DisassociateConnectorOutput)
	return
}

func (d *SMSDouble) DisassociateConnectorWithContext(i0 context.Context, i1 *sms.DisassociateConnectorInput, i2 ...request.Option) (r0 *sms.DisassociateConnectorOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateConnectorWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.DisassociateConnectorOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeDisassociateConnectorWithContext(ctx context.Context, in *sms.DisassociateConnectorInput, _ ...request.Option) (*sms.DisassociateConnectorOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateConnector cancelled", ctx.Err())
	default:
		return d.DisassociateConnector(in)
	}
}

func (d *SMSDouble) GenerateChangeSet(i0 *sms.GenerateChangeSetInput) (r0 *sms.GenerateChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateChangeSet", i0)
	r0, _ = returns[0].(*sms.GenerateChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GenerateChangeSetRequest(i0 *sms.GenerateChangeSetInput) (r0 *request.Request, r1 *sms.GenerateChangeSetOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateChangeSetRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GenerateChangeSetOutput)
	return
}

func (d *SMSDouble) GenerateChangeSetWithContext(i0 context.Context, i1 *sms.GenerateChangeSetInput, i2 ...request.Option) (r0 *sms.GenerateChangeSetOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateChangeSetWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GenerateChangeSetOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGenerateChangeSetWithContext(ctx context.Context, in *sms.GenerateChangeSetInput, _ ...request.Option) (*sms.GenerateChangeSetOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateChangeSet cancelled", ctx.Err())
	default:
		return d.GenerateChangeSet(in)
	}
}

func (d *SMSDouble) GenerateTemplate(i0 *sms.GenerateTemplateInput) (r0 *sms.GenerateTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateTemplate", i0)
	r0, _ = returns[0].(*sms.GenerateTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GenerateTemplateRequest(i0 *sms.GenerateTemplateInput) (r0 *request.Request, r1 *sms.GenerateTemplateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateTemplateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GenerateTemplateOutput)
	return
}

func (d *SMSDouble) GenerateTemplateWithContext(i0 context.Context, i1 *sms.GenerateTemplateInput, i2 ...request.Option) (r0 *sms.GenerateTemplateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GenerateTemplateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GenerateTemplateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGenerateTemplateWithContext(ctx context.Context, in *sms.GenerateTemplateInput, _ ...request.Option) (*sms.GenerateTemplateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GenerateTemplate cancelled", ctx.Err())
	default:
		return d.GenerateTemplate(in)
	}
}

func (d *SMSDouble) GetApp(i0 *sms.GetAppInput) (r0 *sms.GetAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetApp", i0)
	r0, _ = returns[0].(*sms.GetAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GetAppLaunchConfiguration(i0 *sms.GetAppLaunchConfigurationInput) (r0 *sms.GetAppLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppLaunchConfiguration", i0)
	r0, _ = returns[0].(*sms.GetAppLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GetAppLaunchConfigurationRequest(i0 *sms.GetAppLaunchConfigurationInput) (r0 *request.Request, r1 *sms.GetAppLaunchConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppLaunchConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GetAppLaunchConfigurationOutput)
	return
}

func (d *SMSDouble) GetAppLaunchConfigurationWithContext(i0 context.Context, i1 *sms.GetAppLaunchConfigurationInput, i2 ...request.Option) (r0 *sms.GetAppLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppLaunchConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GetAppLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGetAppLaunchConfigurationWithContext(ctx context.Context, in *sms.GetAppLaunchConfigurationInput, _ ...request.Option) (*sms.GetAppLaunchConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAppLaunchConfiguration cancelled", ctx.Err())
	default:
		return d.GetAppLaunchConfiguration(in)
	}
}

func (d *SMSDouble) GetAppReplicationConfiguration(i0 *sms.GetAppReplicationConfigurationInput) (r0 *sms.GetAppReplicationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppReplicationConfiguration", i0)
	r0, _ = returns[0].(*sms.GetAppReplicationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GetAppReplicationConfigurationRequest(i0 *sms.GetAppReplicationConfigurationInput) (r0 *request.Request, r1 *sms.GetAppReplicationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppReplicationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GetAppReplicationConfigurationOutput)
	return
}

func (d *SMSDouble) GetAppReplicationConfigurationWithContext(i0 context.Context, i1 *sms.GetAppReplicationConfigurationInput, i2 ...request.Option) (r0 *sms.GetAppReplicationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppReplicationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GetAppReplicationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGetAppReplicationConfigurationWithContext(ctx context.Context, in *sms.GetAppReplicationConfigurationInput, _ ...request.Option) (*sms.GetAppReplicationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetAppReplicationConfiguration cancelled", ctx.Err())
	default:
		return d.GetAppReplicationConfiguration(in)
	}
}

func (d *SMSDouble) GetAppRequest(i0 *sms.GetAppInput) (r0 *request.Request, r1 *sms.GetAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GetAppOutput)
	return
}

func (d *SMSDouble) GetAppWithContext(i0 context.Context, i1 *sms.GetAppInput, i2 ...request.Option) (r0 *sms.GetAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GetAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGetAppWithContext(ctx context.Context, in *sms.GetAppInput, _ ...request.Option) (*sms.GetAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetApp cancelled", ctx.Err())
	default:
		return d.GetApp(in)
	}
}

func (d *SMSDouble) GetConnectors(i0 *sms.GetConnectorsInput) (r0 *sms.GetConnectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectors", i0)
	r0, _ = returns[0].(*sms.GetConnectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GetConnectorsPages(i0 *sms.GetConnectorsInput, i1 func(*sms.GetConnectorsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetConnectorsPages(in *sms.GetConnectorsInput, pager func(*sms.GetConnectorsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetConnectors", paginators, in, pager)
}

func (d *SMSDouble) GetConnectorsPagesWithContext(i0 context.Context, i1 *sms.GetConnectorsInput, i2 func(*sms.GetConnectorsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetConnectorsPagesWithContext(ctx context.Context, in *sms.GetConnectorsInput, pager func(*sms.GetConnectorsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetConnectors", paginators, ctx, in, pager, options...)
}

func (d *SMSDouble) GetConnectorsRequest(i0 *sms.GetConnectorsInput) (r0 *request.Request, r1 *sms.GetConnectorsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GetConnectorsOutput)
	return
}

func (d *SMSDouble) GetConnectorsWithContext(i0 context.Context, i1 *sms.GetConnectorsInput, i2 ...request.Option) (r0 *sms.GetConnectorsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetConnectorsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GetConnectorsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGetConnectorsWithContext(ctx context.Context, in *sms.GetConnectorsInput, _ ...request.Option) (*sms.GetConnectorsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetConnectors cancelled", ctx.Err())
	default:
		return d.GetConnectors(in)
	}
}

func (d *SMSDouble) GetReplicationJobs(i0 *sms.GetReplicationJobsInput) (r0 *sms.GetReplicationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationJobs", i0)
	r0, _ = returns[0].(*sms.GetReplicationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GetReplicationJobsPages(i0 *sms.GetReplicationJobsInput, i1 func(*sms.GetReplicationJobsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationJobsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetReplicationJobsPages(in *sms.GetReplicationJobsInput, pager func(*sms.GetReplicationJobsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetReplicationJobs", paginators, in, pager)
}

func (d *SMSDouble) GetReplicationJobsPagesWithContext(i0 context.Context, i1 *sms.GetReplicationJobsInput, i2 func(*sms.GetReplicationJobsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationJobsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetReplicationJobsPagesWithContext(ctx context.Context, in *sms.GetReplicationJobsInput, pager func(*sms.GetReplicationJobsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetReplicationJobs", paginators, ctx, in, pager, options...)
}

func (d *SMSDouble) GetReplicationJobsRequest(i0 *sms.GetReplicationJobsInput) (r0 *request.Request, r1 *sms.GetReplicationJobsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationJobsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GetReplicationJobsOutput)
	return
}

func (d *SMSDouble) GetReplicationJobsWithContext(i0 context.Context, i1 *sms.GetReplicationJobsInput, i2 ...request.Option) (r0 *sms.GetReplicationJobsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationJobsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GetReplicationJobsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGetReplicationJobsWithContext(ctx context.Context, in *sms.GetReplicationJobsInput, _ ...request.Option) (*sms.GetReplicationJobsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetReplicationJobs cancelled", ctx.Err())
	default:
		return d.GetReplicationJobs(in)
	}
}

func (d *SMSDouble) GetReplicationRuns(i0 *sms.GetReplicationRunsInput) (r0 *sms.GetReplicationRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationRuns", i0)
	r0, _ = returns[0].(*sms.GetReplicationRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GetReplicationRunsPages(i0 *sms.GetReplicationRunsInput, i1 func(*sms.GetReplicationRunsOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationRunsPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetReplicationRunsPages(in *sms.GetReplicationRunsInput, pager func(*sms.GetReplicationRunsOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetReplicationRuns", paginators, in, pager)
}

func (d *SMSDouble) GetReplicationRunsPagesWithContext(i0 context.Context, i1 *sms.GetReplicationRunsInput, i2 func(*sms.GetReplicationRunsOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationRunsPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetReplicationRunsPagesWithContext(ctx context.Context, in *sms.GetReplicationRunsInput, pager func(*sms.GetReplicationRunsOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetReplicationRuns", paginators, ctx, in, pager, options...)
}

func (d *SMSDouble) GetReplicationRunsRequest(i0 *sms.GetReplicationRunsInput) (r0 *request.Request, r1 *sms.GetReplicationRunsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationRunsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GetReplicationRunsOutput)
	return
}

func (d *SMSDouble) GetReplicationRunsWithContext(i0 context.Context, i1 *sms.GetReplicationRunsInput, i2 ...request.Option) (r0 *sms.GetReplicationRunsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetReplicationRunsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GetReplicationRunsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGetReplicationRunsWithContext(ctx context.Context, in *sms.GetReplicationRunsInput, _ ...request.Option) (*sms.GetReplicationRunsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetReplicationRuns cancelled", ctx.Err())
	default:
		return d.GetReplicationRuns(in)
	}
}

func (d *SMSDouble) GetServers(i0 *sms.GetServersInput) (r0 *sms.GetServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServers", i0)
	r0, _ = returns[0].(*sms.GetServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) GetServersPages(i0 *sms.GetServersInput, i1 func(*sms.GetServersOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServersPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetServersPages(in *sms.GetServersInput, pager func(*sms.GetServersOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("GetServers", paginators, in, pager)
}

func (d *SMSDouble) GetServersPagesWithContext(i0 context.Context, i1 *sms.GetServersInput, i2 func(*sms.GetServersOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServersPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *SMSDouble) fakeGetServersPagesWithContext(ctx context.Context, in *sms.GetServersInput, pager func(*sms.GetServersOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("GetServers", paginators, ctx, in, pager, options...)
}

func (d *SMSDouble) GetServersRequest(i0 *sms.GetServersInput) (r0 *request.Request, r1 *sms.GetServersOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServersRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.GetServersOutput)
	return
}

func (d *SMSDouble) GetServersWithContext(i0 context.Context, i1 *sms.GetServersInput, i2 ...request.Option) (r0 *sms.GetServersOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("GetServersWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.GetServersOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeGetServersWithContext(ctx context.Context, in *sms.GetServersInput, _ ...request.Option) (*sms.GetServersOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "GetServers cancelled", ctx.Err())
	default:
		return d.GetServers(in)
	}
}

func (d *SMSDouble) ImportServerCatalog(i0 *sms.ImportServerCatalogInput) (r0 *sms.ImportServerCatalogOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportServerCatalog", i0)
	r0, _ = returns[0].(*sms.ImportServerCatalogOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) ImportServerCatalogRequest(i0 *sms.ImportServerCatalogInput) (r0 *request.Request, r1 *sms.ImportServerCatalogOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportServerCatalogRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.ImportServerCatalogOutput)
	return
}

func (d *SMSDouble) ImportServerCatalogWithContext(i0 context.Context, i1 *sms.ImportServerCatalogInput, i2 ...request.Option) (r0 *sms.ImportServerCatalogOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportServerCatalogWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.ImportServerCatalogOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeImportServerCatalogWithContext(ctx context.Context, in *sms.ImportServerCatalogInput, _ ...request.Option) (*sms.ImportServerCatalogOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportServerCatalog cancelled", ctx.Err())
	default:
		return d.ImportServerCatalog(in)
	}
}

func (d *SMSDouble) LaunchApp(i0 *sms.LaunchAppInput) (r0 *sms.LaunchAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LaunchApp", i0)
	r0, _ = returns[0].(*sms.LaunchAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) LaunchAppRequest(i0 *sms.LaunchAppInput) (r0 *request.Request, r1 *sms.LaunchAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LaunchAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.LaunchAppOutput)
	return
}

func (d *SMSDouble) LaunchAppWithContext(i0 context.Context, i1 *sms.LaunchAppInput, i2 ...request.Option) (r0 *sms.LaunchAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("LaunchAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.LaunchAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeLaunchAppWithContext(ctx context.Context, in *sms.LaunchAppInput, _ ...request.Option) (*sms.LaunchAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "LaunchApp cancelled", ctx.Err())
	default:
		return d.LaunchApp(in)
	}
}

func (d *SMSDouble) ListApps(i0 *sms.ListAppsInput) (r0 *sms.ListAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListApps", i0)
	r0, _ = returns[0].(*sms.ListAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) ListAppsRequest(i0 *sms.ListAppsInput) (r0 *request.Request, r1 *sms.ListAppsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.ListAppsOutput)
	return
}

func (d *SMSDouble) ListAppsWithContext(i0 context.Context, i1 *sms.ListAppsInput, i2 ...request.Option) (r0 *sms.ListAppsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAppsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.ListAppsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeListAppsWithContext(ctx context.Context, in *sms.ListAppsInput, _ ...request.Option) (*sms.ListAppsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListApps cancelled", ctx.Err())
	default:
		return d.ListApps(in)
	}
}

func (d *SMSDouble) PutAppLaunchConfiguration(i0 *sms.PutAppLaunchConfigurationInput) (r0 *sms.PutAppLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAppLaunchConfiguration", i0)
	r0, _ = returns[0].(*sms.PutAppLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) PutAppLaunchConfigurationRequest(i0 *sms.PutAppLaunchConfigurationInput) (r0 *request.Request, r1 *sms.PutAppLaunchConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAppLaunchConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.PutAppLaunchConfigurationOutput)
	return
}

func (d *SMSDouble) PutAppLaunchConfigurationWithContext(i0 context.Context, i1 *sms.PutAppLaunchConfigurationInput, i2 ...request.Option) (r0 *sms.PutAppLaunchConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAppLaunchConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.PutAppLaunchConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakePutAppLaunchConfigurationWithContext(ctx context.Context, in *sms.PutAppLaunchConfigurationInput, _ ...request.Option) (*sms.PutAppLaunchConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAppLaunchConfiguration cancelled", ctx.Err())
	default:
		return d.PutAppLaunchConfiguration(in)
	}
}

func (d *SMSDouble) PutAppReplicationConfiguration(i0 *sms.PutAppReplicationConfigurationInput) (r0 *sms.PutAppReplicationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAppReplicationConfiguration", i0)
	r0, _ = returns[0].(*sms.PutAppReplicationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) PutAppReplicationConfigurationRequest(i0 *sms.PutAppReplicationConfigurationInput) (r0 *request.Request, r1 *sms.PutAppReplicationConfigurationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAppReplicationConfigurationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.PutAppReplicationConfigurationOutput)
	return
}

func (d *SMSDouble) PutAppReplicationConfigurationWithContext(i0 context.Context, i1 *sms.PutAppReplicationConfigurationInput, i2 ...request.Option) (r0 *sms.PutAppReplicationConfigurationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("PutAppReplicationConfigurationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.PutAppReplicationConfigurationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakePutAppReplicationConfigurationWithContext(ctx context.Context, in *sms.PutAppReplicationConfigurationInput, _ ...request.Option) (*sms.PutAppReplicationConfigurationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "PutAppReplicationConfiguration cancelled", ctx.Err())
	default:
		return d.PutAppReplicationConfiguration(in)
	}
}

func (d *SMSDouble) StartAppReplication(i0 *sms.StartAppReplicationInput) (r0 *sms.StartAppReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAppReplication", i0)
	r0, _ = returns[0].(*sms.StartAppReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) StartAppReplicationRequest(i0 *sms.StartAppReplicationInput) (r0 *request.Request, r1 *sms.StartAppReplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAppReplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.StartAppReplicationOutput)
	return
}

func (d *SMSDouble) StartAppReplicationWithContext(i0 context.Context, i1 *sms.StartAppReplicationInput, i2 ...request.Option) (r0 *sms.StartAppReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartAppReplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.StartAppReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeStartAppReplicationWithContext(ctx context.Context, in *sms.StartAppReplicationInput, _ ...request.Option) (*sms.StartAppReplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartAppReplication cancelled", ctx.Err())
	default:
		return d.StartAppReplication(in)
	}
}

func (d *SMSDouble) StartOnDemandReplicationRun(i0 *sms.StartOnDemandReplicationRunInput) (r0 *sms.StartOnDemandReplicationRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOnDemandReplicationRun", i0)
	r0, _ = returns[0].(*sms.StartOnDemandReplicationRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) StartOnDemandReplicationRunRequest(i0 *sms.StartOnDemandReplicationRunInput) (r0 *request.Request, r1 *sms.StartOnDemandReplicationRunOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOnDemandReplicationRunRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.StartOnDemandReplicationRunOutput)
	return
}

func (d *SMSDouble) StartOnDemandReplicationRunWithContext(i0 context.Context, i1 *sms.StartOnDemandReplicationRunInput, i2 ...request.Option) (r0 *sms.StartOnDemandReplicationRunOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartOnDemandReplicationRunWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.StartOnDemandReplicationRunOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeStartOnDemandReplicationRunWithContext(ctx context.Context, in *sms.StartOnDemandReplicationRunInput, _ ...request.Option) (*sms.StartOnDemandReplicationRunOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartOnDemandReplicationRun cancelled", ctx.Err())
	default:
		return d.StartOnDemandReplicationRun(in)
	}
}

func (d *SMSDouble) StopAppReplication(i0 *sms.StopAppReplicationInput) (r0 *sms.StopAppReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAppReplication", i0)
	r0, _ = returns[0].(*sms.StopAppReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) StopAppReplicationRequest(i0 *sms.StopAppReplicationInput) (r0 *request.Request, r1 *sms.StopAppReplicationOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAppReplicationRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.StopAppReplicationOutput)
	return
}

func (d *SMSDouble) StopAppReplicationWithContext(i0 context.Context, i1 *sms.StopAppReplicationInput, i2 ...request.Option) (r0 *sms.StopAppReplicationOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopAppReplicationWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.StopAppReplicationOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeStopAppReplicationWithContext(ctx context.Context, in *sms.StopAppReplicationInput, _ ...request.Option) (*sms.StopAppReplicationOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopAppReplication cancelled", ctx.Err())
	default:
		return d.StopAppReplication(in)
	}
}

func (d *SMSDouble) TerminateApp(i0 *sms.TerminateAppInput) (r0 *sms.TerminateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateApp", i0)
	r0, _ = returns[0].(*sms.TerminateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) TerminateAppRequest(i0 *sms.TerminateAppInput) (r0 *request.Request, r1 *sms.TerminateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.TerminateAppOutput)
	return
}

func (d *SMSDouble) TerminateAppWithContext(i0 context.Context, i1 *sms.TerminateAppInput, i2 ...request.Option) (r0 *sms.TerminateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.TerminateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeTerminateAppWithContext(ctx context.Context, in *sms.TerminateAppInput, _ ...request.Option) (*sms.TerminateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateApp cancelled", ctx.Err())
	default:
		return d.TerminateApp(in)
	}
}

func (d *SMSDouble) UpdateApp(i0 *sms.UpdateAppInput) (r0 *sms.UpdateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateApp", i0)
	r0, _ = returns[0].(*sms.UpdateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) UpdateAppRequest(i0 *sms.UpdateAppInput) (r0 *request.Request, r1 *sms.UpdateAppOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAppRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.UpdateAppOutput)
	return
}

func (d *SMSDouble) UpdateAppWithContext(i0 context.Context, i1 *sms.UpdateAppInput, i2 ...request.Option) (r0 *sms.UpdateAppOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateAppWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.UpdateAppOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeUpdateAppWithContext(ctx context.Context, in *sms.UpdateAppInput, _ ...request.Option) (*sms.UpdateAppOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateApp cancelled", ctx.Err())
	default:
		return d.UpdateApp(in)
	}
}

func (d *SMSDouble) UpdateReplicationJob(i0 *sms.UpdateReplicationJobInput) (r0 *sms.UpdateReplicationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReplicationJob", i0)
	r0, _ = returns[0].(*sms.UpdateReplicationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) UpdateReplicationJobRequest(i0 *sms.UpdateReplicationJobInput) (r0 *request.Request, r1 *sms.UpdateReplicationJobOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReplicationJobRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*sms.UpdateReplicationJobOutput)
	return
}

func (d *SMSDouble) UpdateReplicationJobWithContext(i0 context.Context, i1 *sms.UpdateReplicationJobInput, i2 ...request.Option) (r0 *sms.UpdateReplicationJobOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateReplicationJobWithContext", i0, i1, i2)
	r0, _ = returns[0].(*sms.UpdateReplicationJobOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *SMSDouble) fakeUpdateReplicationJobWithContext(ctx context.Context, in *sms.UpdateReplicationJobInput, _ ...request.Option) (*sms.UpdateReplicationJobOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateReplicationJob cancelled", ctx.Err())
	default:
		return d.UpdateReplicationJob(in)
	}
}
