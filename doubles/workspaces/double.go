// Code generated by go doublegen; DO NOT EDIT.
// This file was generated at 2020-02-14T22:15:38+11:00

// Package workspacesdouble provides a TestDouble implementation of workspacesiface.WorkSpacesAPI
package workspacesdouble

import (
	"context"

	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/workspaces"
	"github.com/aws/aws-sdk-go/service/workspaces/workspacesiface"
	"github.com/lwoggardner/awsdouble"
	"github.com/lwoggardner/godouble/godouble"
)

// WorkSpacesDouble is TestDouble for workspacesiface.WorkSpacesAPI
type WorkSpacesDouble struct {
	workspacesiface.WorkSpacesAPI
	*awsdouble.AWSTestDouble
}

// Constructor for WorkSpacesDouble
// Default configuration will ensure
//   * API operations not explicitly stubbed will return an empty output struct pointer, and nil error.
//     To simulate long polling, "Poll" operations will return these values after a random delay of up to 100ms.
//   * WithContext methods implement a 'Fake' method that returns a cancellation error if the context is cancelled
//      before the method is called.
//   * Pages and PagesWithContext methods similarly implement a 'Fake' method that paginates over the underlying method.
//
//    This allows tests to only stub the simple api methods and be generally unconcerned whether the SUT is using the
//      Context or Pagination forms of the API.
//
func NewDouble(t godouble.T, configurators ...func(*awsdouble.AWSTestDouble)) *WorkSpacesDouble {
	result := &WorkSpacesDouble{}

	configurators = append([]func(configurator *awsdouble.AWSTestDouble){func(d *awsdouble.AWSTestDouble) {
		d.SetDefaultCall(result.defaultMethodCall)
		d.SetDefaultReturnValues(result.defaultReturnValues)
	}}, configurators...)

	result.AWSTestDouble = awsdouble.NewDouble(t, (*workspacesiface.WorkSpacesAPI)(nil), configurators...)
	return result
}

func (d *WorkSpacesDouble) defaultReturnValues(m godouble.Method) godouble.ReturnValues {
	return d.DefaultReturnValues(m)
}

func (d *WorkSpacesDouble) defaultMethodCall(m godouble.Method) godouble.MethodCall {
	switch m.Reflect().Name {

	case "AssociateIpGroupsWithContext":
		return m.Fake(d.fakeAssociateIpGroupsWithContext)

	case "AuthorizeIpRulesWithContext":
		return m.Fake(d.fakeAuthorizeIpRulesWithContext)

	case "CopyWorkspaceImageWithContext":
		return m.Fake(d.fakeCopyWorkspaceImageWithContext)

	case "CreateIpGroupWithContext":
		return m.Fake(d.fakeCreateIpGroupWithContext)

	case "CreateTagsWithContext":
		return m.Fake(d.fakeCreateTagsWithContext)

	case "CreateWorkspacesWithContext":
		return m.Fake(d.fakeCreateWorkspacesWithContext)

	case "DeleteIpGroupWithContext":
		return m.Fake(d.fakeDeleteIpGroupWithContext)

	case "DeleteTagsWithContext":
		return m.Fake(d.fakeDeleteTagsWithContext)

	case "DeleteWorkspaceImageWithContext":
		return m.Fake(d.fakeDeleteWorkspaceImageWithContext)

	case "DeregisterWorkspaceDirectoryWithContext":
		return m.Fake(d.fakeDeregisterWorkspaceDirectoryWithContext)

	case "DescribeAccountModificationsWithContext":
		return m.Fake(d.fakeDescribeAccountModificationsWithContext)

	case "DescribeAccountWithContext":
		return m.Fake(d.fakeDescribeAccountWithContext)

	case "DescribeClientPropertiesWithContext":
		return m.Fake(d.fakeDescribeClientPropertiesWithContext)

	case "DescribeIpGroupsWithContext":
		return m.Fake(d.fakeDescribeIpGroupsWithContext)

	case "DescribeTagsWithContext":
		return m.Fake(d.fakeDescribeTagsWithContext)

	case "DescribeWorkspaceBundlesPages":
		return m.Fake(d.fakeDescribeWorkspaceBundlesPages)

	case "DescribeWorkspaceBundlesPagesWithContext":
		return m.Fake(d.fakeDescribeWorkspaceBundlesPagesWithContext)

	case "DescribeWorkspaceBundlesWithContext":
		return m.Fake(d.fakeDescribeWorkspaceBundlesWithContext)

	case "DescribeWorkspaceDirectoriesPages":
		return m.Fake(d.fakeDescribeWorkspaceDirectoriesPages)

	case "DescribeWorkspaceDirectoriesPagesWithContext":
		return m.Fake(d.fakeDescribeWorkspaceDirectoriesPagesWithContext)

	case "DescribeWorkspaceDirectoriesWithContext":
		return m.Fake(d.fakeDescribeWorkspaceDirectoriesWithContext)

	case "DescribeWorkspaceImagesWithContext":
		return m.Fake(d.fakeDescribeWorkspaceImagesWithContext)

	case "DescribeWorkspaceSnapshotsWithContext":
		return m.Fake(d.fakeDescribeWorkspaceSnapshotsWithContext)

	case "DescribeWorkspacesConnectionStatusWithContext":
		return m.Fake(d.fakeDescribeWorkspacesConnectionStatusWithContext)

	case "DescribeWorkspacesPages":
		return m.Fake(d.fakeDescribeWorkspacesPages)

	case "DescribeWorkspacesPagesWithContext":
		return m.Fake(d.fakeDescribeWorkspacesPagesWithContext)

	case "DescribeWorkspacesWithContext":
		return m.Fake(d.fakeDescribeWorkspacesWithContext)

	case "DisassociateIpGroupsWithContext":
		return m.Fake(d.fakeDisassociateIpGroupsWithContext)

	case "ImportWorkspaceImageWithContext":
		return m.Fake(d.fakeImportWorkspaceImageWithContext)

	case "ListAvailableManagementCidrRangesWithContext":
		return m.Fake(d.fakeListAvailableManagementCidrRangesWithContext)

	case "MigrateWorkspaceWithContext":
		return m.Fake(d.fakeMigrateWorkspaceWithContext)

	case "ModifyAccountWithContext":
		return m.Fake(d.fakeModifyAccountWithContext)

	case "ModifyClientPropertiesWithContext":
		return m.Fake(d.fakeModifyClientPropertiesWithContext)

	case "ModifySelfservicePermissionsWithContext":
		return m.Fake(d.fakeModifySelfservicePermissionsWithContext)

	case "ModifyWorkspaceAccessPropertiesWithContext":
		return m.Fake(d.fakeModifyWorkspaceAccessPropertiesWithContext)

	case "ModifyWorkspaceCreationPropertiesWithContext":
		return m.Fake(d.fakeModifyWorkspaceCreationPropertiesWithContext)

	case "ModifyWorkspacePropertiesWithContext":
		return m.Fake(d.fakeModifyWorkspacePropertiesWithContext)

	case "ModifyWorkspaceStateWithContext":
		return m.Fake(d.fakeModifyWorkspaceStateWithContext)

	case "RebootWorkspacesWithContext":
		return m.Fake(d.fakeRebootWorkspacesWithContext)

	case "RebuildWorkspacesWithContext":
		return m.Fake(d.fakeRebuildWorkspacesWithContext)

	case "RegisterWorkspaceDirectoryWithContext":
		return m.Fake(d.fakeRegisterWorkspaceDirectoryWithContext)

	case "RestoreWorkspaceWithContext":
		return m.Fake(d.fakeRestoreWorkspaceWithContext)

	case "RevokeIpRulesWithContext":
		return m.Fake(d.fakeRevokeIpRulesWithContext)

	case "StartWorkspacesWithContext":
		return m.Fake(d.fakeStartWorkspacesWithContext)

	case "StopWorkspacesWithContext":
		return m.Fake(d.fakeStopWorkspacesWithContext)

	case "TerminateWorkspacesWithContext":
		return m.Fake(d.fakeTerminateWorkspacesWithContext)

	case "UpdateRulesOfIpGroupWithContext":
		return m.Fake(d.fakeUpdateRulesOfIpGroupWithContext)

	default:
		return nil
	}
}

func (d *WorkSpacesDouble) AssociateIpGroups(i0 *workspaces.AssociateIpGroupsInput) (r0 *workspaces.AssociateIpGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateIpGroups", i0)
	r0, _ = returns[0].(*workspaces.AssociateIpGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) AssociateIpGroupsRequest(i0 *workspaces.AssociateIpGroupsInput) (r0 *request.Request, r1 *workspaces.AssociateIpGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateIpGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.AssociateIpGroupsOutput)
	return
}

func (d *WorkSpacesDouble) AssociateIpGroupsWithContext(i0 context.Context, i1 *workspaces.AssociateIpGroupsInput, i2 ...request.Option) (r0 *workspaces.AssociateIpGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AssociateIpGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.AssociateIpGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeAssociateIpGroupsWithContext(ctx context.Context, in *workspaces.AssociateIpGroupsInput, _ ...request.Option) (*workspaces.AssociateIpGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AssociateIpGroups cancelled", ctx.Err())
	default:
		return d.AssociateIpGroups(in)
	}
}

func (d *WorkSpacesDouble) AuthorizeIpRules(i0 *workspaces.AuthorizeIpRulesInput) (r0 *workspaces.AuthorizeIpRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeIpRules", i0)
	r0, _ = returns[0].(*workspaces.AuthorizeIpRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) AuthorizeIpRulesRequest(i0 *workspaces.AuthorizeIpRulesInput) (r0 *request.Request, r1 *workspaces.AuthorizeIpRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeIpRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.AuthorizeIpRulesOutput)
	return
}

func (d *WorkSpacesDouble) AuthorizeIpRulesWithContext(i0 context.Context, i1 *workspaces.AuthorizeIpRulesInput, i2 ...request.Option) (r0 *workspaces.AuthorizeIpRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("AuthorizeIpRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.AuthorizeIpRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeAuthorizeIpRulesWithContext(ctx context.Context, in *workspaces.AuthorizeIpRulesInput, _ ...request.Option) (*workspaces.AuthorizeIpRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "AuthorizeIpRules cancelled", ctx.Err())
	default:
		return d.AuthorizeIpRules(in)
	}
}

func (d *WorkSpacesDouble) CopyWorkspaceImage(i0 *workspaces.CopyWorkspaceImageInput) (r0 *workspaces.CopyWorkspaceImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyWorkspaceImage", i0)
	r0, _ = returns[0].(*workspaces.CopyWorkspaceImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) CopyWorkspaceImageRequest(i0 *workspaces.CopyWorkspaceImageInput) (r0 *request.Request, r1 *workspaces.CopyWorkspaceImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyWorkspaceImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.CopyWorkspaceImageOutput)
	return
}

func (d *WorkSpacesDouble) CopyWorkspaceImageWithContext(i0 context.Context, i1 *workspaces.CopyWorkspaceImageInput, i2 ...request.Option) (r0 *workspaces.CopyWorkspaceImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CopyWorkspaceImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.CopyWorkspaceImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeCopyWorkspaceImageWithContext(ctx context.Context, in *workspaces.CopyWorkspaceImageInput, _ ...request.Option) (*workspaces.CopyWorkspaceImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CopyWorkspaceImage cancelled", ctx.Err())
	default:
		return d.CopyWorkspaceImage(in)
	}
}

func (d *WorkSpacesDouble) CreateIpGroup(i0 *workspaces.CreateIpGroupInput) (r0 *workspaces.CreateIpGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIpGroup", i0)
	r0, _ = returns[0].(*workspaces.CreateIpGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) CreateIpGroupRequest(i0 *workspaces.CreateIpGroupInput) (r0 *request.Request, r1 *workspaces.CreateIpGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIpGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.CreateIpGroupOutput)
	return
}

func (d *WorkSpacesDouble) CreateIpGroupWithContext(i0 context.Context, i1 *workspaces.CreateIpGroupInput, i2 ...request.Option) (r0 *workspaces.CreateIpGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateIpGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.CreateIpGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeCreateIpGroupWithContext(ctx context.Context, in *workspaces.CreateIpGroupInput, _ ...request.Option) (*workspaces.CreateIpGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateIpGroup cancelled", ctx.Err())
	default:
		return d.CreateIpGroup(in)
	}
}

func (d *WorkSpacesDouble) CreateTags(i0 *workspaces.CreateTagsInput) (r0 *workspaces.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTags", i0)
	r0, _ = returns[0].(*workspaces.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) CreateTagsRequest(i0 *workspaces.CreateTagsInput) (r0 *request.Request, r1 *workspaces.CreateTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.CreateTagsOutput)
	return
}

func (d *WorkSpacesDouble) CreateTagsWithContext(i0 context.Context, i1 *workspaces.CreateTagsInput, i2 ...request.Option) (r0 *workspaces.CreateTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.CreateTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeCreateTagsWithContext(ctx context.Context, in *workspaces.CreateTagsInput, _ ...request.Option) (*workspaces.CreateTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateTags cancelled", ctx.Err())
	default:
		return d.CreateTags(in)
	}
}

func (d *WorkSpacesDouble) CreateWorkspaces(i0 *workspaces.CreateWorkspacesInput) (r0 *workspaces.CreateWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkspaces", i0)
	r0, _ = returns[0].(*workspaces.CreateWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) CreateWorkspacesRequest(i0 *workspaces.CreateWorkspacesInput) (r0 *request.Request, r1 *workspaces.CreateWorkspacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkspacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.CreateWorkspacesOutput)
	return
}

func (d *WorkSpacesDouble) CreateWorkspacesWithContext(i0 context.Context, i1 *workspaces.CreateWorkspacesInput, i2 ...request.Option) (r0 *workspaces.CreateWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("CreateWorkspacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.CreateWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeCreateWorkspacesWithContext(ctx context.Context, in *workspaces.CreateWorkspacesInput, _ ...request.Option) (*workspaces.CreateWorkspacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "CreateWorkspaces cancelled", ctx.Err())
	default:
		return d.CreateWorkspaces(in)
	}
}

func (d *WorkSpacesDouble) DeleteIpGroup(i0 *workspaces.DeleteIpGroupInput) (r0 *workspaces.DeleteIpGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIpGroup", i0)
	r0, _ = returns[0].(*workspaces.DeleteIpGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DeleteIpGroupRequest(i0 *workspaces.DeleteIpGroupInput) (r0 *request.Request, r1 *workspaces.DeleteIpGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIpGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DeleteIpGroupOutput)
	return
}

func (d *WorkSpacesDouble) DeleteIpGroupWithContext(i0 context.Context, i1 *workspaces.DeleteIpGroupInput, i2 ...request.Option) (r0 *workspaces.DeleteIpGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteIpGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DeleteIpGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDeleteIpGroupWithContext(ctx context.Context, in *workspaces.DeleteIpGroupInput, _ ...request.Option) (*workspaces.DeleteIpGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteIpGroup cancelled", ctx.Err())
	default:
		return d.DeleteIpGroup(in)
	}
}

func (d *WorkSpacesDouble) DeleteTags(i0 *workspaces.DeleteTagsInput) (r0 *workspaces.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTags", i0)
	r0, _ = returns[0].(*workspaces.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DeleteTagsRequest(i0 *workspaces.DeleteTagsInput) (r0 *request.Request, r1 *workspaces.DeleteTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DeleteTagsOutput)
	return
}

func (d *WorkSpacesDouble) DeleteTagsWithContext(i0 context.Context, i1 *workspaces.DeleteTagsInput, i2 ...request.Option) (r0 *workspaces.DeleteTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DeleteTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDeleteTagsWithContext(ctx context.Context, in *workspaces.DeleteTagsInput, _ ...request.Option) (*workspaces.DeleteTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteTags cancelled", ctx.Err())
	default:
		return d.DeleteTags(in)
	}
}

func (d *WorkSpacesDouble) DeleteWorkspaceImage(i0 *workspaces.DeleteWorkspaceImageInput) (r0 *workspaces.DeleteWorkspaceImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkspaceImage", i0)
	r0, _ = returns[0].(*workspaces.DeleteWorkspaceImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DeleteWorkspaceImageRequest(i0 *workspaces.DeleteWorkspaceImageInput) (r0 *request.Request, r1 *workspaces.DeleteWorkspaceImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkspaceImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DeleteWorkspaceImageOutput)
	return
}

func (d *WorkSpacesDouble) DeleteWorkspaceImageWithContext(i0 context.Context, i1 *workspaces.DeleteWorkspaceImageInput, i2 ...request.Option) (r0 *workspaces.DeleteWorkspaceImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeleteWorkspaceImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DeleteWorkspaceImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDeleteWorkspaceImageWithContext(ctx context.Context, in *workspaces.DeleteWorkspaceImageInput, _ ...request.Option) (*workspaces.DeleteWorkspaceImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeleteWorkspaceImage cancelled", ctx.Err())
	default:
		return d.DeleteWorkspaceImage(in)
	}
}

func (d *WorkSpacesDouble) DeregisterWorkspaceDirectory(i0 *workspaces.DeregisterWorkspaceDirectoryInput) (r0 *workspaces.DeregisterWorkspaceDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterWorkspaceDirectory", i0)
	r0, _ = returns[0].(*workspaces.DeregisterWorkspaceDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DeregisterWorkspaceDirectoryRequest(i0 *workspaces.DeregisterWorkspaceDirectoryInput) (r0 *request.Request, r1 *workspaces.DeregisterWorkspaceDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterWorkspaceDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DeregisterWorkspaceDirectoryOutput)
	return
}

func (d *WorkSpacesDouble) DeregisterWorkspaceDirectoryWithContext(i0 context.Context, i1 *workspaces.DeregisterWorkspaceDirectoryInput, i2 ...request.Option) (r0 *workspaces.DeregisterWorkspaceDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DeregisterWorkspaceDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DeregisterWorkspaceDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDeregisterWorkspaceDirectoryWithContext(ctx context.Context, in *workspaces.DeregisterWorkspaceDirectoryInput, _ ...request.Option) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DeregisterWorkspaceDirectory cancelled", ctx.Err())
	default:
		return d.DeregisterWorkspaceDirectory(in)
	}
}

func (d *WorkSpacesDouble) DescribeAccount(i0 *workspaces.DescribeAccountInput) (r0 *workspaces.DescribeAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccount", i0)
	r0, _ = returns[0].(*workspaces.DescribeAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeAccountModifications(i0 *workspaces.DescribeAccountModificationsInput) (r0 *workspaces.DescribeAccountModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountModifications", i0)
	r0, _ = returns[0].(*workspaces.DescribeAccountModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeAccountModificationsRequest(i0 *workspaces.DescribeAccountModificationsInput) (r0 *request.Request, r1 *workspaces.DescribeAccountModificationsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountModificationsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeAccountModificationsOutput)
	return
}

func (d *WorkSpacesDouble) DescribeAccountModificationsWithContext(i0 context.Context, i1 *workspaces.DescribeAccountModificationsInput, i2 ...request.Option) (r0 *workspaces.DescribeAccountModificationsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountModificationsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeAccountModificationsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeAccountModificationsWithContext(ctx context.Context, in *workspaces.DescribeAccountModificationsInput, _ ...request.Option) (*workspaces.DescribeAccountModificationsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccountModifications cancelled", ctx.Err())
	default:
		return d.DescribeAccountModifications(in)
	}
}

func (d *WorkSpacesDouble) DescribeAccountRequest(i0 *workspaces.DescribeAccountInput) (r0 *request.Request, r1 *workspaces.DescribeAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeAccountOutput)
	return
}

func (d *WorkSpacesDouble) DescribeAccountWithContext(i0 context.Context, i1 *workspaces.DescribeAccountInput, i2 ...request.Option) (r0 *workspaces.DescribeAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeAccountWithContext(ctx context.Context, in *workspaces.DescribeAccountInput, _ ...request.Option) (*workspaces.DescribeAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeAccount cancelled", ctx.Err())
	default:
		return d.DescribeAccount(in)
	}
}

func (d *WorkSpacesDouble) DescribeClientProperties(i0 *workspaces.DescribeClientPropertiesInput) (r0 *workspaces.DescribeClientPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientProperties", i0)
	r0, _ = returns[0].(*workspaces.DescribeClientPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeClientPropertiesRequest(i0 *workspaces.DescribeClientPropertiesInput) (r0 *request.Request, r1 *workspaces.DescribeClientPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeClientPropertiesOutput)
	return
}

func (d *WorkSpacesDouble) DescribeClientPropertiesWithContext(i0 context.Context, i1 *workspaces.DescribeClientPropertiesInput, i2 ...request.Option) (r0 *workspaces.DescribeClientPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeClientPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeClientPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeClientPropertiesWithContext(ctx context.Context, in *workspaces.DescribeClientPropertiesInput, _ ...request.Option) (*workspaces.DescribeClientPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeClientProperties cancelled", ctx.Err())
	default:
		return d.DescribeClientProperties(in)
	}
}

func (d *WorkSpacesDouble) DescribeIpGroups(i0 *workspaces.DescribeIpGroupsInput) (r0 *workspaces.DescribeIpGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpGroups", i0)
	r0, _ = returns[0].(*workspaces.DescribeIpGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeIpGroupsRequest(i0 *workspaces.DescribeIpGroupsInput) (r0 *request.Request, r1 *workspaces.DescribeIpGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeIpGroupsOutput)
	return
}

func (d *WorkSpacesDouble) DescribeIpGroupsWithContext(i0 context.Context, i1 *workspaces.DescribeIpGroupsInput, i2 ...request.Option) (r0 *workspaces.DescribeIpGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeIpGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeIpGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeIpGroupsWithContext(ctx context.Context, in *workspaces.DescribeIpGroupsInput, _ ...request.Option) (*workspaces.DescribeIpGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeIpGroups cancelled", ctx.Err())
	default:
		return d.DescribeIpGroups(in)
	}
}

func (d *WorkSpacesDouble) DescribeTags(i0 *workspaces.DescribeTagsInput) (r0 *workspaces.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTags", i0)
	r0, _ = returns[0].(*workspaces.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeTagsRequest(i0 *workspaces.DescribeTagsInput) (r0 *request.Request, r1 *workspaces.DescribeTagsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeTagsOutput)
	return
}

func (d *WorkSpacesDouble) DescribeTagsWithContext(i0 context.Context, i1 *workspaces.DescribeTagsInput, i2 ...request.Option) (r0 *workspaces.DescribeTagsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeTagsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeTagsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeTagsWithContext(ctx context.Context, in *workspaces.DescribeTagsInput, _ ...request.Option) (*workspaces.DescribeTagsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeTags cancelled", ctx.Err())
	default:
		return d.DescribeTags(in)
	}
}

func (d *WorkSpacesDouble) DescribeWorkspaceBundles(i0 *workspaces.DescribeWorkspaceBundlesInput) (r0 *workspaces.DescribeWorkspaceBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceBundles", i0)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceBundlesPages(i0 *workspaces.DescribeWorkspaceBundlesInput, i1 func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceBundlesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceBundlesPages(in *workspaces.DescribeWorkspaceBundlesInput, pager func(*workspaces.DescribeWorkspaceBundlesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeWorkspaceBundles", paginators, in, pager)
}

func (d *WorkSpacesDouble) DescribeWorkspaceBundlesPagesWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspaceBundlesInput, i2 func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceBundlesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceBundlesPagesWithContext(ctx context.Context, in *workspaces.DescribeWorkspaceBundlesInput, pager func(*workspaces.DescribeWorkspaceBundlesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeWorkspaceBundles", paginators, ctx, in, pager, options...)
}

func (d *WorkSpacesDouble) DescribeWorkspaceBundlesRequest(i0 *workspaces.DescribeWorkspaceBundlesInput) (r0 *request.Request, r1 *workspaces.DescribeWorkspaceBundlesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceBundlesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeWorkspaceBundlesOutput)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceBundlesWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspaceBundlesInput, i2 ...request.Option) (r0 *workspaces.DescribeWorkspaceBundlesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceBundlesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceBundlesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceBundlesWithContext(ctx context.Context, in *workspaces.DescribeWorkspaceBundlesInput, _ ...request.Option) (*workspaces.DescribeWorkspaceBundlesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkspaceBundles cancelled", ctx.Err())
	default:
		return d.DescribeWorkspaceBundles(in)
	}
}

func (d *WorkSpacesDouble) DescribeWorkspaceDirectories(i0 *workspaces.DescribeWorkspaceDirectoriesInput) (r0 *workspaces.DescribeWorkspaceDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceDirectories", i0)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceDirectoriesPages(i0 *workspaces.DescribeWorkspaceDirectoriesInput, i1 func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceDirectoriesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceDirectoriesPages(in *workspaces.DescribeWorkspaceDirectoriesInput, pager func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeWorkspaceDirectories", paginators, in, pager)
}

func (d *WorkSpacesDouble) DescribeWorkspaceDirectoriesPagesWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspaceDirectoriesInput, i2 func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceDirectoriesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceDirectoriesPagesWithContext(ctx context.Context, in *workspaces.DescribeWorkspaceDirectoriesInput, pager func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeWorkspaceDirectories", paginators, ctx, in, pager, options...)
}

func (d *WorkSpacesDouble) DescribeWorkspaceDirectoriesRequest(i0 *workspaces.DescribeWorkspaceDirectoriesInput) (r0 *request.Request, r1 *workspaces.DescribeWorkspaceDirectoriesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceDirectoriesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceDirectoriesWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspaceDirectoriesInput, i2 ...request.Option) (r0 *workspaces.DescribeWorkspaceDirectoriesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceDirectoriesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceDirectoriesWithContext(ctx context.Context, in *workspaces.DescribeWorkspaceDirectoriesInput, _ ...request.Option) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkspaceDirectories cancelled", ctx.Err())
	default:
		return d.DescribeWorkspaceDirectories(in)
	}
}

func (d *WorkSpacesDouble) DescribeWorkspaceImages(i0 *workspaces.DescribeWorkspaceImagesInput) (r0 *workspaces.DescribeWorkspaceImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceImages", i0)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceImagesRequest(i0 *workspaces.DescribeWorkspaceImagesInput) (r0 *request.Request, r1 *workspaces.DescribeWorkspaceImagesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceImagesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeWorkspaceImagesOutput)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceImagesWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspaceImagesInput, i2 ...request.Option) (r0 *workspaces.DescribeWorkspaceImagesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceImagesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceImagesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceImagesWithContext(ctx context.Context, in *workspaces.DescribeWorkspaceImagesInput, _ ...request.Option) (*workspaces.DescribeWorkspaceImagesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkspaceImages cancelled", ctx.Err())
	default:
		return d.DescribeWorkspaceImages(in)
	}
}

func (d *WorkSpacesDouble) DescribeWorkspaceSnapshots(i0 *workspaces.DescribeWorkspaceSnapshotsInput) (r0 *workspaces.DescribeWorkspaceSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceSnapshots", i0)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceSnapshotsRequest(i0 *workspaces.DescribeWorkspaceSnapshotsInput) (r0 *request.Request, r1 *workspaces.DescribeWorkspaceSnapshotsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceSnapshotsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeWorkspaceSnapshotsOutput)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspaceSnapshotsWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspaceSnapshotsInput, i2 ...request.Option) (r0 *workspaces.DescribeWorkspaceSnapshotsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaceSnapshotsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeWorkspaceSnapshotsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspaceSnapshotsWithContext(ctx context.Context, in *workspaces.DescribeWorkspaceSnapshotsInput, _ ...request.Option) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkspaceSnapshots cancelled", ctx.Err())
	default:
		return d.DescribeWorkspaceSnapshots(in)
	}
}

func (d *WorkSpacesDouble) DescribeWorkspaces(i0 *workspaces.DescribeWorkspacesInput) (r0 *workspaces.DescribeWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspaces", i0)
	r0, _ = returns[0].(*workspaces.DescribeWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspacesConnectionStatus(i0 *workspaces.DescribeWorkspacesConnectionStatusInput) (r0 *workspaces.DescribeWorkspacesConnectionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspacesConnectionStatus", i0)
	r0, _ = returns[0].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspacesConnectionStatusRequest(i0 *workspaces.DescribeWorkspacesConnectionStatusInput) (r0 *request.Request, r1 *workspaces.DescribeWorkspacesConnectionStatusOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspacesConnectionStatusRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspacesConnectionStatusWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspacesConnectionStatusInput, i2 ...request.Option) (r0 *workspaces.DescribeWorkspacesConnectionStatusOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspacesConnectionStatusWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspacesConnectionStatusWithContext(ctx context.Context, in *workspaces.DescribeWorkspacesConnectionStatusInput, _ ...request.Option) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkspacesConnectionStatus cancelled", ctx.Err())
	default:
		return d.DescribeWorkspacesConnectionStatus(in)
	}
}

func (d *WorkSpacesDouble) DescribeWorkspacesPages(i0 *workspaces.DescribeWorkspacesInput, i1 func(*workspaces.DescribeWorkspacesOutput, bool) bool) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspacesPages", i0, i1)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspacesPages(in *workspaces.DescribeWorkspacesInput, pager func(*workspaces.DescribeWorkspacesOutput, bool) (shouldContinue bool)) error {
	return d.Paginate("DescribeWorkspaces", paginators, in, pager)
}

func (d *WorkSpacesDouble) DescribeWorkspacesPagesWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspacesInput, i2 func(*workspaces.DescribeWorkspacesOutput, bool) bool, i3 ...request.Option) (r0 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspacesPagesWithContext", i0, i1, i2, i3)
	r0, _ = returns[0].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspacesPagesWithContext(ctx context.Context, in *workspaces.DescribeWorkspacesInput, pager func(*workspaces.DescribeWorkspacesOutput, bool) (shouldContinue bool), options ...request.Option) error {
	return d.PaginateWithContext("DescribeWorkspaces", paginators, ctx, in, pager, options...)
}

func (d *WorkSpacesDouble) DescribeWorkspacesRequest(i0 *workspaces.DescribeWorkspacesInput) (r0 *request.Request, r1 *workspaces.DescribeWorkspacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DescribeWorkspacesOutput)
	return
}

func (d *WorkSpacesDouble) DescribeWorkspacesWithContext(i0 context.Context, i1 *workspaces.DescribeWorkspacesInput, i2 ...request.Option) (r0 *workspaces.DescribeWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DescribeWorkspacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DescribeWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDescribeWorkspacesWithContext(ctx context.Context, in *workspaces.DescribeWorkspacesInput, _ ...request.Option) (*workspaces.DescribeWorkspacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DescribeWorkspaces cancelled", ctx.Err())
	default:
		return d.DescribeWorkspaces(in)
	}
}

func (d *WorkSpacesDouble) DisassociateIpGroups(i0 *workspaces.DisassociateIpGroupsInput) (r0 *workspaces.DisassociateIpGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateIpGroups", i0)
	r0, _ = returns[0].(*workspaces.DisassociateIpGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) DisassociateIpGroupsRequest(i0 *workspaces.DisassociateIpGroupsInput) (r0 *request.Request, r1 *workspaces.DisassociateIpGroupsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateIpGroupsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.DisassociateIpGroupsOutput)
	return
}

func (d *WorkSpacesDouble) DisassociateIpGroupsWithContext(i0 context.Context, i1 *workspaces.DisassociateIpGroupsInput, i2 ...request.Option) (r0 *workspaces.DisassociateIpGroupsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("DisassociateIpGroupsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.DisassociateIpGroupsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeDisassociateIpGroupsWithContext(ctx context.Context, in *workspaces.DisassociateIpGroupsInput, _ ...request.Option) (*workspaces.DisassociateIpGroupsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "DisassociateIpGroups cancelled", ctx.Err())
	default:
		return d.DisassociateIpGroups(in)
	}
}

func (d *WorkSpacesDouble) ImportWorkspaceImage(i0 *workspaces.ImportWorkspaceImageInput) (r0 *workspaces.ImportWorkspaceImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportWorkspaceImage", i0)
	r0, _ = returns[0].(*workspaces.ImportWorkspaceImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ImportWorkspaceImageRequest(i0 *workspaces.ImportWorkspaceImageInput) (r0 *request.Request, r1 *workspaces.ImportWorkspaceImageOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportWorkspaceImageRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ImportWorkspaceImageOutput)
	return
}

func (d *WorkSpacesDouble) ImportWorkspaceImageWithContext(i0 context.Context, i1 *workspaces.ImportWorkspaceImageInput, i2 ...request.Option) (r0 *workspaces.ImportWorkspaceImageOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ImportWorkspaceImageWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ImportWorkspaceImageOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeImportWorkspaceImageWithContext(ctx context.Context, in *workspaces.ImportWorkspaceImageInput, _ ...request.Option) (*workspaces.ImportWorkspaceImageOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ImportWorkspaceImage cancelled", ctx.Err())
	default:
		return d.ImportWorkspaceImage(in)
	}
}

func (d *WorkSpacesDouble) ListAvailableManagementCidrRanges(i0 *workspaces.ListAvailableManagementCidrRangesInput) (r0 *workspaces.ListAvailableManagementCidrRangesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableManagementCidrRanges", i0)
	r0, _ = returns[0].(*workspaces.ListAvailableManagementCidrRangesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ListAvailableManagementCidrRangesRequest(i0 *workspaces.ListAvailableManagementCidrRangesInput) (r0 *request.Request, r1 *workspaces.ListAvailableManagementCidrRangesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableManagementCidrRangesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ListAvailableManagementCidrRangesOutput)
	return
}

func (d *WorkSpacesDouble) ListAvailableManagementCidrRangesWithContext(i0 context.Context, i1 *workspaces.ListAvailableManagementCidrRangesInput, i2 ...request.Option) (r0 *workspaces.ListAvailableManagementCidrRangesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ListAvailableManagementCidrRangesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ListAvailableManagementCidrRangesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeListAvailableManagementCidrRangesWithContext(ctx context.Context, in *workspaces.ListAvailableManagementCidrRangesInput, _ ...request.Option) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ListAvailableManagementCidrRanges cancelled", ctx.Err())
	default:
		return d.ListAvailableManagementCidrRanges(in)
	}
}

func (d *WorkSpacesDouble) MigrateWorkspace(i0 *workspaces.MigrateWorkspaceInput) (r0 *workspaces.MigrateWorkspaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MigrateWorkspace", i0)
	r0, _ = returns[0].(*workspaces.MigrateWorkspaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) MigrateWorkspaceRequest(i0 *workspaces.MigrateWorkspaceInput) (r0 *request.Request, r1 *workspaces.MigrateWorkspaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MigrateWorkspaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.MigrateWorkspaceOutput)
	return
}

func (d *WorkSpacesDouble) MigrateWorkspaceWithContext(i0 context.Context, i1 *workspaces.MigrateWorkspaceInput, i2 ...request.Option) (r0 *workspaces.MigrateWorkspaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("MigrateWorkspaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.MigrateWorkspaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeMigrateWorkspaceWithContext(ctx context.Context, in *workspaces.MigrateWorkspaceInput, _ ...request.Option) (*workspaces.MigrateWorkspaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "MigrateWorkspace cancelled", ctx.Err())
	default:
		return d.MigrateWorkspace(in)
	}
}

func (d *WorkSpacesDouble) ModifyAccount(i0 *workspaces.ModifyAccountInput) (r0 *workspaces.ModifyAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyAccount", i0)
	r0, _ = returns[0].(*workspaces.ModifyAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ModifyAccountRequest(i0 *workspaces.ModifyAccountInput) (r0 *request.Request, r1 *workspaces.ModifyAccountOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyAccountRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ModifyAccountOutput)
	return
}

func (d *WorkSpacesDouble) ModifyAccountWithContext(i0 context.Context, i1 *workspaces.ModifyAccountInput, i2 ...request.Option) (r0 *workspaces.ModifyAccountOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyAccountWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ModifyAccountOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeModifyAccountWithContext(ctx context.Context, in *workspaces.ModifyAccountInput, _ ...request.Option) (*workspaces.ModifyAccountOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyAccount cancelled", ctx.Err())
	default:
		return d.ModifyAccount(in)
	}
}

func (d *WorkSpacesDouble) ModifyClientProperties(i0 *workspaces.ModifyClientPropertiesInput) (r0 *workspaces.ModifyClientPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClientProperties", i0)
	r0, _ = returns[0].(*workspaces.ModifyClientPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ModifyClientPropertiesRequest(i0 *workspaces.ModifyClientPropertiesInput) (r0 *request.Request, r1 *workspaces.ModifyClientPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClientPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ModifyClientPropertiesOutput)
	return
}

func (d *WorkSpacesDouble) ModifyClientPropertiesWithContext(i0 context.Context, i1 *workspaces.ModifyClientPropertiesInput, i2 ...request.Option) (r0 *workspaces.ModifyClientPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyClientPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ModifyClientPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeModifyClientPropertiesWithContext(ctx context.Context, in *workspaces.ModifyClientPropertiesInput, _ ...request.Option) (*workspaces.ModifyClientPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyClientProperties cancelled", ctx.Err())
	default:
		return d.ModifyClientProperties(in)
	}
}

func (d *WorkSpacesDouble) ModifySelfservicePermissions(i0 *workspaces.ModifySelfservicePermissionsInput) (r0 *workspaces.ModifySelfservicePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySelfservicePermissions", i0)
	r0, _ = returns[0].(*workspaces.ModifySelfservicePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ModifySelfservicePermissionsRequest(i0 *workspaces.ModifySelfservicePermissionsInput) (r0 *request.Request, r1 *workspaces.ModifySelfservicePermissionsOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySelfservicePermissionsRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ModifySelfservicePermissionsOutput)
	return
}

func (d *WorkSpacesDouble) ModifySelfservicePermissionsWithContext(i0 context.Context, i1 *workspaces.ModifySelfservicePermissionsInput, i2 ...request.Option) (r0 *workspaces.ModifySelfservicePermissionsOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifySelfservicePermissionsWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ModifySelfservicePermissionsOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeModifySelfservicePermissionsWithContext(ctx context.Context, in *workspaces.ModifySelfservicePermissionsInput, _ ...request.Option) (*workspaces.ModifySelfservicePermissionsOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifySelfservicePermissions cancelled", ctx.Err())
	default:
		return d.ModifySelfservicePermissions(in)
	}
}

func (d *WorkSpacesDouble) ModifyWorkspaceAccessProperties(i0 *workspaces.ModifyWorkspaceAccessPropertiesInput) (r0 *workspaces.ModifyWorkspaceAccessPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceAccessProperties", i0)
	r0, _ = returns[0].(*workspaces.ModifyWorkspaceAccessPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspaceAccessPropertiesRequest(i0 *workspaces.ModifyWorkspaceAccessPropertiesInput) (r0 *request.Request, r1 *workspaces.ModifyWorkspaceAccessPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceAccessPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ModifyWorkspaceAccessPropertiesOutput)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspaceAccessPropertiesWithContext(i0 context.Context, i1 *workspaces.ModifyWorkspaceAccessPropertiesInput, i2 ...request.Option) (r0 *workspaces.ModifyWorkspaceAccessPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceAccessPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ModifyWorkspaceAccessPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeModifyWorkspaceAccessPropertiesWithContext(ctx context.Context, in *workspaces.ModifyWorkspaceAccessPropertiesInput, _ ...request.Option) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyWorkspaceAccessProperties cancelled", ctx.Err())
	default:
		return d.ModifyWorkspaceAccessProperties(in)
	}
}

func (d *WorkSpacesDouble) ModifyWorkspaceCreationProperties(i0 *workspaces.ModifyWorkspaceCreationPropertiesInput) (r0 *workspaces.ModifyWorkspaceCreationPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceCreationProperties", i0)
	r0, _ = returns[0].(*workspaces.ModifyWorkspaceCreationPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspaceCreationPropertiesRequest(i0 *workspaces.ModifyWorkspaceCreationPropertiesInput) (r0 *request.Request, r1 *workspaces.ModifyWorkspaceCreationPropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceCreationPropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ModifyWorkspaceCreationPropertiesOutput)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspaceCreationPropertiesWithContext(i0 context.Context, i1 *workspaces.ModifyWorkspaceCreationPropertiesInput, i2 ...request.Option) (r0 *workspaces.ModifyWorkspaceCreationPropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceCreationPropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ModifyWorkspaceCreationPropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeModifyWorkspaceCreationPropertiesWithContext(ctx context.Context, in *workspaces.ModifyWorkspaceCreationPropertiesInput, _ ...request.Option) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyWorkspaceCreationProperties cancelled", ctx.Err())
	default:
		return d.ModifyWorkspaceCreationProperties(in)
	}
}

func (d *WorkSpacesDouble) ModifyWorkspaceProperties(i0 *workspaces.ModifyWorkspacePropertiesInput) (r0 *workspaces.ModifyWorkspacePropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceProperties", i0)
	r0, _ = returns[0].(*workspaces.ModifyWorkspacePropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspacePropertiesRequest(i0 *workspaces.ModifyWorkspacePropertiesInput) (r0 *request.Request, r1 *workspaces.ModifyWorkspacePropertiesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspacePropertiesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ModifyWorkspacePropertiesOutput)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspacePropertiesWithContext(i0 context.Context, i1 *workspaces.ModifyWorkspacePropertiesInput, i2 ...request.Option) (r0 *workspaces.ModifyWorkspacePropertiesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspacePropertiesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ModifyWorkspacePropertiesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeModifyWorkspacePropertiesWithContext(ctx context.Context, in *workspaces.ModifyWorkspacePropertiesInput, _ ...request.Option) (*workspaces.ModifyWorkspacePropertiesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyWorkspaceProperties cancelled", ctx.Err())
	default:
		return d.ModifyWorkspaceProperties(in)
	}
}

func (d *WorkSpacesDouble) ModifyWorkspaceState(i0 *workspaces.ModifyWorkspaceStateInput) (r0 *workspaces.ModifyWorkspaceStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceState", i0)
	r0, _ = returns[0].(*workspaces.ModifyWorkspaceStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspaceStateRequest(i0 *workspaces.ModifyWorkspaceStateInput) (r0 *request.Request, r1 *workspaces.ModifyWorkspaceStateOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceStateRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.ModifyWorkspaceStateOutput)
	return
}

func (d *WorkSpacesDouble) ModifyWorkspaceStateWithContext(i0 context.Context, i1 *workspaces.ModifyWorkspaceStateInput, i2 ...request.Option) (r0 *workspaces.ModifyWorkspaceStateOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("ModifyWorkspaceStateWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.ModifyWorkspaceStateOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeModifyWorkspaceStateWithContext(ctx context.Context, in *workspaces.ModifyWorkspaceStateInput, _ ...request.Option) (*workspaces.ModifyWorkspaceStateOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "ModifyWorkspaceState cancelled", ctx.Err())
	default:
		return d.ModifyWorkspaceState(in)
	}
}

func (d *WorkSpacesDouble) RebootWorkspaces(i0 *workspaces.RebootWorkspacesInput) (r0 *workspaces.RebootWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootWorkspaces", i0)
	r0, _ = returns[0].(*workspaces.RebootWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) RebootWorkspacesRequest(i0 *workspaces.RebootWorkspacesInput) (r0 *request.Request, r1 *workspaces.RebootWorkspacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootWorkspacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.RebootWorkspacesOutput)
	return
}

func (d *WorkSpacesDouble) RebootWorkspacesWithContext(i0 context.Context, i1 *workspaces.RebootWorkspacesInput, i2 ...request.Option) (r0 *workspaces.RebootWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebootWorkspacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.RebootWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeRebootWorkspacesWithContext(ctx context.Context, in *workspaces.RebootWorkspacesInput, _ ...request.Option) (*workspaces.RebootWorkspacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebootWorkspaces cancelled", ctx.Err())
	default:
		return d.RebootWorkspaces(in)
	}
}

func (d *WorkSpacesDouble) RebuildWorkspaces(i0 *workspaces.RebuildWorkspacesInput) (r0 *workspaces.RebuildWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebuildWorkspaces", i0)
	r0, _ = returns[0].(*workspaces.RebuildWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) RebuildWorkspacesRequest(i0 *workspaces.RebuildWorkspacesInput) (r0 *request.Request, r1 *workspaces.RebuildWorkspacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebuildWorkspacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.RebuildWorkspacesOutput)
	return
}

func (d *WorkSpacesDouble) RebuildWorkspacesWithContext(i0 context.Context, i1 *workspaces.RebuildWorkspacesInput, i2 ...request.Option) (r0 *workspaces.RebuildWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RebuildWorkspacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.RebuildWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeRebuildWorkspacesWithContext(ctx context.Context, in *workspaces.RebuildWorkspacesInput, _ ...request.Option) (*workspaces.RebuildWorkspacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RebuildWorkspaces cancelled", ctx.Err())
	default:
		return d.RebuildWorkspaces(in)
	}
}

func (d *WorkSpacesDouble) RegisterWorkspaceDirectory(i0 *workspaces.RegisterWorkspaceDirectoryInput) (r0 *workspaces.RegisterWorkspaceDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWorkspaceDirectory", i0)
	r0, _ = returns[0].(*workspaces.RegisterWorkspaceDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) RegisterWorkspaceDirectoryRequest(i0 *workspaces.RegisterWorkspaceDirectoryInput) (r0 *request.Request, r1 *workspaces.RegisterWorkspaceDirectoryOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWorkspaceDirectoryRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.RegisterWorkspaceDirectoryOutput)
	return
}

func (d *WorkSpacesDouble) RegisterWorkspaceDirectoryWithContext(i0 context.Context, i1 *workspaces.RegisterWorkspaceDirectoryInput, i2 ...request.Option) (r0 *workspaces.RegisterWorkspaceDirectoryOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RegisterWorkspaceDirectoryWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.RegisterWorkspaceDirectoryOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeRegisterWorkspaceDirectoryWithContext(ctx context.Context, in *workspaces.RegisterWorkspaceDirectoryInput, _ ...request.Option) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RegisterWorkspaceDirectory cancelled", ctx.Err())
	default:
		return d.RegisterWorkspaceDirectory(in)
	}
}

func (d *WorkSpacesDouble) RestoreWorkspace(i0 *workspaces.RestoreWorkspaceInput) (r0 *workspaces.RestoreWorkspaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreWorkspace", i0)
	r0, _ = returns[0].(*workspaces.RestoreWorkspaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) RestoreWorkspaceRequest(i0 *workspaces.RestoreWorkspaceInput) (r0 *request.Request, r1 *workspaces.RestoreWorkspaceOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreWorkspaceRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.RestoreWorkspaceOutput)
	return
}

func (d *WorkSpacesDouble) RestoreWorkspaceWithContext(i0 context.Context, i1 *workspaces.RestoreWorkspaceInput, i2 ...request.Option) (r0 *workspaces.RestoreWorkspaceOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RestoreWorkspaceWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.RestoreWorkspaceOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeRestoreWorkspaceWithContext(ctx context.Context, in *workspaces.RestoreWorkspaceInput, _ ...request.Option) (*workspaces.RestoreWorkspaceOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RestoreWorkspace cancelled", ctx.Err())
	default:
		return d.RestoreWorkspace(in)
	}
}

func (d *WorkSpacesDouble) RevokeIpRules(i0 *workspaces.RevokeIpRulesInput) (r0 *workspaces.RevokeIpRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeIpRules", i0)
	r0, _ = returns[0].(*workspaces.RevokeIpRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) RevokeIpRulesRequest(i0 *workspaces.RevokeIpRulesInput) (r0 *request.Request, r1 *workspaces.RevokeIpRulesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeIpRulesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.RevokeIpRulesOutput)
	return
}

func (d *WorkSpacesDouble) RevokeIpRulesWithContext(i0 context.Context, i1 *workspaces.RevokeIpRulesInput, i2 ...request.Option) (r0 *workspaces.RevokeIpRulesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("RevokeIpRulesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.RevokeIpRulesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeRevokeIpRulesWithContext(ctx context.Context, in *workspaces.RevokeIpRulesInput, _ ...request.Option) (*workspaces.RevokeIpRulesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "RevokeIpRules cancelled", ctx.Err())
	default:
		return d.RevokeIpRules(in)
	}
}

func (d *WorkSpacesDouble) StartWorkspaces(i0 *workspaces.StartWorkspacesInput) (r0 *workspaces.StartWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkspaces", i0)
	r0, _ = returns[0].(*workspaces.StartWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) StartWorkspacesRequest(i0 *workspaces.StartWorkspacesInput) (r0 *request.Request, r1 *workspaces.StartWorkspacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkspacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.StartWorkspacesOutput)
	return
}

func (d *WorkSpacesDouble) StartWorkspacesWithContext(i0 context.Context, i1 *workspaces.StartWorkspacesInput, i2 ...request.Option) (r0 *workspaces.StartWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StartWorkspacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.StartWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeStartWorkspacesWithContext(ctx context.Context, in *workspaces.StartWorkspacesInput, _ ...request.Option) (*workspaces.StartWorkspacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StartWorkspaces cancelled", ctx.Err())
	default:
		return d.StartWorkspaces(in)
	}
}

func (d *WorkSpacesDouble) StopWorkspaces(i0 *workspaces.StopWorkspacesInput) (r0 *workspaces.StopWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopWorkspaces", i0)
	r0, _ = returns[0].(*workspaces.StopWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) StopWorkspacesRequest(i0 *workspaces.StopWorkspacesInput) (r0 *request.Request, r1 *workspaces.StopWorkspacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopWorkspacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.StopWorkspacesOutput)
	return
}

func (d *WorkSpacesDouble) StopWorkspacesWithContext(i0 context.Context, i1 *workspaces.StopWorkspacesInput, i2 ...request.Option) (r0 *workspaces.StopWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("StopWorkspacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.StopWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeStopWorkspacesWithContext(ctx context.Context, in *workspaces.StopWorkspacesInput, _ ...request.Option) (*workspaces.StopWorkspacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "StopWorkspaces cancelled", ctx.Err())
	default:
		return d.StopWorkspaces(in)
	}
}

func (d *WorkSpacesDouble) TerminateWorkspaces(i0 *workspaces.TerminateWorkspacesInput) (r0 *workspaces.TerminateWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateWorkspaces", i0)
	r0, _ = returns[0].(*workspaces.TerminateWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) TerminateWorkspacesRequest(i0 *workspaces.TerminateWorkspacesInput) (r0 *request.Request, r1 *workspaces.TerminateWorkspacesOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateWorkspacesRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.TerminateWorkspacesOutput)
	return
}

func (d *WorkSpacesDouble) TerminateWorkspacesWithContext(i0 context.Context, i1 *workspaces.TerminateWorkspacesInput, i2 ...request.Option) (r0 *workspaces.TerminateWorkspacesOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("TerminateWorkspacesWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.TerminateWorkspacesOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeTerminateWorkspacesWithContext(ctx context.Context, in *workspaces.TerminateWorkspacesInput, _ ...request.Option) (*workspaces.TerminateWorkspacesOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "TerminateWorkspaces cancelled", ctx.Err())
	default:
		return d.TerminateWorkspaces(in)
	}
}

func (d *WorkSpacesDouble) UpdateRulesOfIpGroup(i0 *workspaces.UpdateRulesOfIpGroupInput) (r0 *workspaces.UpdateRulesOfIpGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRulesOfIpGroup", i0)
	r0, _ = returns[0].(*workspaces.UpdateRulesOfIpGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) UpdateRulesOfIpGroupRequest(i0 *workspaces.UpdateRulesOfIpGroupInput) (r0 *request.Request, r1 *workspaces.UpdateRulesOfIpGroupOutput) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRulesOfIpGroupRequest", i0)
	r0, _ = returns[0].(*request.Request)
	r1, _ = returns[1].(*workspaces.UpdateRulesOfIpGroupOutput)
	return
}

func (d *WorkSpacesDouble) UpdateRulesOfIpGroupWithContext(i0 context.Context, i1 *workspaces.UpdateRulesOfIpGroupInput, i2 ...request.Option) (r0 *workspaces.UpdateRulesOfIpGroupOutput, r1 error) {
	d.TestDouble.T().Helper()
	returns := d.TestDouble.Invoke("UpdateRulesOfIpGroupWithContext", i0, i1, i2)
	r0, _ = returns[0].(*workspaces.UpdateRulesOfIpGroupOutput)
	r1, _ = returns[1].(error)
	return
}

func (d *WorkSpacesDouble) fakeUpdateRulesOfIpGroupWithContext(ctx context.Context, in *workspaces.UpdateRulesOfIpGroupInput, _ ...request.Option) (*workspaces.UpdateRulesOfIpGroupOutput, error) {

	select {
	case <-ctx.Done():
		return nil, awserr.New(request.CanceledErrorCode, "UpdateRulesOfIpGroup cancelled", ctx.Err())
	default:
		return d.UpdateRulesOfIpGroup(in)
	}
}
